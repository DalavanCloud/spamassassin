#!/usr/bin/perl -w

use File::Spec;

my $PREFIX = '@@PREFIX@@';  # substituted at 'make' time
my $DEF_RULES_DIR = '@@DEF_RULES_DIR@@';  # substituted at 'make' time
my $LOCAL_RULES_DIR = '@@LOCAL_RULES_DIR@@';  # substituted at 'make' time

use lib '@@INSTALLSITELIB@@';  # substituted at 'make' time

BEGIN {
  # Locate locally installed SA libraries *without* using FindBin, which generates
  # warnings and causes more trouble than its worth.  We don't need to be too
  # smart about this BTW.
  my @bin = File::Spec->splitpath($0);
  my $bin = ($bin[0] ? File::Spec->catpath(@bin[0..1]) : $bin[1])  # /home/jm/foo -> /home/jm
            || File::Spec->curdir;                                 # foo          -> .

  # check to make sure it wasn't just installed in the normal way.
  # note that ./lib/Mail/SpamAssassin.pm takes precedence, for
  # building SpamAssassin on a machine where an old version is installed.
  if (-e $bin.'/lib/Mail/SpamAssassin.pm'
        || !-e '@@INSTALLSITELIB@@/Mail/SpamAssassin.pm')
  {
    # These are common paths where the SA libs might be found.
    foreach (qw(lib ../lib/site_perl
                ../lib/spamassassin ../share/spamassassin/lib))
    {
      my $dir = File::Spec->catdir($bin, split('/', $_));
      if(-f File::Spec->catfile($dir, "Mail", "SpamAssassin.pm")) {
        unshift(@INC, $dir); last;
      }
    }
  }
}

require Mail::SpamAssassin::CmdLearn;
exit Mail::SpamAssassin::CmdLearn::cmdline_run ({ isspam => 0 });

# ---------------------------------------------------------------------------

=head1 NAME

sa-learn-nonspam - train spamassassin with nonspam data

=head1 SYNOPSIS

B<sa-learn-nonspam> [options] I<mailbox_or_folder>

Options:

-f folders, --folders=folders     List the folders to check
--mh                              Check an MH directory
-s, --single                      Check a single message
--showdots                        Show progress using dots
-C file, --config-file=file       Set configuration file
-p prefs, --prefs-file=file       Set user preferences file
-a, --auto-whitelist              Use auto-whitelists
--whitelist-factory               Select whitelist factory
-D, --debug-level [area=n,...]    Print debugging messages
-V, --version                     Print version
-h, --help                        Print usage message

=head1 DESCRIPTION

Given a typical selection of your incoming mail classified as spam or non-spam,
this tool will feed each mail to SpamAssassin, allowing it to 'learn' what
signs are likely to mean spam, and which are likely to mean non-spam.

Simply run this command once for each of your mail folders, and it will
''learn'' from the mail therein.  If you make a mistake and scan a mail
as non-spam when it is spam, simply rescan it correctly and the mistake
will be corrected.

SpamAssassin remembers which mail messages it's learnt already, and will not
re-learn those messages again, unless you use the C<sa-forget> command.

Please note that if your mail folders contain things like forwarded spam,
discussions of spam-catching rules, etc., this will cause trouble.  You
should avoid scanning those messages if possible.

Once the scan finishes, the probabilities database will be rebuilt; this can
take around a minute to complete, so be patient.

(Note: this command is not present in a released version of SpamAssassin yet.)

=head1 OPTIONS

=over 4

=item B<-a>, B<--auto-whitelist>

Use auto-whitelists.  While learning, add addresses to the auto-whitelist
as appropriate.

=item B<-h>, B<--help>

Print help message and exit.

=item B<-C> I<config>, B<--config-file>=I<config>, B<-c> I<config> (deprecated)

Read configuration from I<config>.

=item B<-p> I<prefs>, B<--prefs-file>=I<prefs>

Read user score preferences from I<prefs>.

=item B<-D>, B<--debug-level> C<[area=n,...]>

Produce diagnostic output.

=item B<-M> I<factory>, B<--whitelist-factory>=I<factory>

Select alternative whitelist factory.

=back

=head1 INSTALLATION

The B<sa-learn-nonspam> command is part of the B<Mail::SpamAssassin> Perl module.
Install this as a normal Perl module, using C<perl -MCPAN -e shell>, or by
hand.

=head1 ENVIRONMENT

No environment variables, aside from those used by perl, are required to
be set.

=head1 SEE ALSO

Mail::SpamAssassin(3)
spamassassin(1)
sa-learn-spam(1)
sa-learn-nonspam(1)
sa-forget(1)

=head1 AUTHOR

Justin Mason E<lt>jm /at/ jmason.orgE<gt>

=cut

