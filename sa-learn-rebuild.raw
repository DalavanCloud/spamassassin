#!/usr/bin/perl -w -T

use File::Spec;

my $PREFIX = '@@PREFIX@@';  # substituted at 'make' time
my $DEF_RULES_DIR = '@@DEF_RULES_DIR@@';  # substituted at 'make' time
my $LOCAL_RULES_DIR = '@@LOCAL_RULES_DIR@@';  # substituted at 'make' time

use lib '@@INSTALLSITELIB@@';  # substituted at 'make' time

BEGIN {
  # Locate locally installed SA libraries *without* using FindBin, which generates
  # warnings and causes more trouble than its worth.  We don't need to be too
  # smart about this BTW.
  my @bin = File::Spec->splitpath($0);
  my $bin = ($bin[0] ? File::Spec->catpath(@bin[0..1]) : $bin[1])  # /home/jm/foo -> /home/jm
            || File::Spec->curdir;                                 # foo          -> .

  # check to make sure it wasn't just installed in the normal way.
  # note that ./lib/Mail/SpamAssassin.pm takes precedence, for
  # building SpamAssassin on a machine where an old version is installed.
  if (-e $bin.'/lib/Mail/SpamAssassin.pm'
        || !-e '@@INSTALLSITELIB@@/Mail/SpamAssassin.pm')
  {
    # These are common paths where the SA libs might be found.
    foreach (qw(lib ../lib/site_perl
                ../lib/spamassassin ../share/spamassassin/lib))
    {
      my $dir = File::Spec->catdir($bin, split('/', $_));
      if(-f File::Spec->catfile($dir, "Mail", "SpamAssassin.pm")) {
        unshift(@INC, $dir); last;
      }
    }
  }
}

require Mail::SpamAssassin::CmdLearn;
exit Mail::SpamAssassin::CmdLearn::cmdline_run ({ rebuildonly => 1 });

# ---------------------------------------------------------------------------

=head1 NAME

sa-learn-rebuild - rebuild spamassassin's Bayesian statistics databases

=head1 SYNOPSIS

B<sa-learn-rebuild> [options]

Options:

 --showdots                        Show progress using dots
 --force-expire			   Force an expiry run
 -C file, --config-file=file       Set configuration file
 -p prefs, --prefs-file=file       Set user preferences file
 -D, --debug-level                 Print debugging messages
 -V, --version                     Print version
 -h, --help                        Print usage message

=head1 DESCRIPTION

This command allows busy sites to control the expiration of 'obsolete' data
from SpamAssassin's Bayesian statistics databases.   Some sites may wish to
choose times to update the databases; they should run this command from a
scheduling service like C<cron>.  This is purely optional -- by default,
SpamAssassin will automatically expire old data once daily.

In addition, if SpamAssassin's learning commands, namely B<sa-learn-nonspam>,
B<sa-learn-spam>, and B<sa-forget>, are run with the C<--no-rebuild> option,
this command is required in order to complete the learning process.

See B<sa-learn-nonspam> for more details on SpamAssassin's Bayesian
filtering system.

=head1 OPTIONS

=over 4

=item B<--showdots>

Print a '.' character, as a progress meter.

=item B<--force-expire>

Force a database expiration run.  Normally, tokens are expired twice
every C<bayes_expiry_days> days.

=item B<-h>, B<--help>

Print help message and exit.

=item B<-C> I<config>, B<--config-file>=I<config>

Read configuration from I<config>.

=item B<-p> I<prefs>, B<--prefs-file>=I<prefs>

Read user score preferences from I<prefs>.

=item B<-D>, B<--debug-level>

Produce diagnostic output.

=back

=head1 INSTALLATION

The B<sa-learn-rebuild> command is part of the B<Mail::SpamAssassin> Perl module.
Install this as a normal Perl module, using C<perl -MCPAN -e shell>, or by
hand.

=head1 ENVIRONMENT

No environment variables, aside from those used by perl, are required to
be set.

=head1 SEE ALSO

Mail::SpamAssassin(3)
spamassassin(1)
sa-learn-spam(1)
sa-learn-nonspam(1)
sa-forget(1)

=head1 AUTHOR

Justin Mason E<lt>jm /at/ jmason.orgE<gt>

=cut

