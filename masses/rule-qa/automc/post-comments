#!/usr/bin/perl -w

use URI::Escape;
use XML::Simple;
use Storable;
use strict;
use bytes;

open (CF, "<config");
my %conf; while(<CF>) { /^(\S+)=(\S+)/ and $conf{$1} = $2; }
close CF;

our $USERNAME = $conf{USERNAME};
our $PASSWORD_FILE = $conf{PASSWORD_FILE};
our $SEND_DATA = 0;

our $boilerplate_header = "# [automatically generated by automc: start]\n";
our $boilerplate_footer = "# [automatically generated by automc: end]\n";
our %freqs_file = (
    'DETAILS.new' => $conf{html}.'/DETAILS.new',
);


my $outputs = retrieve($conf{MCTMP}."/outputs.str");


my %freqs_hdr = ();
my %freqs = ();
foreach my $key (sort keys %freqs_file) {
  my $file = $freqs_file{$key};
  open (IN, "<$file") or die "cannot read $file";

  $freqs_hdr{$key}=<IN>;
  %{$freqs{$key}} = ();

  while (<IN>) {
    if (/(?: \(all messages| results used:)/) {
      $freqs_hdr{$key} .= $_;
    }
    elsif (/\s+(\S+)$/) {
      $freqs{$key}{$1} ||= '';
      $freqs{$key}{$1} .= $_;
    }
  }
  close IN;
}

open (IN, "<$PASSWORD_FILE");
my $password = <IN>; chomp $password;
close IN;

# use WWW::Mechanize;
# my $mech = WWW::Mechanize->new( autocheck => 1);
use WWW::Mechanize::Cached;
my $mech = WWW::Mechanize::Cached->new( autocheck => 1);

main();
exit;

sub main {
  # login
  $mech->get (
  
'http://bugzilla.spamassassin.org/query.cgi?Bugzilla_login='.$USERNAME.'&Bugzilla_password='.$password.'&GoAheadAndLogIn=1'

    );

  my @bugs = @{$outputs->{allbugs}};

  foreach my $bug (@bugs) {
    do_bug ($bug);
  }
}

sub do_bug {
  my ($bug) = @_;

  my $comment = "";
  my @trigger_cmts = @{$outputs->{$bug}{trigger_cmts}};
  my @rulenames = @{$outputs->{$bug}{rulenames}};
  my $messages = $outputs->{messages}{$bug};

  $comment .= $boilerplate_header;

  foreach my $cmtnum (@trigger_cmts) {
    $comment .= "# DONEMC $cmtnum: completed request from comment $cmtnum\n";
  }

  use POSIX qw(strftime);
  my $date = strftime("%Y%m%d", localtime);

  foreach my $key (sort keys %freqs_file) {
    my $file = $freqs_file{$key};
    $comment .= "\nfreqs from \"$file\":\n".$freqs_hdr{$key};
    foreach my $rule (@rulenames) {
      if (defined $freqs{$key}{"MC_".$rule}) {
        $comment .= $freqs{$key}{"MC_".$rule};
      } else {
        $comment .= "(could not find freqs for rule 'MC_$rule')\n";
      }
      $comment .= "\nfull freqs: $conf{RULEQA_URL}?rule=MC_$rule&date=$date\n";
    }
  }

  if ($messages) {
    $comment .= "\n".$messages."\n";
  }
  $comment .= $boilerplate_footer;

  if (!$SEND_DATA) {
    print "would post on bug $bug:-------\n$comment\n------------------\n";
    return;
  }

  $mech->get (
'http://bugzilla.spamassassin.org/show_bug.cgi?id='.$bug
  );
  my $current = $mech->content();
  $mech->submit_form (
    form_name => "changeform",
    fields => {
        comment => $comment
    }
  );

}

