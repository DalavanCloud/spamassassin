#!/usr/bin/perl -w

sub usage {
  die "hit-frequencies [-x] [-p]
  
    -x: extended output, with S:N ratio and scores
    -p: percentages. implies -x

";
}

my $arg_extended = 0;
my $arg_pc = 0;

while ($#ARGV >= 0) { 
  my $arg = shift;
  if ($arg eq '-x') {
    $arg_extended = 1;
  } elsif ($arg eq '-p') {
    $arg_pc = 1; $arg_extended = 1;
  } else {
    usage();
  }
}

my %freq_spam = ();
my %freq_nonspam = ();
my $num_spam;
my $num_nonspam;

readlogs();
readscores();

my $hdr_all = $num_spam + $num_nonspam;
my $hdr_spam = $num_spam;
my $hdr_nonspam = $num_nonspam;

if ($arg_pc) {
  printf "%7s  %7s  %7s  %6s  %6s  %s\n",
  	"OVERALL%", "SPAM%", "NONSPAM%", "S:N", "SCORE", "NAME";
  printf "%7d  %7d  %7d  %6.2f  %6.2f  (all messages)\n",
  	$hdr_all, $hdr_spam, $hdr_nonspam, snratio ($num_spam,$num_nonspam), 0;

  $hdr_spam = ($num_spam / $hdr_all) * 100.0;
  $hdr_nonspam = ($num_nonspam / $hdr_all) * 100.0;
  $hdr_all = 100.0;             # this is obvious
  printf "%7.2f  %7.2f  %7.2f  %6.2f  %6.2f  (all messages as %%)\n",
  	$hdr_all, $hdr_spam, $hdr_nonspam, snratio ($num_spam,$num_nonspam), 0;

  $num_spam ||= 0.1;            # avoid div by 0 errors in % calculations later
  $num_nonspam ||= 0.1;

} elsif ($arg_extended) {
  printf "%7s  %7s  %7s  %6s  %6s  %s\n",
  	"OVERALL", "SPAM", "NONSPAM", "S:N", "SCORE", "NAME";
  printf "%7d  %7d  %7d  %6.2f  %6.2f  (all messages)\n",
  	$hdr_all, $hdr_spam, $hdr_nonspam, snratio ($num_spam,$num_nonspam), 0;

} else {
  printf "%10s  %10s  %10s  %s\n",
  	"OVERALL", "SPAM", "NONSPAM", "NAME";
  printf "%10d  %10d  %10d  (all messages)\n",
  	$hdr_all, $hdr_spam, $hdr_nonspam;
}

foreach my $test (sort { 
		  (defined ($freq_spam{$b}) ? $freq_spam{$b} : 0) <=>
		  (defined ($freq_spam{$a}) ? $freq_spam{$a} : 0)
		} keys %freq)
{
  my $fa = $freq{$test};
  my $fs = $freq_spam{$test}; $fs ||= 0;
  my $fn = $freq_nonspam{$test}; $fn ||= 0;
  $score{$test} ||= 1.0;

  if ($arg_pc) {
    $fa = ($fa / ($num_spam + $num_nonspam)) * 100.0;
    $fs = ($fs / ($num_spam)) * 100.0;
    $fn = ($fn / ($num_nonspam)) * 100.0;
  }

  my $snratio = snratio ($freq_spam{$test}, $freq_nonspam{$test});

  if ($arg_pc) {
    printf "%7.2f  %7.2f  %7.2f  %6.2f  %6.2f  %s\n",
  	$fa, $fs, $fn, $snratio, $score{$test}, $test;

  } elsif ($arg_extended) {
    printf "%7d  %7d  %7d  %6.2f  %6.2f  %s\n",
  	$fa, $fs, $fn, $snratio, $score{$test}, $test;

  } else {
    printf "%10d  %10d  %10d  %s\n", $fa, $fs, $fn, $test;
  }
}
exit;



sub readlogs {
  foreach my $file ("spam.log", "nonspam.log") {
    open (IN, "<$file");

    my $isspam = 0; ($file eq 'spam.log') and $isspam = 1;

    while (<IN>) {
      /^.\s+-?(\d+)\s+(\S+)\s*(\S*)/ or next;

      if ($isspam) {
	$num_spam++;
      } else {
	$num_nonspam++;
      }
      my $hits = $1;

      $_ = $3; s/,,+/,/g;
      my @tests = split (/,/, $_);
      foreach my $t (@tests) {
	next if ($t eq '');
	$freq{$t}++;
	if ($isspam) {
	  $freq_spam{$t}++;
	} else {
	  $freq_nonspam{$t}++;
	}
      }
    } 
    close IN;
  }
}


sub readscores {
	my @files = <../rules/[0-9]*.cf>;
	my $file;
	foreach $file (@files) {
  open (IN, "<$file");
  while (<IN>) {
    s/#.*$//g; s/^\s+//; s/\s+$//;

    if (/^(header|body|full|uri)\s+(\S+)\s+/) {
      $freq{$2} ||= 0;
      $freq_spam{$2} ||= 0;
      $freq_nonspam{$2} ||= 0;
      $score{$1} ||= 0;
    } elsif (/^score\s+(\S+)\s+(.+)$/) {
      $freq{$1} ||= 0;
      $freq_spam{$1} ||= 0;
      $freq_nonspam{$1} ||= 0;
      $score{$1} = $2;
    }
  }
  close IN;
  }
}

sub snratio {
  my ($s, $n) = @_;
  $s ||= 0;
  $n ||= 0.01;     #avoid / by 0
  my $result = ($s / $n);
  if ($result > 99.99) {
    return 99.99;
  } else {
    return $result;
  }
}

