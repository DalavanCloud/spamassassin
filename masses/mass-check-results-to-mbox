#!/usr/bin/perl
#
# very handy for e.g.:
#
#   grep SUBJECT_FREQ spam.log | ./mass-check-results-to-mbox | grep Subject:
#
# <@LICENSE>
# ====================================================================
# The Apache Software License, Version 1.1
# 
# Copyright (c) 2000 The Apache Software Foundation.  All rights
# reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 
# 3. The end-user documentation included with the redistribution,
#    if any, must include the following acknowledgment:
#       "This product includes software developed by the
#        Apache Software Foundation (http://www.apache.org/)."
#    Alternately, this acknowledgment may appear in the software itself,
#    if and wherever such third-party acknowledgments normally appear.
# 
# 4. The names "Apache" and "Apache Software Foundation" must
#    not be used to endorse or promote products derived from this
#    software without prior written permission. For written
#    permission, please contact apache@apache.org.
# 
# 5. Products derived from this software may not be called "Apache",
#    nor may "Apache" appear in their name, without prior written
#    permission of the Apache Software Foundation.
# 
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
# ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# ====================================================================
# 
# This software consists of voluntary contributions made by many
# individuals on behalf of the Apache Software Foundation.  For more
# information on the Apache Software Foundation, please see
# <http://www.apache.org/>.
# 
# Portions of this software are based upon public domain software
# originally written at the National Center for Supercomputing Applications,
# University of Illinois, Urbana-Champaign.
# </@LICENSE>

my $grep = undef;
my $annotate = 1;
while ($#ARGV >= 0) {
  $_ = $ARGV[0]; shift;
  if ($_ eq '-grep') { $grep = $ARGV[0]; shift; }
  if ($_ eq '-noannotate') { $annotate = 0; }
}

while (<>) {
  s/^[^\s:]+://;  # filenames, from "grep foo *"

  next if /^#/;
  /^.\s+-?\d+\s+(\S+) / or next;
  my $mail = $1;

  if ($mail =~ /^(\S+):</) {
    my $msgp = find_in_mailbox ($mail);
    if (defined $msgp) {
      $annotate and unshift (@$msgp, "X-Mass-Check-Id: $mail\n");
      handle ($msgp);
    } else {
      mywarn ("failed to find message for $mail\n");
    }

  } else {
    if ($mail =~ /\.gz$/) {
      open (IN, "gunzip -cd $mail |") or mywarn ("gunzip $mail failed: $@");
    } elsif ($mail =~ /\.bz2$/) {
      open (IN, "bzip2 -cd $mail |") or mywarn ("bunzip2 $mail failed: $@");
    } else {
      open (IN, "<$mail") or mywarn ("open $mail failed: $@");
    }
    my @msg = (<IN>); close IN;

    while (scalar @msg > 0 &&
	$msg[0] =~ /^(?:From|X-Mass-Check-Id:) /)
    {
      shift @msg;
    }
    $annotate and unshift (@msg, "X-Mass-Check-Id: $mail\n");

    handle (\@msg);
  }
}

###########################################################################

sub find_in_mailbox {
  my ($mail) = @_;
  $mail =~ /^(\S+):</;
  $folder = $1; my $wantid = $_;

  if (defined $CURRENT_MBOX_OPEN && $folder eq $CURRENT_MBOX_OPEN) {
    # try from current position first
    my $msgp = mbox_search($mail, $folder);
    if (defined ($msgp->[0])) { return $msgp; }
  }

  # failed. have to (re-|)open.
  if ($folder =~ /\.gz$/) {
    open (MBOX, "gunzip -cd $folder |") or mywarn ("gunzip $folder failed: $@");
  } elsif ($folder =~ /\.bz2$/) {
    open (MBOX, "bzip2 -cd $folder |") or mywarn ("bunzip2 $folder failed: $@");
  } else {
    open (MBOX, "<$folder") or mywarn ("open $folder failed: $@");
  }

  $CURRENT_MBOX_OPEN = $folder;
  while (<MBOX>) { /^From \S+ +... ... / and last; }
  my $msgp = mbox_search($mail, $folder);
  return $msgp;
}

sub mbox_search {
  my ($mail, $folder) = @_;
  my $wantid = $mail;
  
  my $count = 0;
  my $host  = $ENV{'HOSTNAME'} || $ENV{'HOST'} || `hostname` || 'localhost';

  while (!eof MBOX) {
    my @msg = ();
    my $msgid = undef;
    my $in_header = 1;
    $count++;

    while (<MBOX>) {
      if (/^$/ && $in_header) {
        $in_header = 0 ;

        if (!defined ($msgid)) {
          $msgid = sprintf('<no-msgid-in-msg-%06d@%s.masses.spamassasin.org>', $count, $host);
          push (@msg, "Message-Id: $msgid\n");
        }
      }
      if ($in_header) {
        /^Message-Id: (.*)\s*$/i and $msgid = $1;
      }

      /^From \S+ +... ... / and last;
      push (@msg, $_);
    }

    $msgid = "$folder:$msgid";	# so we can find it again
    $msgid =~ s/\s/_/gs;	# make safe

    # print "JMD $wantid $msgid\n";

    if ($wantid ne $msgid) { next; }
    return \@msg;
  }

  close MBOX; $CURRENT_MBOX_OPEN = undef;
}

###########################################################################

sub handle {
  my $msgp = shift;
  print STDOUT "From nobody\@nowhere  Wed Aug 21 12:41:07 2002\n", @$msgp, "\n";
}

sub mywarn {
  warn @_;
  if ($annotate) { print "X-Mass-Check-Warning: ".join ('',@_)."\n"; }
}
