# SpamAssassin rules file: CVS rules under test, $Revision: 1.569 $
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the Artistic License or the GNU General
# Public License as published by the Free Software Foundation; either
# version 1 of the License, or (at your option) any later version.
#
# See the file "License" in the top level of the SpamAssassin source
# distribution for more details.
#
###########################################################################

# quinlan: I worked at a company that used CorporateTime which very annoyingly
# always used an ISO-8859-1 encoded header even when the Subject: did not have
# a non-ASCII character.  I think other false positives are likely due to
# similarly broken software.
# jm: I notice that all my FPs are gw'd thru IMS; let's try that.
header __SUBJ_BASE64			Subject:raw =~ /=\?[^\?]+\?B\?/
header __SUBJ_QP			Subject:raw =~ /=\?[^\?]+\?Q\?/
header __SUBJ_HAS_NON_ASCII		Subject =~ /[\x00-\x06\x0e-\x1f\x80-\xff]/
header __RCVD_IMS			Received =~ /Internet\s+Mail\s+Service/
meta T_UNNECESSARY_SUBJ_B64_ENCODING	(__SUBJ_BASE64 && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
meta T_UNNECESSARY_SUBJ_QP_ENCODING	(__SUBJ_QP && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
describe T_UNNECESSARY_SUBJ_B64_ENCODING Subject encoded to hide from filters (B64)
describe T_UNNECESSARY_SUBJ_QP_ENCODING Subject encoded to hide from filters (QP)

# A new spamware creates invalid Date stamps, using printf ("%d:%d:%d").
# Catch it here (assuming one of the above doesn't catch it anyway).
# NOTE: __XM_BAD_DATE_MUAS is used below
header __DATE_TIME_INVALID	Date =~ /\s(?!\d\d:\d\d:\d\d)\d{1,2}:\d{1,2}:\d{1,2}\s/
header __XM_BAD_DATE_MUAS	X-Mailer =~ /(?:FoxMail|EMUmail|TFS Secure Messaging|sendEmail|EarthLink MailBox \d\.\d)/i
meta T_INVALID_DATE_HMS		(__DATE_TIME_INVALID && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_HMS	Date header does not use valid HH:MM:SS formatting

# possible replacement for INVALID_DATE.
# NOTE: uses __XM_BAD_DATE_MUAS from above
# rfc822:                       date-time =          [ day-of-week "," ]         (day / obs-day)                 month                           (year / obs-year)   hour ":" minute [ ":" second ]       (zone / obs-zone)          [ comment ]
header __INVALID_DATE		Date !~ /^\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), )?[0-3 ]?[0-9] (?:Jan|Feb|Ma[ry]|Apr|Ju[nl]|Aug|Sep|Oct|Nov|Dec) (?:19|20)?[0-9]{2} [0-2][0-9](?:\:[0-5][0-9]){1,2} (?:[+-][0-9]{4}|UT|[A-Z]{2,3}T)(?:\s+\(.*\))?\s*$/ [if-unset: Mon, 24 Feb 2003 09:30 +0100 (mss)]
meta T_INVALID_DATE_2		(__INVALID_DATE && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_2	Invalid Date: header (not RFC 2822)

# 2003-02-25: quinlan
# Whee... more HTML tests!
# Note: these use __MIME_HTML, we might need to exempt MIME attachments from
# that rule
# Apr 22 2003 jm: removed __TAG_EXISTS_DIV from OUTLOOK, as 'MS Exchange
# Server version 6.0.4630.0' does not insert that, causing FPs
# my FPs for this should hopefully be fixed now
# ... place with brother rule in 20_ratware.cf
header __ANY_QUALCOMM_MUA	X-Mailer =~ /^QUALCOMM\b/
meta T_FORGED_QUALCOMM_TAGS	(__ANY_QUALCOMM_MUA && __MIME_HTML && !__TAG_EXISTS_HTML)

uri      T_HTTP_EXCESSIVE_ENTITIES m{^https?://\S*\&\#(?:0?3[0-9]|0?[46][1-9a-f]|0?[57][\da])}i
describe T_HTTP_EXCESSIVE_ENTITIES Completely unnecessary %-escapes inside a URL

###########################################################################

header T_RATWARE_RCVD_BONUS_SPC	Received =~ /\) by  [a-zA-Z0-9]/
describe T_RATWARE_RCVD_BONUS_SPC Received headers forged (extra spaces)

# 2003-02-23: quinlan
# Message-Id: format tests
# 13 hexadecimal digits instead of 12
header T_MSGID_OUTLOOK_HEX	Message-Id =~ /<[a-f0-9]{13}\$[a-f0-9]{8}\$[a-f0-9]{8}\@/
# this one high correlation with ratware "EMWAC SMTPRS"
header T_MSGID_B_DIGITS		Message-Id =~ /<B\d{10}\@/

# NOTE: uses __ANY_OUTLOOK_MUA.  This catches Send-Safe and a few others
header __OL_STYLE_FROM		From =~ /\".*\" <.+>/
header __VIA_FROM_MANGLER	Received =~ /iPlanet/
meta T_FORGED_MUA_OUTLOOK_FROM	(__ANY_OUTLOOK_MUA && !__OL_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_OUTLOOK_FROM Forged mail pretending to be from Outlook (by From)

# NOTE: uses __ANY_IMS_MUA from above, __CTYPE_HAS_BOUNDARY from 20_ratware.cf
header __IMS_BOUNDARY		Content-Type =~ /\n\s+boundary=\"----_=_NextPart_[\dA-F]+_[\dA-F]+.[\dA-F]+\"/s
meta T_FORGED_IMS_CTYPE		(__ANY_IMS_MUA && __CTYPE_HAS_BOUNDARY && !__IMS_BOUNDARY)
describe T_FORGED_IMS_CTYPE	Forged mail pretending to be from IMS (boundary)

# NOTE: uses __ANY_QUALCOMM_MUA, __VIA_FROM_MANGLER from above
header __EUD_STYLE_FROM		From =~ /^(?:[^\"][^']+[^\"]|\".*\'.*\") <[^>]+>$/
meta T_FORGED_MUA_EUDORA_FROM	(__ANY_QUALCOMM_MUA && !__EUD_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_EUDORA_FROM Forged mail pretending to be from Eudora (by From)

# mixed list, still need to check for cost, policies, etc.
header T_RCVD_IN_DNSRBLSPAM	rbleval:check_rbl('dnsrblspam', 'spam.dnsrbl.net.')
header T_RCVD_IN_INTERSIL	rbleval:check_rbl('intersil', 'blackholes.intersil.net.')
header T_RCVD_IN_SPAMSOURCES_FABEL	rbleval:check_rbl('fabel', 'spamsources.fabel.dk.')
header T_RCVD_IN_VOX_SCHPIDER_COM	rbleval:check_rbl('schpider', 'vox.schpider.com.')
tflags T_RCVD_IN_DNSRBLSPAM net
tflags T_RCVD_IN_INTERSIL net
tflags T_RCVD_IN_SPAMSOURCES_FABEL net
tflags T_RCVD_IN_VOX_SCHPIDER_COM net

# easynet.nl (formerly wirehub.net)
header T_RCVD_IN_EASYNET_DYNABLOCK	rbleval:check_rbl('dynablock-notfirsthop', 'dynablock.easynet.nl.')
tflags T_RCVD_IN_EASYNET_DYNABLOCK net
header T_RCVD_IN_EASYNET_BLACKHOLES	rbleval:check_rbl('easynet', 'blackholes.easynet.nl.')
tflags T_RCVD_IN_EASYNET_BLACKHOLES net

# NJABL sub-tests
header T_RCVD_IN_NJABL_SPAM_SRC	rbleval:check_rbl_sub('njabl', '127.0.0.4')
describe T_RCVD_IN_NJABL_SPAM_SRC	DNSBL: sender is confirmed spam source
tflags T_RCVD_IN_NJABL_SPAM_SRC	net
header T_RCVD_IN_NJABL_MULTI_STAGE	rbleval:check_rbl_sub('njabl', '127.0.0.5')
describe T_RCVD_IN_NJABL_MULTI_STAGE	DNSBL: sent through multi-stage open relay
tflags T_RCVD_IN_NJABL_MULTI_STAGE	net 
header T_RCVD_IN_NJABL_CGI	rbleval:check_rbl_sub('njabl', '127.0.0.8')
describe T_RCVD_IN_NJABL_CGI	DNSBL: sender is an open formmail
tflags T_RCVD_IN_NJABL_CGI	net
header T_RCVD_IN_NJABL_PROXY	rbleval:check_rbl_sub('njabl', '127.0.0.9')
describe T_RCVD_IN_NJABL_PROXY	DNSBL: sender is an open proxy
tflags T_RCVD_IN_NJABL_PROXY	net

# OPM sub-tests
# transfers: axfr/ixfr for trusted sites
# url: http://opm.blitzed.org/
# pay-to-use: no
# delist: automatic expiry, no fee, retested on request (free)
header T_RCVD_IN_OPM_WINGATE		rbleval:check_rbl_sub('opm', '1')
tflags T_RCVD_IN_OPM_WINGATE net
header T_RCVD_IN_OPM_SOCKS		rbleval:check_rbl_sub('opm', '2')
tflags T_RCVD_IN_OPM_SOCKS net
header T_RCVD_IN_OPM_HTTP_CONNECT	rbleval:check_rbl_sub('opm', '4')
tflags T_RCVD_IN_OPM_HTTP_CONNECT net
header T_RCVD_IN_OPM_ROUTER		rbleval:check_rbl_sub('opm', '8')
tflags T_RCVD_IN_OPM_ROUTER net
header T_RCVD_IN_OPM_HTTP_POST		rbleval:check_rbl_sub('opm', '16')
tflags T_RCVD_IN_OPM_HTTP_POST net

# fiveten - many blacklists, the bulk one performs well
# transfers: yes, most of the slave servers allow zone transfers
# url: http://blackholes.five-ten-sg.com/
# pay-to-use: no
# delist: email address contact provided
header T_RCVD_IN_FIVETEN	rbleval:check_rbl('fiveten', 'blackholes.five-ten-sg.com.')
tflags T_RCVD_IN_FIVETEN net
# bulk mailers that don't require confirmed opt-in from their customers,
# or that have have allowed known spammers to become clients.
header T_RCVD_IN_FIVETEN_BULK	rbleval:check_rbl_sub('fiveten', '127.0.0.4')
tflags T_RCVD_IN_FIVETEN_BULK net
# retest all of the rest (since check_rbl_sub wasn't used before)
header T_RCVD_IN_FIVETEN_SPAM	rbleval:check_rbl_sub('fiveten', '127.0.0.2')
tflags T_RCVD_IN_FIVETEN_SPAM net
header T_RCVD_IN_FIVETEN_DIALUP	rbleval:check_rbl('fiveten-notfirsthop', 'blackholes.five-ten-sg.com.', '127.0.0.3')
tflags T_RCVD_IN_FIVETEN_DIALUP net
header T_RCVD_IN_FIVETEN_MULTISTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.5')
tflags T_RCVD_IN_FIVETEN_MULTISTAGE net
header T_RCVD_IN_FIVETEN_SINGLESTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.6')
tflags T_RCVD_IN_FIVETEN_SINGLESTAGE net
header T_RCVD_IN_FIVETEN_SPAMSUPPORT	rbleval:check_rbl_sub('fiveten', '127.0.0.7')
tflags T_RCVD_IN_FIVETEN_SPAMSUPPORT net
header T_RCVD_IN_FIVETEN_WEBFORM	rbleval:check_rbl_sub('fiveten', '127.0.0.8')
tflags T_RCVD_IN_FIVETEN_WEBFORM net
header T_RCVD_IN_FIVETEN_MISC	rbleval:check_rbl_sub('fiveten', '127.0.0.9')
tflags T_RCVD_IN_FIVETEN_MISC net
header T_RCVD_IN_FIVETEN_KLEZ	rbleval:check_rbl_sub('fiveten', '127.0.0.10')
tflags T_RCVD_IN_FIVETEN_KLEZ net
header T_RCVD_IN_FIVETEN_TCPA	rbleval:check_rbl_sub('fiveten', '127.0.0.11')
tflags T_RCVD_IN_FIVETEN_TCPA net
header T_RCVD_IN_FIVETEN_FREE	rbleval:check_rbl_sub('fiveten', '127.0.0.12')
tflags T_RCVD_IN_FIVETEN_FREE net

# some additional osirusoft tests, needs more work
# all osirusoft tests maybe a bad idea, osirusoft web site seems defunct
header T_RCVD_IN_OSIRU_OPT_IN		rbleval:check_rbl_sub('osirusoft', '127.0.0.7')
header T_RCVD_IN_OSIRU_OPEN_PROXY	rbleval:check_rbl_sub('osirusoft', '127.0.0.9')
tflags T_RCVD_IN_OSIRU_OPT_IN net
tflags T_RCVD_IN_OSIRU_OPEN_PROXY net

# SORBS
# transfers: both axfr and ixfr available
# url: http://www.dnsbl.sorbs.net/
# pay-to-use: no
# delist: $50 fee for T_RCVD_IN_SORBS_SPAM, others are retested on request (free)
header T_RCVD_IN_SORBS	rbleval:check_rbl('sorbs', 'dnsbl.sorbs.net.')
tflags T_RCVD_IN_SORBS net
header T_RCVD_IN_SORBS_HTTP	rbleval:check_rbl_sub('sorbs', '127.0.0.2')
tflags T_RCVD_IN_SORBS_HTTP net
header T_RCVD_IN_SORBS_MISC	rbleval:check_rbl_sub('sorbs', '127.0.0.3')
tflags T_RCVD_IN_SORBS_MISC net
header T_RCVD_IN_SORBS_SMTP	rbleval:check_rbl_sub('sorbs', '127.0.0.4')
tflags T_RCVD_IN_SORBS_SMTP net
header T_RCVD_IN_SORBS_SOCKS	rbleval:check_rbl_sub('sorbs', '127.0.0.5')
tflags T_RCVD_IN_SORBS_SOCKS net
header T_RCVD_IN_SORBS_SPAM	rbleval:check_rbl_sub('sorbs', '127.0.0.6')
tflags T_RCVD_IN_SORBS_SPAM net
header T_RCVD_IN_SORBS_WEB	rbleval:check_rbl_sub('sorbs', '127.0.0.7')
tflags T_RCVD_IN_SORBS_WEB net
header T_RCVD_IN_SORBS_BLOCK	rbleval:check_rbl_sub('sorbs', '127.0.0.8')
tflags T_RCVD_IN_SORBS_BLOCK net
header T_RCVD_IN_SORBS_ZOMBIE	rbleval:check_rbl_sub('sorbs', '127.0.0.9')
tflags T_RCVD_IN_SORBS_ZOMBIE net

# some dial-up lists that seem decent, worth testing some more
header T_RCVD_IN_DUL_BOFH rbleval:check_rbl('pdl-notfirsthop', 'pdl.bofh.it.')
header T_RCVD_IN_DUN_DNSRBL rbleval:check_rbl('dun-notfirsthop', 'dun.dnsrbl.net.')
header T_RCVD_IN_DUL_AUPADS rbleval:check_rbl('duinv-notfirsthop', 'duinv.aupads.org.')
tflags T_RCVD_IN_DUL_BOFH net
tflags T_RCVD_IN_DUN_DNSRBL net
tflags T_RCVD_IN_DUL_AUPADS net

# bug 1017: domain-based blacklists, experimental
# dsn.rfc-ignorant.org
header T_DNS_FROM_RFCI_DSN	rbleval:check_rbl_from_host('rfci-dsn', 'dsn.rfc-ignorant.org.')
tflags T_DNS_FROM_RFCI_DSN net

# bug 1733: SenderBase
# sa.senderbase.org for SpamAssassin queries
# test.senderbase.org for everything else (until SenderBase is in production)
header __SENDERBASE rbleval:check_rbl_txt('senderbase', 'sa.senderbase.org.')
tflags __SENDERBASE net

# SenderBase test rule, should have same results as RCVD_IN_BONDEDSENDER
header T_RCVD_IN_BONDEDSENDER rbleval:check_rbl_sub('senderbase', 'defined(S45) && S45 eq "Y"')
tflags T_RCVD_IN_BONDEDSENDER net

# OK, a whole batch of faked-HELO detection rules.  These work by checking
# for hosts HELOing in a certain domain, but without rDNS matching that.
# these are the most frequently-impersonated headers in my recent corpora...
#
# NOTE: these cannot simply be inverted for a "nice" rule; to do this would
# require checking only the last untrusted line, rather than all of them.
#
header T_FAKE_HELO_YAHOO	eval:check_for_rdns_helo_mismatch("yahoo\.com","yahoo\.com")
header T_FAKE_HELO_NETSCAPE_COM	eval:check_for_rdns_helo_mismatch("(?:netscape|netcenter|aol)\.(?:com|net)","netscape\.com")

# hmm, interesting.   Ensure the MUA is using consistent priorities.
# http://www3.cds.ne.jp/~marimo/oka/research/em/data0002.html
# tvd, 2003.05.25 - HI works well for me, MD isn't good, and LO hits 0.
header __X_PRI_HI		X-Priority =~ /^[12]/
header __X_PRI_MD		X-Priority =~ /^3/
header __X_PRI_LO		X-Priority =~ /^[456789]/
header __X_MSPRI_HI		X-Msmail-Priority =~ /^High/
header __X_MSPRI_MD		X-Msmail-Priority =~ /^Normal/
header __X_MSPRI_LO		X-Msmail-Priority =~ /^Low/
meta T_X_PRI_MISMATCH_HI	(__X_PRI_HI && __HAS_MSMAIL_PRI && !__X_MSPRI_HI)
meta T_X_PRI_MISMATCH_MD	(__X_PRI_MD && __HAS_MSMAIL_PRI && !__X_MSPRI_MD)
meta T_X_PRI_MISMATCH_LO	(__X_PRI_LO && __HAS_MSMAIL_PRI && !__X_MSPRI_LO)

# Justin says Yahoo stopped using this hostname entirely (which makes me
# wonder if spammers will still use it and whether it will work on our
# older corpus mail)
uri T_YAHOO_REDIRECTOR		/^https?:\/\/rd\.yahoo\.com/i
describe T_YAHOO_REDIRECTOR	Uses commonly-spammed redirector URL

uri T_BIZ_LINKS			/(?:^https?\:\/\/|^mailto\:).{0,20}\.bi?z/i
describe T_BIZ_LINKS		Links to .biz .bz

uri T_STRANGE_CHAR_LINKS		/^https?\:\/\/.{0,20}(?:[%@]|=2E)/i
describe T_STRANGE_CHAR_LINKS	Links with strange characters

######

# 2, 3, 4, and 6 actually look semi-ok, but these really need to be split into multiple rules.
# I actually don't like these rules since once we start looking for them, the spammers will just change
# domains, but ...
# tvd - 06/01
uri T_BANNED_LINKS1_01	m@(?:^https?://|^mailto:).{0,20}needanewjob@i
uri T_BANNED_LINKS1_02	m@(?:^https?://|^mailto:).{0,20}valodata@i
uri T_BANNED_LINKS1_03	m@(?:^https?://|^mailto:).{0,20}jutan@i
uri T_BANNED_LINKS1_04	m@(?:^https?://|^mailto:).{0,20}bridgewater@i
uri T_BANNED_LINKS1_05	m@(?:^https?://|^mailto:).{0,20}youngblue@i
uri T_BANNED_LINKS1_06	m@(?:^https?://|^mailto:).{0,20}rocketfibre@i
uri T_BANNED_LINKS1_07	m@(?:^https?://|^mailto:).{0,20}shopnow@i
uri T_BANNED_LINKS1_08	m@(?:^https?://|^mailto:).{0,20}affistats@i
uri T_BANNED_LINKS1_09	m@(?:^https?://|^mailto:).{0,20}priceisright@i
uri T_BANNED_LINKS1_10	m@(?:^https?://|^mailto:).{0,20}compare-lender@i

uri T_BANNED_LINKS2_01	m@(?:^https?://|^mailto:).{0,20}ientry@i
uri T_BANNED_LINKS2_02	m@(?:^https?://|^mailto:).{0,20}mybill@i
uri T_BANNED_LINKS2_03	m@(?:^https?://|^mailto:).{0,20}dyfyi@i
uri T_BANNED_LINKS2_04	m@(?:^https?://|^mailto:).{0,20}farmsex@i
uri T_BANNED_LINKS2_05	m@(?:^https?://|^mailto:).{0,20}affinitycommerce@i
uri T_BANNED_LINKS2_06	m@(?:^https?://|^mailto:).{0,20}unsecured-credit@i
uri T_BANNED_LINKS2_07	m@(?:^https?://|^mailto:).{0,20}e-centives@i
uri T_BANNED_LINKS2_08	m@(?:^https?://|^mailto:).{0,20}fyi01@i
uri T_BANNED_LINKS2_09	m@(?:^https?://|^mailto:).{0,20}clicktrack@i
uri T_BANNED_LINKS2_10	m@(?:^https?://|^mailto:).{0,20}emailads@i
uri T_BANNED_LINKS2_11	m@(?:^https?://|^mailto:).{0,20}zizi@i
uri T_BANNED_LINKS2_12	m@(?:^https?://|^mailto:).{0,20}vistaprint@i

uri T_BANNED_LINKS3_01	m@(?:^https?://|^mailto:).{0,20}radarline@i
uri T_BANNED_LINKS3_02	m@(?:^https?://|^mailto:).{0,20}optilc@i
uri T_BANNED_LINKS3_03	m@(?:^https?://|^mailto:).{0,20}biosweep@i
uri T_BANNED_LINKS3_04	m@(?:^https?://|^mailto:).{0,20}dealnetwork@i
uri T_BANNED_LINKS3_05	m@(?:^https?://|^mailto:).{0,20}myobmail@i
uri T_BANNED_LINKS3_06	m@(?:^https?://|^mailto:).{0,20}yourvling@i
uri T_BANNED_LINKS3_07	m@(?:^https?://|^mailto:).{0,20}xeemo@i
uri T_BANNED_LINKS3_08	m@(?:^https?://|^mailto:).{0,20}incestuals@i
uri T_BANNED_LINKS3_09	m@(?:^https?://|^mailto:).{0,20}mnjmtech@i
uri T_BANNED_LINKS3_10	m@(?:^https?://|^mailto:).{0,20}escript@i
uri T_BANNED_LINKS3_11	m@(?:^https?://|^mailto:).{0,20}m0rtage@i

uri T_BANNED_LINKS4_01	m@(?:^https?://|^mailto:).{0,20}ltracker@i
uri T_BANNED_LINKS4_02	m@(?:^https?://|^mailto:).{0,20}premiumsmail@i
uri T_BANNED_LINKS4_03	m@(?:^https?://|^mailto:).{0,20}rxmedical@i
uri T_BANNED_LINKS4_04	m@(?:^https?://|^mailto:).{0,20}bannedcd@i
uri T_BANNED_LINKS4_05	m@(?:^https?://|^mailto:).{0,20}raveonmail@i
uri T_BANNED_LINKS4_06	m@(?:^https?://|^mailto:).{0,20}postdirect@i
uri T_BANNED_LINKS4_07	m@(?:^https?://|^mailto:).{0,20}5moni@i
uri T_BANNED_LINKS4_08	m@(?:^https?://|^mailto:).{0,20}gammae@i
uri T_BANNED_LINKS4_09	m@(?:^https?://|^mailto:).{0,20}freeht@i
uri T_BANNED_LINKS4_10	m@(?:^https?://|^mailto:).{0,20}ns-hosting@i
uri T_BANNED_LINKS4_11	m@(?:^https?://|^mailto:).{0,20}domainsforeveryone@i

uri T_BANNED_LINKS5_01	m@(?:^https?://|^mailto:).{0,20}freedigitalppv@i
uri T_BANNED_LINKS5_02	m@(?:^https?://|^mailto:).{0,20}fastbustzone@i
uri T_BANNED_LINKS5_03	m@(?:^https?://|^mailto:).{0,20}dailycomnet@i
uri T_BANNED_LINKS5_04	m@(?:^https?://|^mailto:).{0,20}zoanmail@i
uri T_BANNED_LINKS5_05	m@(?:^https?://|^mailto:).{0,20}ew01@i
uri T_BANNED_LINKS5_06	m@(?:^https?://|^mailto:).{0,20}executive-level@i
uri T_BANNED_LINKS5_07	m@(?:^https?://|^mailto:).{0,20}cyberforce@i
uri T_BANNED_LINKS5_08	m@(?:^https?://|^mailto:).{0,20}adserver@i
uri T_BANNED_LINKS5_09	m@(?:^https?://|^mailto:).{0,20}flipside.com@i
uri T_BANNED_LINKS5_10	m@(?:^https?://|^mailto:).{0,20}faqchat@i

uri T_BANNED_LINKS6_01	m@(?:^https?://|^mailto:).{0,20}dforyi@i
uri T_BANNED_LINKS6_02	m@(?:^https?://|^mailto:).{0,20}totemmail@i
uri T_BANNED_LINKS6_03	m@(?:^https?://|^mailto:).{0,20}addsaturation@i

uri T_SUSPICIOUS_LINKS_02	m@(?:^https?://|^mailto:).{0,25}poker\.net@i
uri T_SUSPICIOUS_LINKS_03	m@(?:^https?://|^mailto:).{0,25}get-deal@i
uri T_SUSPICIOUS_LINKS_04	m@(?:^https?://|^mailto:).{0,25}bargain[zs\-]@i
uri T_SUSPICIOUS_LINKS_05	m@(?:^https?://|^mailto:).{0,25}clicks@i
uri T_SUSPICIOUS_LINKS_06	m@(?:^https?://|^mailto:).{0,25}spree@i
uri T_SUSPICIOUS_LINKS_07	m@(?:^https?://|^mailto:).{0,25}members\=@i
uri T_SUSPICIOUS_LINKS_08	m@(?:^https?://|^mailto:).{0,25}lotto@i
uri T_SUSPICIOUS_LINKS_09	m@(?:^https?://|^mailto:).{0,25}offer[sz]@i
uri T_SUSPICIOUS_LINKS_10	m@(?:^https?://|^mailto:).{0,25}4you@i

######

rawbody T_HREF_3D			/(?:href|src)=3D\"/i
describe T_HREF_3D		Uses href=3D Trick

# bug 1876
rawbody		T_PUSHHERELINK		/<a[^>]*>[^<]*((push|go)\s(here|this) |cease.{1,10}mail)[^<]*<\/a>/i
describe	T_PUSHHERELINK		Link asks you to "push here" or "go here" or "cease mail" or the like

# bug 1734: replacement rules
# bwaaaah!
header T_FROM_OFFERS_01		From:addr =~ /\@\S*offers(?!en)/i
header T_FROM_OFFERS_02		From:addr =~ /\@\S*offers(?!en\b)/i
header T_FROM_OFFERS_03		From:addr =~ /\@\S*offers(?![eo]n)/i
header T_FROM_OFFERS_04		From:addr =~ /\@\S*offers(?![eo]n\b)/i
header T_FROM_OFFERS_05		From:addr =~ /\@\S*offers(?:\b|[^a-z])/i
header T_FROM_OFFERS_06		From:addr =~ /\@\S*offers(?:\b|[^a-z])/i
header T_FROM_OFFERS_07		From:addr =~ /\@\S*offers(?!en)(?:\b|.)/i
header T_FROM_OFFERS_08		From:addr =~ /\@\S*offers(?!en\b)(?:\b|.)/i
header T_FROM_OFFERS_09		From:addr =~ /\@\S*offers(?![eo]n)(?:\b|.)/i
header T_FROM_OFFERS_10		From:addr =~ /\@\S*offers(?![eo]n\b)(?:\b|.)/i

# bug 1634:
# needed to readd X_MAILING_LIST as dependency, modify T_MAC_EUDORA_MUA for new version
header __T_MAC_EUDORA_MUA         X-Mailer =~ /Eudora for (?:Macintosh|Mac OS X)/
header __PALM_EUDORA_MUA	X-Mailer =~ /^Eudora \d+.\d+ for PalmOS\b/
meta T_FORGED_MUA_EUDORA          (__EUDORA_MUA && !__EUDORA_MSGID && !__UNUSABLE_MSGID && !__HAS_X_LOOP && !__HAS_X_MAILING_LIST && !__T_MAC_EUDORA_MUA && !__PALM_EUDORA_MUA && !__OLD_EUDORA1 && !(__OLD_EUDORA2 && !__QUALCOMM))

# rule to compare against MIME_HTML_ONLY
# (note similar rule: MIME_HTML_ONLY_MULTI)
header __CTYPE_MULTIPART_MIXED	Content-Type =~ /multipart\/mixed/i
meta T_MIME_HTML_ONLY_MULTI_MIXED	(__CTYPE_MULTIPART_MIXED && __MIME_HTML_ONLY)
#
header __CTYPE_MULTIPART_OTHER	Content-Type =~ /multipart\/(?!mixed)(?!alternative)/i
meta T_MIME_HTML_ONLY_MULTI_OTHER	(__CTYPE_MULTIPART_OTHER && __MIME_HTML_ONLY)

# compare against SUBJ_FULL_OF_8BITS.  MSOE produces 8-bit subject lines
# (bug 1918)
header __MIMEOLE		X-MIMEOLE =~ /Produced By Microsoft MimeOLE/
meta T_SUBJ_FULL_OF_8BITS	(SUBJ_FULL_OF_8BITS && !__MIMEOLE)

######################################################################
# new 8BIT rules - brute force!

header T_SUBJ_ILLEGAL_00_02	eval:check_illegal_chars('Subject','0.00','2')
header T_SUBJ_ILLEGAL_01_02	eval:check_illegal_chars('Subject','0.01','2')
header T_SUBJ_ILLEGAL_02_02	eval:check_illegal_chars('Subject','0.02','2')
header T_SUBJ_ILLEGAL_03_02	eval:check_illegal_chars('Subject','0.03','2')
header T_SUBJ_ILLEGAL_04_02	eval:check_illegal_chars('Subject','0.04','2')
header T_SUBJ_ILLEGAL_05_02	eval:check_illegal_chars('Subject','0.05','2')

header T_FROM_ILLEGAL_10_02	eval:check_illegal_chars('From','0.10','2')
header T_FROM_ILLEGAL_11_02	eval:check_illegal_chars('From','0.11','2')
header T_FROM_ILLEGAL_12_02	eval:check_illegal_chars('From','0.12','2')
header T_FROM_ILLEGAL_13_02	eval:check_illegal_chars('From','0.13','2')
header T_FROM_ILLEGAL_14_02	eval:check_illegal_chars('From','0.14','2')
header T_FROM_ILLEGAL_15_02	eval:check_illegal_chars('From','0.15','2')
header T_FROM_ILLEGAL_16_02	eval:check_illegal_chars('From','0.16','2')
header T_FROM_ILLEGAL_17_02	eval:check_illegal_chars('From','0.17','2')
header T_FROM_ILLEGAL_18_02	eval:check_illegal_chars('From','0.18','2')
header T_FROM_ILLEGAL_19_02	eval:check_illegal_chars('From','0.19','2')
header T_FROM_ILLEGAL_20_02	eval:check_illegal_chars('From','0.20','2')
header T_FROM_ILLEGAL_21_02	eval:check_illegal_chars('From','0.21','2')
header T_FROM_ILLEGAL_22_02	eval:check_illegal_chars('From','0.22','2')
header T_FROM_ILLEGAL_23_02	eval:check_illegal_chars('From','0.23','2')
header T_FROM_ILLEGAL_24_02	eval:check_illegal_chars('From','0.24','2')
header T_FROM_ILLEGAL_25_02	eval:check_illegal_chars('From','0.25','2')

header T_HEAD_ILLEGAL_000_02	eval:check_illegal_chars('ALL','0.000','2')
header T_HEAD_ILLEGAL_001_02	eval:check_illegal_chars('ALL','0.001','2')
header T_HEAD_ILLEGAL_002_02	eval:check_illegal_chars('ALL','0.002','2')
header T_HEAD_ILLEGAL_003_02	eval:check_illegal_chars('ALL','0.003','2')
header T_HEAD_ILLEGAL_004_02	eval:check_illegal_chars('ALL','0.004','2')
header T_HEAD_ILLEGAL_005_02	eval:check_illegal_chars('ALL','0.005','2')
header T_HEAD_ILLEGAL_006_02	eval:check_illegal_chars('ALL','0.006','2')
header T_HEAD_ILLEGAL_007_02	eval:check_illegal_chars('ALL','0.007','2')
header T_HEAD_ILLEGAL_008_02	eval:check_illegal_chars('ALL','0.008','2')
header T_HEAD_ILLEGAL_009_02	eval:check_illegal_chars('ALL','0.009','2')
header T_HEAD_ILLEGAL_010_02	eval:check_illegal_chars('ALL','0.010','2')
header T_HEAD_ILLEGAL_011_02	eval:check_illegal_chars('ALL','0.011','2')
header T_HEAD_ILLEGAL_012_02	eval:check_illegal_chars('ALL','0.012','2')
header T_HEAD_ILLEGAL_013_02	eval:check_illegal_chars('ALL','0.013','2')
header T_HEAD_ILLEGAL_014_02	eval:check_illegal_chars('ALL','0.014','2')
header T_HEAD_ILLEGAL_015_02	eval:check_illegal_chars('ALL','0.015','2')
header T_HEAD_ILLEGAL_016_02	eval:check_illegal_chars('ALL','0.016','2')
header T_HEAD_ILLEGAL_017_02	eval:check_illegal_chars('ALL','0.017','2')
header T_HEAD_ILLEGAL_018_02	eval:check_illegal_chars('ALL','0.018','2')
header T_HEAD_ILLEGAL_019_02	eval:check_illegal_chars('ALL','0.019','2')
header T_HEAD_ILLEGAL_020_02	eval:check_illegal_chars('ALL','0.020','2')
header T_HEAD_ILLEGAL_021_02	eval:check_illegal_chars('ALL','0.021','2')
header T_HEAD_ILLEGAL_022_02	eval:check_illegal_chars('ALL','0.022','2')
header T_HEAD_ILLEGAL_023_02	eval:check_illegal_chars('ALL','0.023','2')
header T_HEAD_ILLEGAL_024_02	eval:check_illegal_chars('ALL','0.024','2')
header T_HEAD_ILLEGAL_025_02	eval:check_illegal_chars('ALL','0.025','2')
header T_HEAD_ILLEGAL_026_02	eval:check_illegal_chars('ALL','0.026','2')
header T_HEAD_ILLEGAL_027_02	eval:check_illegal_chars('ALL','0.027','2')
header T_HEAD_ILLEGAL_028_02	eval:check_illegal_chars('ALL','0.028','2')
header T_HEAD_ILLEGAL_029_02	eval:check_illegal_chars('ALL','0.029','2')

######################################################################

# bug 274
header T_FRIEND_AT_PUBLIC	To =~ /(?:yourdomain|you|your|(?<!re)public)\.(?:com|org|net)/i

# a new ratware-forgery format
header T_LC_ESMTP_RCVD    Received =~ /^from (?:unknown|\d+\.\d+\.\d+\.\d+) \(\S+\) by \S+ with esmtp; /
describe T_LC_ESMTP_RCVD  Received header contains forged lowercase 'esmtp' relay  

# bug 1426
# AOL users' From never includes a real name
# duncf

meta T_NO_REAL_NAME_2            (NO_REAL_NAME && !__AOL_MUA)
describe T_NO_REAL_NAME           From: does not include a real name

meta T_AOL_FAKE_NAME              (__AOL_MUA && ! NO_REAL_NAME)
describe T_AOL_FAKE_NAME          From: includes a real name, but AOL software can't do it

header __T_AOL_MAIL               From =~ /.*\@aol\.com/
meta T_AOL_FAKE_MAIL              (__AOL_MUA && !__T_AOL_MAIL)
describe T_AOL_FAKE_MAIL          From: does not show an aol.com address, but email send using AOL software

# tvd - US_DOLLARS and MILLION_USD overlap completely, remove the MILLION_USD part
body T_NA_DOLLARS		/\b(?:\d{1,3})?Million\b.{0,40}\b(?:Canadian Dollar?s?|US\$|U\.? ?S\.? Dollar)/i

# interesting!  looks like spammer misdirection.
header T_HAS_X_ORIG_EMAIL	X-Originating-Email =~ /\S/
describe T_HAS_X_ORIG_EMAIL	Has an 'X-Originating-Email' header
header T_HAS_X_ORIG_HOST	X-Originating-Host =~ /^\[/
describe T_HAS_X_ORIG_HOST	Has an 'X-Originating-Host' header
