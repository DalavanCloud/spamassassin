# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# See the file "License" in the top level of the SpamAssassin distribution
# for usage terms.
#
###########################################################################

# for activation after 2.50 release:

header T_MSGID_SPAMSIGN_99X9XX99	MESSAGEID =~ /^<\d\d\d\d\d\d[a-z]\d[a-z][a-z]\d\d\$[a-z][a-z][a-z]\d\d\d\d\d\$\d\d\d\d\d\d\d\d\@/
describe T_MSGID_SPAMSIGN_99X9XX99	Message-Id generated by spam tool (99x9xx99 variant)

header T_RCVD_6_CAPS_ESMTP_ID		Received =~ /^from \[\d+\.\d+\.\d+\.\d+\] by\s+\S+\s+with\s+ESMTP\s+id\s+[A-Z]{6};/
describe T_RCVD_6_CAPS_ESMTP_ID		Received header forged by spam tool (6-caps ESMTP ID variant)

header T_DATE_SPAMWARE_Y2K		Date =~ /^[A-Z][a-z]{2}, \d\d [A-Z][a-z]{2} [0-6]\d \d\d:\d\d:\d\d [A-Z]{3}$/
describe T_DATE_SPAMWARE_Y2K		Date header uses unusual Y2K formatting

header __SUBJ_BASE64			Subject:raw =~ /=\?[^\?]+\?B\?/
header __SUBJ_QP			Subject:raw =~ /=\?[^\?]+\?Q\?/
header __SUBJ_HAS_NON_ASCII		Subject =~ /[\x00-\x06\x0e-\x1f\x80-\xff]/
meta T_UNNECESSARY_SUBJ_B64_ENCODING	(__SUBJ_BASE64 && !__SUBJ_HAS_NON_ASCII)
meta T_UNNECESSARY_SUBJ_QP_ENCODING	(__SUBJ_QP && !__SUBJ_HAS_NON_ASCII)
describe T_UNNECESSARY_SUBJ_B64_ENCODING Subject encoded to hide from filters (B64)
describe T_UNNECESSARY_SUBJ_QP_ENCODING Subject encoded to hide from filters (QP)

# A new spamware creates invalid Date stamps, using printf ("%d:%d:%d").
# Catch it here (assuming one of the above doesn't catch it anyway).
header __POSS_INVALID_DATE_TIME	Date =~ / \d{1,2}:\d{1,2}:\d{1,2} /
header __DATE_TIME_VALID	Date =~ / \d\d:\d\d:\d\d /
header __XM_FOXMAIL		X-Mailer =~ /FoxMail/
header __XM_EARTHLINK		X-Mailer =~ /EarthLink MailBox \d\.\d/
meta T_INVALID_DATE_HMS	(__POSS_INVALID_DATE_TIME && !__DATE_TIME_VALID && !__XM_FOXMAIL && !__XM_EARTHLINK)
describe T_INVALID_DATE_HMS	Date header does not use valid HH:MM:SS formatting

# possible replacement for INVALID_DATE.
# rfc822:                       date-time =          [ day-of-week "," ]         (day / obs-day)                 month                           (year / obs-year)   hour ":" minute [ ":" second ]       (zone / obs-zone)          [ comment ]
header __INVALID_DATE		Date !~ /^\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), )?[0-3 ]?[0-9] (?:Jan|Feb|Ma[ry]|Apr|Ju[nl]|Aug|Sep|Oct|Nov|Dec) (?:19|20)?[0-9]{2} [0-2][0-9](?:\:[0-5][0-9]){1,2} (?:[+-][0-9]{4}|UT|[A-Z]{2,3}T)(?:\s+\(.*\))?\s*$/ [if-unset: Mon, 24 Feb 2003 09:30 +0100 (mss)]
header __XM_FOXMAIL		X-Mailer =~ /FoxMail/
header __XM_EARTHLINK		X-Mailer =~ /EarthLink MailBox \d\.\d/
meta T_INVALID_DATE_2		(__INVALID_DATE && !__XM_FOXMAIL && !__XM_EARTHLINK)
describe T_INVALID_DATE_2	Invalid Date: header (not RFC 2822)

# Wierd.  Can only assume this is caused by PEBKAC on the sending side...
meta T_SEZ_HTML_BUT_NOT	(MIME_HTML_ONLY && !HTML_MESSAGE)
describe T_SEZ_HTML_BUT_NOT	Claims to be HTML, but is actually plain text

# Jul  3 2002 jm: modified PENIS_ENLARGE patterns: removed "add", replaced with "inches",
# because that seems to be another typical word in the pattern.
# Feb 11 2003 jm: removed "PP" from pattern, since "pp. 234-237" is std usage
# in academic circles.  I don't think the hit-rate will be affected. ;)
# bug: http://www.hughes-family.org/bugzilla/show_bug.cgi?id=1471
body T_PENIS_ENLARGE		/\b(?:enlarge|increase|grow|lengthen|larger\b|bigger\b|longer\b|thicker\b|\binches\b).{0,50}\b(?:penis|male organ|pee[ -]?pee|dick|sc?hlong|wh?anger|breast)/i
describe T_PENIS_ENLARGE		Information on getting a larger penis or breasts
body T_PENIS_ENLARGE2		/\b(?:penis|male organ|pee[ -]?pee|dick|sc?hlong|wh?anger|breast).{0,50}\b(?:enlarge|increase|grow|lengthen|larger\b|bigger\b|longer\b|thicker\b|\binches\b)/i
describe T_PENIS_ENLARGE2		Information on getting a larger penis or breasts (2)

# Feb 18 2003 jm: another Nigerian scam
body T_NIGERIAN_SCAM_VIRTUE	/by virtue of its nature as being utterly confidential/i
describe T_NIGERIAN_SCAM_VIRTUE	Contains Nigerian scam text (virtue of its nature)

# Feb 18 2003 jm: try another combo.  I'm not sure __NIGERIAN_HONESTY is req'd.
body __NIGERIAN_CODE_CONDUCT		/\bcode of conduct\b/i
body __NIGERIAN_CIV_SERVICE		/\bcivil service\b/i
body __NIGERIAN_TOP_SECRET		/\btop secret\b/i
body __NIGERIAN_STRICT_CONF		/\b(?:strictest confidence|utmost secrecy)\b/i
body __NIGERIAN_HONESTY		/\btransparent honesty\b/i
body __NIGERIAN_DISBURSE		/\bdisburs/i
meta T_NIGERIAN_BODY_GOVT_6	((__NIGERIAN_CODE_CONDUCT + __NIGERIAN_CIV_SERVICE + __NIGERIAN_HONESTY + __NIGERIAN_TOP_SECRET + __NIGERIAN_STRICT_CONF + __NIGERIAN_DISBURSE) >= 6)
meta T_NIGERIAN_BODY_GOVT_5	((__NIGERIAN_CODE_CONDUCT + __NIGERIAN_CIV_SERVICE + __NIGERIAN_HONESTY + __NIGERIAN_TOP_SECRET + __NIGERIAN_STRICT_CONF + __NIGERIAN_DISBURSE) >= 5)
meta T_NIGERIAN_BODY_GOVT_4	((__NIGERIAN_CODE_CONDUCT + __NIGERIAN_CIV_SERVICE + __NIGERIAN_HONESTY + __NIGERIAN_TOP_SECRET + __NIGERIAN_STRICT_CONF + __NIGERIAN_DISBURSE) >= 4)
meta T_NIGERIAN_BODY_GOVT_3	((__NIGERIAN_CODE_CONDUCT + __NIGERIAN_CIV_SERVICE + __NIGERIAN_HONESTY + __NIGERIAN_TOP_SECRET + __NIGERIAN_STRICT_CONF + __NIGERIAN_DISBURSE) >= 3)

# 2003-02-23: quinlan
# bug 1376: HTML mails without <!DOCTYPE>
# 1. ways to find <!doctype> declaration
rawbody __HTML_DOCTYPE		/<\!doctype/i
body __HTML_TAG_EXISTS_DOCTYPE	eval:html_tag_exists('!doctype')
# 2. mailers that reliably use <!doctype> declaration
header __HTML_DOCTYPE_MUA	X-Mailer =~ /\b(?:Internet Mail Service|Microsoft Outlook (?:Express|CWS|IMO))\b/
# 3. ways to detect HTML
# HTML_MESSAGE
header __HTML_CTYPE_HEADER	Content-Type =~ /text\/html/i
rawbody __HTML_CTYPE_BODY	/^Content-Type:\s*text\/html/i
meta __HTML_CTYPE		(__HTML_CTYPE_HEADER || __HTML_CTYPE_BODY)
body __MIME_HTML		eval:check_for_mime_html()
# 4. test variations
meta T_HTML_NO_DOCTYPE_01	(MIME_HTML_ONLY && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_02	(MIME_HTML_ONLY && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)
meta T_HTML_NO_DOCTYPE_03	(MIME_HTML_ONLY && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_04	(MIME_HTML_ONLY && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)
meta T_HTML_NO_DOCTYPE_05	(__HTML_CTYPE && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_06	(__HTML_CTYPE && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_07	(__HTML_CTYPE_HEADER && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_08	(__HTML_CTYPE_HEADER && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)
meta T_HTML_NO_DOCTYPE_09	(__HTML_CTYPE_HEADER && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_10	(__HTML_CTYPE_HEADER && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)
meta T_HTML_NO_DOCTYPE_11	(__MIME_HTML && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_12	(__MIME_HTML && __HTML_DOCTYPE_MUA && !__HTML_DOCTYPE)
meta T_HTML_NO_DOCTYPE_13	(__MIME_HTML && HTML_MESSAGE && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)
meta T_HTML_NO_DOCTYPE_14	(__MIME_HTML && __HTML_DOCTYPE_MUA && !__HTML_TAG_EXISTS_DOCTYPE)

# 2003-02-23: quinlan
# bug 1533: new Received: header forgery tests using HELO
header T_FORGED_RCVD_HELO	eval:check_for_forged_received_helo()
header T_RCVD_NUMERIC_HELO	Received =~ /helo[= ]\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/i

# 2003-02-23: quinlan
# bug 1529: Example of MIME_HTML_ONLY avoidance trick
# testing ideas for misbalanced multipart/alternative parts
#body T_MULTIPART_TRICK_00_10	eval:check_for_mime_multipart_trick('.0','.1')
#body T_MULTIPART_TRICK_10_20	eval:check_for_mime_multipart_trick('.1','.2')
#body T_MULTIPART_TRICK_20_30	eval:check_for_mime_multipart_trick('.2','.3')
#body T_MULTIPART_TRICK_30_40	eval:check_for_mime_multipart_trick('.3','.4')
#body T_MULTIPART_TRICK_40_50	eval:check_for_mime_multipart_trick('.4','.5')
#body T_MULTIPART_TRICK_50_60	eval:check_for_mime_multipart_trick('.5','.6')
#body T_MULTIPART_TRICK_60_70	eval:check_for_mime_multipart_trick('.6','.7')
#body T_MULTIPART_TRICK_70_80	eval:check_for_mime_multipart_trick('.7','.8')
#body T_MULTIPART_TRICK_80_90	eval:check_for_mime_multipart_trick('.8','.9')
#body T_MULTIPART_TRICK_90_100	eval:check_for_mime_multipart_trick('.9','1.0')

# bug 1416, possible replacement for AS_SEEN_ON
body     T_AS_SEEN_ON             /seen on\b\s*(?:T\.?V\.?|ABC|NBC|CBS|CNN|Oprah|USA Today|48 Hours|New York Times|\w+\s+T\.?V\.?|:)/i

# bug 1380
meta T_FAKED_OUTLOOK		(__OUTLOOK_MUA && __MIME_HTML_ONLY)
#describe FAKED_OUTLOOK		Outlook can't send HTML message only
#lang fr describe FAKED_OUTLOOK	Outlook ne sait pas envoyer de mail en HTML pur sans texte brut.
meta T_FAKED_AOL		(__AOL_MUA && __MIME_HTML_ONLY)
meta T_FAKED_THEBAT		(__THEBAT_MUA && __MIME_HTML_ONLY)
meta T_FAKED_IMS		(__IMS_MUA && __MIME_HTML_ONLY)

# bug 1421, possible replacement for USERPASS
uri T_USERPASS                    m{https?://[^/\s]+?(?::[^/\s]+?)?\@}

# bug 1438, possible replacement for the current HOTMAIL_FOOTER* rules
# rename current HOTMAIL_FOOTER# to __HOTMAIL_FOOTER#, and change these too.
meta T_ABUSED_HOTMAIL_FOOTER	HOTMAIL_FOOTER1 + HOTMAIL_FOOTER2 + HOTMAIL_FOOTER3 + HOTMAIL_FOOTER4 + HOTMAIL_FOOTER5 > 1
meta T_HOTMAIL_FOOTER1		HOTMAIL_FOOTER1 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER2		HOTMAIL_FOOTER2 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER3		HOTMAIL_FOOTER3 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER4		HOTMAIL_FOOTER4 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER5		HOTMAIL_FOOTER5 && !T_ABUSED_HOTMAIL_FOOTER

# bug 1406, possible replacement for URI_IS_POUND
uri T_URI_IS_POUND               /^\#$/  
uri T_URI_ENDS_IN_POUND        /^[^?]+\#$/ 

# bug 1336
header T_TO_FILENAME           To =~ /^<C:\\/
#describe TO_FILENAME         "To" header contains a filename

# bug 1394, possible replacement for ORDER_NOW
body T_ORDER_NOW                  /\border (?:now|soon|fast|quickly|while|today)\b/i

# Matt Cline
# 0.206   0.2631   0.0000    1.000   0.89    0.01  T_OBFUSCATING_COMMENT2
rawbody  __OBFUSCATING_COMMENT2 /[^\s>]<![^-].{0,64}?[^-]>[^\s<]/
meta     T_OBFUSCATING_COMMENT2 __OBFUSCATING_COMMENT2 && MIME_HTML_ONLY
describe T_OBFUSCATING_COMMENT2 HTML comments which obfuscate text (2)

# Matt Cline
uri      T_HTTP_ENTITIES_HOST m{https?://[^\s\">/]*\&\#[\da-f]+}i
describe T_HTTP_ENTITIES_HOST URI obscured with character entities

uri      T_HTTP_EXCESSIVE_ENTITIES m{^https?://\S*\&\#(?:0?3[0-9]|0?[46][1-9a-f]|0?[57][\da])}i
describe T_HTTP_EXCESSIVE_ENTITIES Completely unnecessary %-escapes inside a URL

# bug 1561
# stronger version of USER_AGENT_APPLEMAIL
# Apple Mail doesn't send text/html at all (unless it's an attachment)
# It'll send text/plain, or multipart/alternative with text/plain and text/enriched parts (boundary of
# "Apple-Mail-\d--\d+").  It can, however, send a multipart/mixed with a single text/html attachment, so
# don't use MIME_HTML_ONLY.
# perhaps limit CTYPE to "text/plain", "multipart/alternative" with "text/plain" and "text/enhanced", or
# "multipart/mixed"?
header __X_MAILER_APPLEMAIL	X-Mailer	=~ /^Apple Mail \(\d\.\d+\)$/
header __MSGID_APPLEMAIL	Message-Id	=~ /^<[0-9A-F]{8}-(?:[0-9A-F]{4}-){3}[0-9A-F]{12}\@\S+>$/
header __MIME_VERSION_APPLEMAIL	Mime-Version	=~ /^1\.0 \(Apple Message framework v\d+\)$/
meta T_USER_AGENT_APPLEMAIL	!__HTML_CTYPE_HEADER && __X_MAILER_APPLEMAIL && ( __MSGID_APPLEMAIL || __MIME_VERSION_APPLEMAIL )
meta T_FORGED_MUA_APPLEMAIL	__X_MAILER_APPLEMAIL && !T_USER_AGENT_APPLEMAIL
