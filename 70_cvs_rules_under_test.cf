# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the Artistic License or the GNU General
# Public License as published by the Free Software Foundation; either
# version 1 of the License, or (at your option) any later version.
#
# See the file "License" in the top level of the SpamAssassin source
# distribution for more details.
#
###########################################################################

header T_DATE_SPAMWARE_Y2K		Date =~ /^[A-Z][a-z]{2}, \d\d [A-Z][a-z]{2} [0-6]\d \d\d:\d\d:\d\d [A-Z]{3}$/
describe T_DATE_SPAMWARE_Y2K		Date header uses unusual Y2K formatting

# quinlan: I worked at a company that used CorporateTime which very annoyingly
# always used an ISO-8859-1 encoded header even when the Subject: did not have
# a non-ASCII character.  I think other false positives are likely due to
# similarly broken software.
# jm: I notice that all my FPs are gw'd thru IMS; let's try that.
header __SUBJ_BASE64			Subject:raw =~ /=\?[^\?]+\?B\?/
header __SUBJ_QP			Subject:raw =~ /=\?[^\?]+\?Q\?/
header __SUBJ_HAS_NON_ASCII		Subject =~ /[\x00-\x06\x0e-\x1f\x80-\xff]/
header __RCVD_IMS			Received =~ /Internet\s+Mail\s+Service/
meta T_UNNECESSARY_SUBJ_B64_ENCODING	(__SUBJ_BASE64 && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
meta T_UNNECESSARY_SUBJ_QP_ENCODING	(__SUBJ_QP && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
describe T_UNNECESSARY_SUBJ_B64_ENCODING Subject encoded to hide from filters (B64)
describe T_UNNECESSARY_SUBJ_QP_ENCODING Subject encoded to hide from filters (QP)

# A new spamware creates invalid Date stamps, using printf ("%d:%d:%d").
# Catch it here (assuming one of the above doesn't catch it anyway).
header __DATE_TIME_INVALID	Date =~ /\s(?!\d\d:\d\d:\d\d)\d{1,2}:\d{1,2}:\d{1,2}\s/
header __XM_BAD_DATE_MUAS	X-Mailer =~ /(?:FoxMail|EMUmail|TFS Secure Messaging|sendEmail|EarthLink MailBox \d\.\d)/i
meta T_INVALID_DATE_HMS		(__DATE_TIME_INVALID && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_HMS	Date header does not use valid HH:MM:SS formatting

# possible replacement for INVALID_DATE.
# rfc822:                       date-time =          [ day-of-week "," ]         (day / obs-day)                 month                           (year / obs-year)   hour ":" minute [ ":" second ]       (zone / obs-zone)          [ comment ]
header __INVALID_DATE		Date !~ /^\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), )?[0-3 ]?[0-9] (?:Jan|Feb|Ma[ry]|Apr|Ju[nl]|Aug|Sep|Oct|Nov|Dec) (?:19|20)?[0-9]{2} [0-2][0-9](?:\:[0-5][0-9]){1,2} (?:[+-][0-9]{4}|UT|[A-Z]{2,3}T)(?:\s+\(.*\))?\s*$/ [if-unset: Mon, 24 Feb 2003 09:30 +0100 (mss)]
header __XM_BAD_DATE_MUAS	X-Mailer =~ /(?:FoxMail|EMUmail|TFS Secure Messaging|sendEmail|EarthLink MailBox \d\.\d)/i
header __XM_FOXMAIL		X-Mailer =~ /FoxMail/
meta T_INVALID_DATE_2		(__INVALID_DATE && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_2	Invalid Date: header (not RFC 2822)

# Wierd.  Can only assume this is caused by PEBKAC on the sending side...
meta T_HTML_WITHOUT_HTML_1	(MIME_HTML_ONLY && !HTML_MESSAGE)
describe T_HTML_WITHOUT_HTML_1	Claims to be HTML, but there is no HTML text
# uses __MIME_HTML test from below and eval in EvalTests.pm (at least for now)
meta T_HTML_WITHOUT_HTML_2	(__MIME_HTML && !HTML_MESSAGE)
describe T_HTML_WITHOUT_HTML_2	Claims to be HTML, but there is no HTML text

# Jul  3 2002 jm: modified PENIS_ENLARGE patterns: removed "add", replaced with "inches",
# because that seems to be another typical word in the pattern.
# Feb 11 2003 jm: removed "PP" from pattern, since "pp. 234-237" is std usage
# in academic circles.  I don't think the hit-rate will be affected. ;)
# bug: http://www.hughes-family.org/bugzilla/show_bug.cgi?id=1471
body T_PENIS_ENLARGE		/\b(?:enlarge|increase|grow|lengthen|larger\b|bigger\b|longer\b|thicker\b|\binches\b).{0,50}\b(?:penis|male organ|pee[ -]?pee|dick|sc?hlong|wh?anger|breast)/i
describe T_PENIS_ENLARGE		Information on getting a larger penis or breasts
body T_PENIS_ENLARGE2		/\b(?:penis|male organ|pee[ -]?pee|dick|sc?hlong|wh?anger|breast).{0,50}\b(?:enlarge|increase|grow|lengthen|larger\b|bigger\b|longer\b|thicker\b|\binches\b)/i
describe T_PENIS_ENLARGE2		Information on getting a larger penis or breasts (2)

# 2003-02-23: quinlan
# some useful meta rule sub-elements
body __MIME_HTML		eval:check_for_mime_html()
header __CTYPE_HTML		Content-Type =~ /text\/html/i

# 2003-02-23: quinlan
# bug 1376: HTML without <!DOCTYPE> from mailers that always use <!DOCTYPE>
#
# Note: some variations of this rule actually perform better, but they all
# overlap 96-100% with MIME_HTML_ONLY whereas this variation adds real value
# and has a high hit rate.
body __HTML_TAG_EXISTS_DOCTYPE	eval:html_tag_exists('!doctype')
meta T_MIME_HTML_NO_DOCTYPE	(__MIME_HTML && !__HTML_TAG_EXISTS_DOCTYPE)

# 2003-02-25: quinlan
# Whee... more HTML tests!
# Note: these use __MIME_HTML, we might need to exempt MIME attachments from
# that rule
# Apr 10 2003 jm: AOL and IMO are ready to promote I reckon
header __ANY_OUTLOOK_MUA	X-Mailer =~ /^Microsoft Outlook\b/
header __ANY_IMS_MUA		X-Mailer =~ /^Internet Mail Service\b/
header __ANY_AOL_MUA		X-Mailer =~ /^AOL\b/
header __ANY_QUALCOMM_MUA	X-Mailer =~ /^QUALCOMM\b/
body __TAG_EXISTS_BODY		eval:html_tag_exists('body')
body __TAG_EXISTS_DIV		eval:html_tag_exists('div')
body __TAG_EXISTS_HEAD		eval:html_tag_exists('head')
body __TAG_EXISTS_HTML		eval:html_tag_exists('html')
body __TAG_EXISTS_META		eval:html_tag_exists('meta')
meta T_HTML_FAKED_OUTLOOK	(__ANY_OUTLOOK_MUA && __MIME_HTML && !(__TAG_EXISTS_BODY && __TAG_EXISTS_DIV && __TAG_EXISTS_HEAD && __TAG_EXISTS_HTML && __TAG_EXISTS_META))
meta T_HTML_FAKED_IMS		(__ANY_IMS_MUA && __MIME_HTML && !(__TAG_EXISTS_BODY && __TAG_EXISTS_HEAD && __TAG_EXISTS_HTML && __TAG_EXISTS_META))
meta T_HTML_FAKED_AOL		(__ANY_AOL_MUA && __MIME_HTML && !__TAG_EXISTS_HTML)
meta T_HTML_FAKED_QUALCOMM	(__ANY_QUALCOMM_MUA && __MIME_HTML && !__TAG_EXISTS_HTML)

# MIME Content-Transfer-Encoding control rules
rawbody T_MIME_BASE64			eval:check_for_mime('t_mime_base64_count')
rawbody T_MIME_QP			eval:check_for_mime('t_mime_qp_count')

# 2003-03-06: quinlan
rawbody T_MIME_BASE64_BLANKS		eval:check_for_mime('t_mime_base64_blanks')
rawbody T_MIME_BASE64_ILLEGAL		eval:check_for_mime('t_mime_base64_illegal')
rawbody T_MIME_BASE64_WITHOUT_NAME	eval:check_for_mime('t_mime_base64_without_name')
rawbody T_MIME_QP_INLINE_NO_CHARSET	eval:check_for_mime('t_mime_qp_inline_no_charset')

# 2003-03-02: quinlan
header T_NO_DNS_FOR_RECIPS_ONE		eval:check_for_recips_dns('1','2')
header T_NO_DNS_FOR_RECIPS_TWO		eval:check_for_recips_dns('2','3')
header T_NO_DNS_FOR_RECIPS_MANY		eval:check_for_recips_dns('3','undef')
tflags T_NO_DNS_FOR_RECIPS_ONE		net
tflags T_NO_DNS_FOR_RECIPS_TWO		net
tflags T_NO_DNS_FOR_RECIPS_MANY		net

# bug 1416, possible replacement for AS_SEEN_ON
body     T_AS_SEEN_ON             /seen on\b\s*(?:T\.?V\.?|ABC|NBC|CBS|CNN|Oprah|USA Today|48 Hours|New York Times|\w+\s+T\.?V\.?|:)/i

# bug 1380
meta T_FAKED_THEBAT		(__THEBAT_MUA && __MIME_HTML_ONLY)

# quinlan: 2003-03-15
# these all appear in the same low-scoring spammer for me, but they
# might differ for others so I'm trying some different URLs, check
# overlap in others' results before committing anything
#
# quinlan: 2003-03-28: does ANYONE other than me have any hits for these?
#
# Apr  1 2003 jm: constantcontact is a spamtool, also used in legit mailouts
# by a Java company :(
#
header T_EXECUTIVECALIBER		ALL =~ /\bexecutivecaliber\.ws\b/i
header T_CONSTANTCONTACT		ALL =~ /\bconstantcontact\.com\b/i
header T_ROVING_COM			ALL =~ /\broving\.com\b/i
uri T_EXECUTIVECALIBER_URL		/\bexecutivecaliber\.ws\b/i
uri T_CONSTANTCONTACT_URL		/\bconstantcontact\.com\b/i
uri T_CCPROD_ROVING_COM_URL		/\bccprod\.roving\.com\b/i
uri T_ROVING_COM_URL			/\broving\.com\b/i
uri T_RS6_NET_URL			/\brs6\.net\b/i

# bug 1438, possible replacement for the current HOTMAIL_FOOTER* rules
# rename current HOTMAIL_FOOTER# to __HOTMAIL_FOOTER#, and change these too.
meta T_ABUSED_HOTMAIL_FOOTER	HOTMAIL_FOOTER1 + HOTMAIL_FOOTER2 + HOTMAIL_FOOTER3 + HOTMAIL_FOOTER4 + HOTMAIL_FOOTER5 > 1
meta T_HOTMAIL_FOOTER1		HOTMAIL_FOOTER1 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER2		HOTMAIL_FOOTER2 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER3		HOTMAIL_FOOTER3 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER4		HOTMAIL_FOOTER4 && !T_ABUSED_HOTMAIL_FOOTER
meta T_HOTMAIL_FOOTER5		HOTMAIL_FOOTER5 && !T_ABUSED_HOTMAIL_FOOTER

# bug 1406, possible replacement for URI_IS_POUND
# Apr  1 2003 jm: virtually useless hits.  I say let it die
uri T_URI_IS_POUND		/^\#$/
uri T_URI_ENDS_IN_POUND		/^[^?]+\#$/

# bug 1394, possible replacement for ORDER_NOW
body T_ORDER_NOW                  /\border (?:now|soon|fast|quickly|while|today)\b/i
# Apr  1 2003 jm: not so good... more hits, but lower accuracy
#  1.268   3.8907   0.0761    0.981   0.92    0.00  ORDER_NOW
#  1.549   4.7343   0.1009    0.979   0.91    0.01  T_ORDER_NOW

# Matt Cline
uri      T_HTTP_ENTITIES_HOST m{https?://[^\s\">/]*\&\#[\da-f]+}i
describe T_HTTP_ENTITIES_HOST URI obscured with character entities

uri      T_HTTP_EXCESSIVE_ENTITIES m{^https?://\S*\&\#(?:0?3[0-9]|0?[46][1-9a-f]|0?[57][\da])}i
describe T_HTTP_EXCESSIVE_ENTITIES Completely unnecessary %-escapes inside a URL

body T_HTML_COMMENT_NO_ALPHANUM	eval:html_test('comment_no_alphanum')
meta T_HTML_COMMENT_NO_ALPHANUM2	T_HTML_COMMENT_NO_ALPHANUM && !__MOZILLA_MUA

# RFC2822 violations
#header T_HEADER_COUNT_BAD_DATE		eval:check_header_count_range('Date','2','999')
#header T_HEADER_COUNT_BAD_FROM		eval:check_header_count_range('From','2','999')
#header T_HEADER_COUNT_BAD_SENDER	eval:check_header_count_range('Sender','2','999')
#header T_HEADER_COUNT_BAD_REPLYTO	eval:check_header_count_range('Reply-To','2','999')
#header T_HEADER_COUNT_BAD_MESSAGEID	eval:check_header_count_range('Message-Id','2','999')
#header T_HEADER_COUNT_BAD_INREPLYTO	eval:check_header_count_range('In-Reply-To','2','999')
#header T_HEADER_COUNT_BAD_REFERENCES	eval:check_header_count_range('References','2','999')
#header T_HEADER_COUNT_BAD_SUBJECT	eval:check_header_count_range('Subject','2','999')
# multiple To/Cc/Bcc headers are obsolete in RFC 2822, but they are still
# frequently used and RFC 2822 says they should still be supported.  Cc:
# generates many false positives.
#header T_HEADER_COUNT_BAD_TO		eval:check_header_count_range('To','2','999')
#header T_HEADER_COUNT_BAD_CC		eval:check_header_count_range('Cc','2','999')
#header T_HEADER_COUNT_BAD_BCC		eval:check_header_count_range('Bcc','2','999')
# There doesn't seem to be a RFC restriction, but these should only show up
# once in ham
header T_HEADER_COUNT_BAD_CTYPE		eval:check_header_count_range('Content-Type','2','999')
#header T_HEADER_COUNT_BAD_CTE		eval:check_header_count_range('Content-Transfer-Encoding','2','999')

body T_BLANK_LINE_RATIO_01_00_02	eval:check_blank_line_ratio('0','2')
body T_BLANK_LINE_RATIO_01_02_04	eval:check_blank_line_ratio('2','4')
body T_BLANK_LINE_RATIO_01_04_06	eval:check_blank_line_ratio('4','6')
body T_BLANK_LINE_RATIO_01_06_08	eval:check_blank_line_ratio('6','8')
body T_BLANK_LINE_RATIO_01_08_10	eval:check_blank_line_ratio('8','10')
body T_BLANK_LINE_RATIO_01_10_20	eval:check_blank_line_ratio('10','20')
body T_BLANK_LINE_RATIO_01_20_30	eval:check_blank_line_ratio('20','30')
body T_BLANK_LINE_RATIO_01_30_40	eval:check_blank_line_ratio('30','40')
body T_BLANK_LINE_RATIO_01_40_50	eval:check_blank_line_ratio('40','50')
body T_BLANK_LINE_RATIO_01_50_60	eval:check_blank_line_ratio('50','60')
body T_BLANK_LINE_RATIO_01_60_70	eval:check_blank_line_ratio('60','70')
body T_BLANK_LINE_RATIO_01_70_80	eval:check_blank_line_ratio('70','80')
body T_BLANK_LINE_RATIO_01_80_90	eval:check_blank_line_ratio('80','90')
body T_BLANK_LINE_RATIO_01_90_92	eval:check_blank_line_ratio('90','92')
body T_BLANK_LINE_RATIO_01_92_94	eval:check_blank_line_ratio('92','94')
body T_BLANK_LINE_RATIO_01_94_96	eval:check_blank_line_ratio('94','96')
body T_BLANK_LINE_RATIO_01_96_98	eval:check_blank_line_ratio('96','98')
body T_BLANK_LINE_RATIO_01_98_100	eval:check_blank_line_ratio('98','100')

body T_BLANK_LINE_RATIO_04_00_02	eval:check_blank_line_ratio('0','2','4')
body T_BLANK_LINE_RATIO_04_02_04	eval:check_blank_line_ratio('2','4','4')
body T_BLANK_LINE_RATIO_04_04_06	eval:check_blank_line_ratio('4','6','4')
body T_BLANK_LINE_RATIO_04_06_08	eval:check_blank_line_ratio('6','8','4')
body T_BLANK_LINE_RATIO_04_08_10	eval:check_blank_line_ratio('8','10','4')
body T_BLANK_LINE_RATIO_04_10_20	eval:check_blank_line_ratio('10','20','4')
body T_BLANK_LINE_RATIO_04_20_30	eval:check_blank_line_ratio('20','30','4')
body T_BLANK_LINE_RATIO_04_30_40	eval:check_blank_line_ratio('30','40','4')
body T_BLANK_LINE_RATIO_04_40_50	eval:check_blank_line_ratio('40','50','4')
body T_BLANK_LINE_RATIO_04_50_60	eval:check_blank_line_ratio('50','60','4')
body T_BLANK_LINE_RATIO_04_60_70	eval:check_blank_line_ratio('60','70','4')
body T_BLANK_LINE_RATIO_04_70_80	eval:check_blank_line_ratio('70','80','4')
body T_BLANK_LINE_RATIO_04_80_90	eval:check_blank_line_ratio('80','90','4')
body T_BLANK_LINE_RATIO_04_90_92	eval:check_blank_line_ratio('90','92','4')
body T_BLANK_LINE_RATIO_04_92_94	eval:check_blank_line_ratio('92','94','4')
body T_BLANK_LINE_RATIO_04_94_96	eval:check_blank_line_ratio('94','96','4')
body T_BLANK_LINE_RATIO_04_96_98	eval:check_blank_line_ratio('96','98','4')
body T_BLANK_LINE_RATIO_04_98_100	eval:check_blank_line_ratio('98','100','4')

body T_BLANK_LINE_RATIO_08_00_02	eval:check_blank_line_ratio('0','2','8')
body T_BLANK_LINE_RATIO_08_02_04	eval:check_blank_line_ratio('2','4','8')
body T_BLANK_LINE_RATIO_08_04_06	eval:check_blank_line_ratio('4','6','8')
body T_BLANK_LINE_RATIO_08_06_08	eval:check_blank_line_ratio('6','8','8')
body T_BLANK_LINE_RATIO_08_08_10	eval:check_blank_line_ratio('8','10','8')
body T_BLANK_LINE_RATIO_08_10_20	eval:check_blank_line_ratio('10','20','8')
body T_BLANK_LINE_RATIO_08_20_30	eval:check_blank_line_ratio('20','30','8')
body T_BLANK_LINE_RATIO_08_30_40	eval:check_blank_line_ratio('30','40','8')
body T_BLANK_LINE_RATIO_08_40_50	eval:check_blank_line_ratio('40','50','8')
body T_BLANK_LINE_RATIO_08_50_60	eval:check_blank_line_ratio('50','60','8')
body T_BLANK_LINE_RATIO_08_60_70	eval:check_blank_line_ratio('60','70','8')
body T_BLANK_LINE_RATIO_08_70_80	eval:check_blank_line_ratio('70','80','8')
body T_BLANK_LINE_RATIO_08_80_90	eval:check_blank_line_ratio('80','90','8')
body T_BLANK_LINE_RATIO_08_90_92	eval:check_blank_line_ratio('90','92','8')
body T_BLANK_LINE_RATIO_08_92_94	eval:check_blank_line_ratio('92','94','8')
body T_BLANK_LINE_RATIO_08_94_96	eval:check_blank_line_ratio('94','96','8')
body T_BLANK_LINE_RATIO_08_96_98	eval:check_blank_line_ratio('96','98','8')
body T_BLANK_LINE_RATIO_08_98_100	eval:check_blank_line_ratio('98','100','8')

body T_BLANK_LINE_RATIO_20_00_02	eval:check_blank_line_ratio('0','2','20')
body T_BLANK_LINE_RATIO_20_02_04	eval:check_blank_line_ratio('2','4','20')
body T_BLANK_LINE_RATIO_20_04_06	eval:check_blank_line_ratio('4','6','20')
body T_BLANK_LINE_RATIO_20_06_08	eval:check_blank_line_ratio('6','8','20')
body T_BLANK_LINE_RATIO_20_08_10	eval:check_blank_line_ratio('8','10','20')
body T_BLANK_LINE_RATIO_20_10_20	eval:check_blank_line_ratio('10','20','20')
body T_BLANK_LINE_RATIO_20_20_30	eval:check_blank_line_ratio('20','30','20')
body T_BLANK_LINE_RATIO_20_30_40	eval:check_blank_line_ratio('30','40','20')
body T_BLANK_LINE_RATIO_20_40_50	eval:check_blank_line_ratio('40','50','20')
body T_BLANK_LINE_RATIO_20_50_60	eval:check_blank_line_ratio('50','60','20')
body T_BLANK_LINE_RATIO_20_60_70	eval:check_blank_line_ratio('60','70','20')
body T_BLANK_LINE_RATIO_20_70_80	eval:check_blank_line_ratio('70','80','20')
body T_BLANK_LINE_RATIO_20_80_90	eval:check_blank_line_ratio('80','90','20')
body T_BLANK_LINE_RATIO_20_90_92	eval:check_blank_line_ratio('90','92','20')
body T_BLANK_LINE_RATIO_20_92_94	eval:check_blank_line_ratio('92','94','20')
body T_BLANK_LINE_RATIO_20_94_96	eval:check_blank_line_ratio('94','96','20')
body T_BLANK_LINE_RATIO_20_96_98	eval:check_blank_line_ratio('96','98','20')
body T_BLANK_LINE_RATIO_20_98_100	eval:check_blank_line_ratio('98','100','20')

###########################################################################

# tvd - 2003.02.26, trying to strengthen the anti-ratware rules

meta T_FORGED_USER_AGENT	( __USER_AGENT_PINE + __T_USER_AGENT_MUTT + __T_USER_AGENT_MOZILLA_UA + __T_USER_AGENT_MOZILLA_XM + __T_USER_AGENT_MACOE + __T_USER_AGENT_ENTOURAGE + __T_USER_AGENT_KMAIL + __T_USER_AGENT_IMP + __USER_AGENT_TONLINE + __USER_AGENT_APPLEMAIL + __USER_AGENT_GNUS_UA + __USER_AGENT_GNUS_XM + __USER_AGENT_VM + __T_USER_AGENT_MSN + __T_USER_AGENT_FORTE + __USER_AGENT_XIMIAN > 1 )

meta T_USER_AGENT                        ( __USER_AGENT && !T_FORGED_USER_AGENT && !__USER_AGENT_PINE && !__T_USER_AGENT_MUTT && !__T_USER_AGENT_MOZILLA_UA && !__T_USER_AGENT_MOZILLA_XM && !__T_USER_AGENT_MACOE && !__T_USER_AGENT_ENTOURAGE && !__T_USER_AGENT_KMAIL && !__T_USER_AGENT_IMP && !__USER_AGENT_TONLINE && !__USER_AGENT_APPLEMAIL && !__USER_AGENT_GNUS_UA && !__USER_AGENT_GNUS_XM && !__USER_AGENT_VM && !__T_USER_AGENT_MSN && !__T_USER_AGENT_FORTE && !__USER_AGENT_XIMIAN )

header __MSGID_PINE	Message-Id =~ /^<Pine\.[A-Z]{3}\.\d\.[0-9A-Z]+\./
meta __USER_AGENT_PINE	__MSGID_PINE && !MIME_HTML_ONLY
meta T_USER_AGENT_PINE		__USER_AGENT_PINE && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_PINE	__MSGID_PINE && !__USER_AGENT_PINE

# From 0.93.2 - 1.2.5.1, message-id is:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.%c%d@%s>",
#            tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour,
#            tm->tm_min, tm->tm_sec, MsgIdPfx, getpid (), fqdn);
#  MsgIdPfx = (MsgIdPfx == 'Z') ? 'A' : MsgIdPfx + 1;
# The code from mutt 1.4 is adds a 'G' for some reason:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.G%c%d@%s>",
meta __T_USER_AGENT_MUTT	__USER_AGENT_MUTT && __VALID_MUTT_MSGID && !MIME_HTML_ONLY
meta T_USER_AGENT_MUTT		__T_USER_AGENT_MUTT && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_MUTT		__USER_AGENT_MUTT && !__UNUSABLE_MSGID && !__T_USER_AGENT_MUTT

header __USER_AGENT_MOZILLA_UA	User-Agent =~ /^Mozilla\/5\.\d+ \(.*\) Gecko\/\d{8}(?: |$)/
header __MSGID_MOZILLA_UA	Message-Id =~ /^<[0-9A-F]{8}\.\d+\@\S+>$/
meta __T_USER_AGENT_MOZILLA_UA	__USER_AGENT_MOZILLA_UA && __MSGID_MOZILLA_UA
meta T_USER_AGENT_MOZILLA_UA	__T_USER_AGENT_MOZILLA_UA && !T_FORGED_USER_AGENT

header __USER_AGENT_MOZILLA_XM	X-Mailer   =~ /^Mozilla 4\.\d{2} \[[a-z]{2}\]/
header __MSGID_MOZILLA_XM	Message-Id =~ /^<[0-9A-F]{8}\.[0-9A-F]{8}\@\S+>$/
meta __T_USER_AGENT_MOZILLA_XM	__USER_AGENT_MOZILLA_XM && __MSGID_MOZILLA_XM
meta T_USER_AGENT_MOZILLA_XM	__T_USER_AGENT_MOZILLA_XM && !T_FORGED_USER_AGENT

header __USER_AGENT_MACOE	User-Agent =~ /^Microsoft[ -]Outlook[ -]Express[ -]Macintosh[ -]Edition/
meta __T_USER_AGENT_MACOE	__USER_AGENT_MACOE && __MSGID_ENTOURAGE
meta T_USER_AGENT_MACOE		__T_USER_AGENT_MACOE && !T_FORGED_USER_AGENT

header __USER_AGENT_ENTOURAGE	User-Agent =~ /^Microsoft-Entourage\/\d{1,2}(?:\.\d){1,2}\.\d{4}$/
header __MSGID_ENTOURAGE	Message-ID =~ /^<[0-9A-F]{8}\.[0-9A-F]+\%\S+\@\S+>$/
meta __T_USER_AGENT_ENTOURAGE	__USER_AGENT_ENTOURAGE && __MSGID_ENTOURAGE && !MIME_HTML_ONLY
meta T_USER_AGENT_ENTOURAGE	__T_USER_AGENT_ENTOURAGE && !T_FORGED_USER_AGENT

header __USER_AGENT_KMAIL	User-Agent =~ /^KMail\/1\.\d\.\d+$/
header __MSGID_KMAIL		Message-Id =~ /^<[12]\d{3}[01]\d[0-3]\d[0-2]\d[0-5]\d\.\d+\.\S+@\S+>$/
meta __T_USER_AGENT_KMAIL	__USER_AGENT_KMAIL && __MSGID_KMAIL
meta T_USER_AGENT_KMAIL		__T_USER_AGENT_KMAIL && !T_FORGED_USER_AGENT

header __USER_AGENT_IMP		User-Agent =~ /^Internet Messaging Program \(IMP\) [34]\.\d/
header __MSGID_IMP		Message-Id =~ /^<\d{9,10}\.[0-9a-f]{13}\@\S+>$/
meta __T_USER_AGENT_IMP		__USER_AGENT_IMP && __MSGID_IMP
meta T_USER_AGENT_IMP		__T_USER_AGENT_IMP && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_IMP		__USER_AGENT_IMP && !__UNUSABLE_MSGID && !__T_USER_AGENT_IMP

header __USER_AGENT_TONLINE	X-Mailer   =~ /^T-Online (?:e|Web)Mail \d\.\d+$/
meta T_USER_AGENT_TONLINE	__USER_AGENT_TONLINE && !T_FORGED_USER_AGENT

header __USER_AGENT_GNUS_UA	User-Agent =~ /^Gnus\/\d\.\d+ /
meta T_USER_AGENT_GNUS_UA	__USER_AGENT_GNUS_UA && !T_FORGED_USER_AGENT

header __USER_AGENT_GNUS_XM	X-Mailer   =~ /^Gnus v\d(?:\.\d+){1,2}\/X?Emacs \d+\.\d+/
meta T_USER_AGENT_GNUS_XM	__USER_AGENT_GNUS_XM && !T_FORGED_USER_AGENT

header __USER_AGENT_VM		X-Mailer =~ /^\s*VM\s+\d+\.\d+\s+under\s+.{0,30}?[Ee]macs\b/
meta T_USER_AGENT_VM		__USER_AGENT_VM && !T_FORGED_USER_AGENT

# frequently forged, needs some correlation meta checks with other headers.
meta __T_USER_AGENT_MSN		(__USER_AGENT_MSN && __HAS_XOAT && __HAS_XOIP)
meta T_USER_AGENT_MSN		__T_USER_AGENT_MSN && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_MSN		__USER_AGENT_MSN && !T_USER_AGENT_MSN

header __USER_AGENT_FORTE	X-Mailer =~ /^Forte Agent \d\.\d+\/\d+\.\d+$/
header __MSGID_FORTE		Message-Id =~ /^<[0-9a-f]{8}\.\d+\@\S+>$/
meta __T_USER_AGENT_FORTE	__USER_AGENT_FORTE && __MSGID_FORTE
meta T_USER_AGENT_FORTE		__T_USER_AGENT_FORTE && !T_FORGED_USER_AGENT

meta __USER_AGENT_XIMIAN	(__XIMIAN_MSGID && __XIMIAN_MUA)
meta T_USER_AGENT_XIMIAN	__USER_AGENT_XIMIAN && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_XIMIAN	__XIMIAN_MUA && !__UNUSABLE_MSGID && !__USER_AGENT_XIMIAN

# bug 1561
# stronger version of USER_AGENT_APPLEMAIL
# Apple Mail doesn't send text/html at all (unless it's an attachment)
# It'll send text/plain, or multipart/alternative with text/plain and text/enriched parts (boundary of
# "Apple-Mail-\d--\d+").  It can, however, send a multipart/mixed with a single text/html attachment, so
# don't use MIME_HTML_ONLY.
# perhaps limit CTYPE to "text/plain", "multipart/alternative" with "text/plain" and "text/enhanced", or
# "multipart/mixed"?
header __X_MAILER_APPLEMAIL	X-Mailer	=~ /^Apple Mail \(\d\.\d+\)$/
header __MSGID_APPLEMAIL	Message-Id	=~ /^<[0-9A-F]{8}-(?:[0-9A-F]{4}-){3}[0-9A-F]{12}\@\S+>$/
header __MIME_VERSION_APPLEMAIL	Mime-Version	=~ /^1\.0 \(Apple Message framework v\d+\)$/
meta __USER_AGENT_APPLEMAIL	!__CTYPE_HTML && __X_MAILER_APPLEMAIL && ( __MSGID_APPLEMAIL || __MIME_VERSION_APPLEMAIL )
meta T_USER_AGENT_APPLEMAIL	__USER_AGENT_APPLEMAIL && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_APPLEMAIL	__X_MAILER_APPLEMAIL && !__UNUSABLE_MSGID && !__USER_AGENT_APPLEMAIL

# per bug 1373
body __HTML_COMMENT_RATIO_00_10		eval:html_range('total_comment_ratio','0.00','0.10')
body __HTML_COMMENT_RATIO_10_20		eval:html_range('total_comment_ratio','0.10','0.20')
body __HTML_COMMENT_RATIO_20_30		eval:html_range('total_comment_ratio','0.20','0.30')
body __HTML_COMMENT_RATIO_30_40		eval:html_range('total_comment_ratio','0.30','0.40')
body __HTML_COMMENT_RATIO_40_50		eval:html_range('total_comment_ratio','0.40','0.50')
body __HTML_COMMENT_RATIO_50_60		eval:html_range('total_comment_ratio','0.50','0.60')
body __HTML_COMMENT_RATIO_60_70		eval:html_range('total_comment_ratio','0.60','0.70')
body __HTML_COMMENT_RATIO_70_80		eval:html_range('total_comment_ratio','0.70','0.80')
body __HTML_COMMENT_RATIO_80_90		eval:html_range('total_comment_ratio','0.80','0.90')
body __HTML_COMMENT_RATIO_90_100	eval:html_range('total_comment_ratio','0.90','0.100')
meta T_HTML_COMMENT_RATIO_00_10_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_00_10 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_10_20_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_10_20 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_20_30_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_20_30 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_30_40_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_30_40 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_40_50_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_40_50 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_50_60_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_50_60 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_60_70_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_60_70 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_70_80_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_70_80 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_80_90_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_80_90 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_90_100_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_90_100 && MIME_HTML_ONLY

meta T_HTML_COMMENT_RATIO_00_10___MIME_HTML		__HTML_COMMENT_RATIO_00_10 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_10_20___MIME_HTML		__HTML_COMMENT_RATIO_10_20 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_20_30___MIME_HTML		__HTML_COMMENT_RATIO_20_30 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_30_40___MIME_HTML		__HTML_COMMENT_RATIO_30_40 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_40_50___MIME_HTML		__HTML_COMMENT_RATIO_40_50 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_50_60___MIME_HTML		__HTML_COMMENT_RATIO_50_60 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_60_70___MIME_HTML		__HTML_COMMENT_RATIO_60_70 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_70_80___MIME_HTML		__HTML_COMMENT_RATIO_70_80 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_80_90___MIME_HTML		__HTML_COMMENT_RATIO_80_90 && __MIME_HTML
meta T_HTML_COMMENT_RATIO_90_100___MIME_HTML		__HTML_COMMENT_RATIO_90_100 && __MIME_HTML

meta T_HTML_COMMENT_RATIO_00_10_HTML_MESSAGE		__HTML_COMMENT_RATIO_00_10 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_10_20_HTML_MESSAGE		__HTML_COMMENT_RATIO_10_20 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_20_30_HTML_MESSAGE		__HTML_COMMENT_RATIO_20_30 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_30_40_HTML_MESSAGE		__HTML_COMMENT_RATIO_30_40 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_40_50_HTML_MESSAGE		__HTML_COMMENT_RATIO_40_50 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_50_60_HTML_MESSAGE		__HTML_COMMENT_RATIO_50_60 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_60_70_HTML_MESSAGE		__HTML_COMMENT_RATIO_60_70 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_70_80_HTML_MESSAGE		__HTML_COMMENT_RATIO_70_80 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_80_90_HTML_MESSAGE		__HTML_COMMENT_RATIO_80_90 && HTML_MESSAGE
meta T_HTML_COMMENT_RATIO_90_100_HTML_MESSAGE		__HTML_COMMENT_RATIO_90_100 && HTML_MESSAGE

header T_RATWARE_RCVD_BONUS_SPC	Received =~ /\) by  [a-zA-Z0-9]/
describe T_RATWARE_RCVD_BONUS_SPC Received headers forged (extra spaces)

# quinlan: How much better are these than MIME_HTML_ONLY?  I'm concerned
# it's a bit too easy to create high S/O rules with MIME_HTML_ONLY
meta T_MIME_HTML_NO_HTML_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_HTML
meta T_MIME_HTML_NO_BODY_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_BODY
# but we'll try this anyway
meta T_MIME_HTML_NO_MAJOR_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_HTML && !__TAG_EXISTS_BODY

# quinlan: 2003-04-07
# color stuff
body T_HTML_FONT_COLOR_NAME	eval:html_test('t_font_color_name')
describe T_HTML_FONT_COLOR_NAME	HTML font color has unusual name

# alan premselaar <alien@12inch.com>, see SpamAssassin-talk list
header T_JAPANESE_UCE_SUBJECT_3	Subject =~ /L\$\>5Bz9\-9p\"\(/
describe T_JAPANESE_UCE_SUBJECT_3 Subject: contains Japanese mandatory unsolicited mail tag
# quinlan: 2003-03-23 here are more generic Japanese iso-2022-jp codes
# ("not yet acceptance" or "email") + "announcement"
header T_JAPANESE_UCE_SUBJECT_0	Subject =~ /\e\$B.*(?:L\$>5Bz|EE;R%a!<%k)9-9p/
# "not yet acceptance announcement"
header T_JAPANESE_UCE_SUBJECT_1	Subject =~ /\e\$B.*L\$>5Bz9-9p/
# "email announcement"
header T_JAPANESE_UCE_SUBJECT_2	Subject =~ /\e\$B.*EE;R%a!<%k9-9p/

# quinlan: "advertisement" in Russian KOI8-R
header T_RUSSIAN_UCE_SUBJECT	Subject =~ /\xf0\xe5\xea\xeb\xe0\xec\xf3/

# 2003-02-23: quinlan
# Message-Id: format tests
# hotmail
header T_MSGID_ADDED_BY_HOTMAIL_1	Message-Id =~ /<MC\d{1,2}-F{1,2}\w{21,22}\@\S*hotmail\.com>/
header T_MSGID_ADDED_BY_HOTMAIL_2	Message-Id =~ /<[A-Z]{2}\d{1,2}-F{1,2}\w{21,22}\@\S*hotmail\.com>/
# 13 hexadecimal digits instead of 12
header T_MSGID_OUTLOOK_HEX	Message-Id =~ /<[a-f0-9]{13}\$[a-f0-9]{8}\$[a-f0-9]{8}\@/
# this one high correlation with ratware "EMWAC SMTPRS"
header T_MSGID_B_DIGITS		Message-Id =~ /<B\d{10}\@/
# looks like spam
header T_MSGID_THREESIXSIX	Message-Id =~ /<\d{3}\.\d{6}\.\d{6}\@\S+>/

# NOTE: uses __ANY_OUTLOOK_MUA.  This catches Send-Safe and a few others
header __OL_STYLE_FROM		From =~ /\".*\" <.+>/
header __VIA_FROM_MANGLER	Received =~ /iPlanet/
meta T_FORGED_MUA_OUTLOOK_FROM	(__ANY_OUTLOOK_MUA && !__OL_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_OUTLOOK_FROM Forged mail pretending to be from Outlook (by From)

# NOTE: uses __ANY_IMS_MUA from above, __CTYPE_HAS_BOUNDARY from 20_ratware.cf
header __IMS_BOUNDARY		Content-Type =~ /\n\s+boundary=\"----_=_NextPart_[\dA-F]+_[\dA-F]+.[\dA-F]+\"/s
meta T_FORGED_IMS_CTYPE		(__ANY_IMS_MUA && __CTYPE_HAS_BOUNDARY && !__IMS_BOUNDARY)
describe T_FORGED_IMS_CTYPE	Forged mail pretending to be from IMS (boundary)

# NOTE: uses __ANY_QUALCOMM_MUA, __VIA_FROM_MANGLER from above
header __EUD_STYLE_FROM		From =~ /^[^\"].+[^\"] <[^>]+>$/
meta T_FORGED_MUA_EUDORA_FROM	(__ANY_QUALCOMM_MUA && !__EUD_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_EUDORA_FROM Forged mail pretending to be from Eudora (by From)

# Thanks to Brian J. Peterson for this
# Catches spams sent by illiterate spammer ("secks", "whoarez" etc.)
header T_RATWARE_MIZSPEELING	eval:check_for_mizspeeling_ratware()
describe T_RATWARE_MIZSPEELING	Sent using spammer tool (mizspeeling)

# new version
header T_NIGERIAN_SUBJECT2	Subject =~ /^(?:Re:|\[.{1,10}\])?\s*(?:request\s+(?:for\s+)?)?(?:very )?urgent\s+(?:(?:and|&)\s+(?:(?:completely|100\%)\s+))?(?:confidential|assistance|business|attention|reply|responses?|help)\b/i

# let's try rfg's DNSBLs, they seem to have been stable for a while now
# quinlan: entire corpus, then last 2000 spam and 2000 ham:
#  0.000   0.0000   0.0000    0.500   0.11    0.01  T_RCVD_IN_MONKEYS_FORMMAIL
#  0.000   0.0000   0.0000    0.500   0.12    0.01  T_RCVD_IN_MONKEYS_FORMMAIL
header T_RCVD_IN_MONKEYS_FORMMAIL	rbleval:check_rbl_txt('relay', 'formmail.relays.monkeys.com.')
describe T_RCVD_IN_MONKEYS_FORMMAIL	Received via a relay in formmail.relays.monkeys.com.
tflags T_RCVD_IN_MONKEYS_FORMMAIL net
# just an experiment
header T_RCVD_IN_MONKEYS_FORMMAIL2	rbleval:check_rbl('relay2', 'formmail.relays.monkeys.com.')
describe T_RCVD_IN_MONKEYS_FORMMAIL2	Received via a relay in formmail.relays.monkeys.com.
tflags T_RCVD_IN_MONKEYS_FORMMAIL2 net

# quinlan: entire corpus, then last 2000 spam and 2000 ham:
# 18.125  36.2000   0.0500    0.999   0.95    0.01  T_RCVD_IN_MONKEYS_UPL
#  7.766  19.0844   0.0678    0.996   0.94    0.01  T_RCVD_IN_MONKEYS_UPL
header T_RCVD_IN_MONKEYS_UPL	rbleval:check_rbl_txt('relay', 'proxies.relays.monkeys.com.')
describe T_RCVD_IN_MONKEYS_UPL	Received via a relay in proxies.relays.monkeys.com.
tflags T_RCVD_IN_MONKEYS_UPL net

# new "-notfirsthop" logic
# quinlan: entire corpus, then last 2000 spam and 2000 ham:
#  0.309   0.7311   0.0226    0.970   0.85    0.01  T_RCVD_IN_PDL:quinlan
#  0.225   0.4500   0.0000    1.000   0.90    0.01  T_RCVD_IN_PDL:quinlan
header T_RCVD_IN_PDL		rbleval:check_rbl('pdl-notfirsthop', 'dialups.visi.com.')
tflags T_RCVD_IN_PDL		net

# quinlan: entire corpus, then last 2000 spam and 2000 ham:
#  0.686   1.5620   0.0904    0.945   0.79    0.01  T_RCVD_IN_DYNABLOCK
#  0.775   1.5000   0.0500    0.968   0.82    0.01  T_RCVD_IN_DYNABLOCK
header T_RCVD_IN_DYNABLOCK	rbleval:check_rbl('dynablock-notfirsthop', 'dynablock.wirehub.net.')
tflags T_RCVD_IN_DYNABLOCK	net

# mixed list, still need to check for cost, policies, etc.
header T_RCVD_IN_DEADBEEF	rbleval:check_rbl('deadbeef', 'bl.deadbeef.com.')
header T_RCVD_IN_DNSBLINFO	rbleval:check_rbl('dnsblinfo', 'spamsources.dnsbl.info.')
header T_RCVD_IN_DNSRBLSPAM	rbleval:check_rbl('dnsrblspam', 'spam.dnsrbl.net.')
header T_RCVD_IN_DUINV	rbleval:check_rbl('duinv', 'duinv.aupads.org.')
header T_RCVD_IN_GIPPER	rbleval:check_rbl('gipper', 'proxy.bl.gweep.ca.')
header T_RCVD_IN_INTERSIL	rbleval:check_rbl('intersil', 'blackholes.intersil.net.')
header T_RCVD_IN_RELAYS_KUNDENSERVER	rbleval:check_rbl('kundenserver', 'relays.bl.kundenserver.de.')
header T_RCVD_IN_SPAMSOURCES_FABEL	rbleval:check_rbl('fabel', 'spamsources.fabel.dk.')
header T_RCVD_IN_VOX_SCHPIDER_COM	rbleval:check_rbl('schpider', 'vox.schpider.com.')
header T_RCVD_IN_WSFF		rbleval:check_rbl('wsff', 'will-spam-for-food.eu.org.')
tflags T_RCVD_IN_DEADBEEF net
tflags T_RCVD_IN_DNSBLINFO net
tflags T_RCVD_IN_DNSRBLSPAM net
tflags T_RCVD_IN_DUINV net
tflags T_RCVD_IN_GIPPER net
tflags T_RCVD_IN_INTERSIL net
tflags T_RCVD_IN_RELAYS_KUNDENSERVER net
tflags T_RCVD_IN_SPAMSOURCES_FABEL net
tflags T_RCVD_IN_VOX_SCHPIDER_COM net
tflags T_RCVD_IN_WSFF net

# wirehub
header T_RCVD_IN_WIREHUB_BH	rbleval:check_rbl('wirehub', 'blackholes.wirehub.net.')
tflags T_RCVD_IN_WIREHUB_BH net
header T_RCVD_IN_WIREHUB_PROXIES	rbleval:check_rbl('pbwn', 'proxies.blackholes.wirehub.net.')
tflags T_RCVD_IN_WIREHUB_PROXIES net

# OPM with sub-tests
# transfers: axfr/ixfr for trusted sites
# url: http://opm.blitzed.org/
# pay-to-use: no
# delist: automatic expiry, no fee, retested on request (free)
header __RCVD_IN_OPM		rbleval:check_rbl('opm2', 'opm.blitzed.org.')
tflags __RCVD_IN_OPM net
header T_RCVD_IN_OPM_WINGATE		rblreseval:check_rbl_results_for('opm2', '1')
tflags T_RCVD_IN_OPM_WINGATE net
header T_RCVD_IN_OPM_SOCKS		rblreseval:check_rbl_results_for('opm2', '2')
tflags T_RCVD_IN_OPM_SOCKS net
header T_RCVD_IN_OPM_HTTP_CONNECT	rblreseval:check_rbl_results_for('opm2', '4')
tflags T_RCVD_IN_OPM_HTTP_CONNECT net
header T_RCVD_IN_OPM_ROUTER		rblreseval:check_rbl_results_for('opm2', '8')
tflags T_RCVD_IN_OPM_ROUTER net
header T_RCVD_IN_OPM_HTTP_POST	rblreseval:check_rbl_results_for('opm2', '16')
tflags T_RCVD_IN_OPM_HTTP_POST net

# fiveten - many blacklists, but only the bulk one performs well
# transfers: not specified, unknown
# url: http://blackholes.five-ten-sg.com/
# pay-to-use: no
# delist: email address contact provided
header __FIVETEN	rbleval:check_rbl('fiveten', 'blackholes.five-ten-sg.com.')
tflags __FIVETEN net
# bulk mailers that don't require confirmed opt-in from their customers,
# or that have have allowed known spammers to become clients.
header T_RCVD_IN_FIVETEN_BULK	rblreseval:check_rbl_results_for('fiveten', '127.0.0.4')
tflags T_RCVD_IN_FIVETEN_BULK net
# retest all of the rest (since rblreseval wasn't used before)
header T_RCVD_IN_FIVETEN_SPAM	rblreseval:check_rbl_results_for('fiveten', '127.0.0.2')
header T_RCVD_IN_FIVETEN_DIALUP	rblreseval:check_rbl_results_for('fiveten', '127.0.0.3')
header T_RCVD_IN_FIVETEN_MULTISTAGE	rblreseval:check_rbl_results_for('fiveten', '127.0.0.5')
header T_RCVD_IN_FIVETEN_SINGLESTAGE	rblreseval:check_rbl_results_for('fiveten', '127.0.0.6')
header T_RCVD_IN_FIVETEN_SPAMSUPPORT	rblreseval:check_rbl_results_for('fiveten', '127.0.0.7')
header T_RCVD_IN_FIVETEN_WEBFORM	rblreseval:check_rbl_results_for('fiveten', '127.0.0.8')
header T_RCVD_IN_FIVETEN_MISC	rblreseval:check_rbl_results_for('fiveten', '127.0.0.9')
header T_RCVD_IN_FIVETEN_KLEZ	rblreseval:check_rbl_results_for('fiveten', '127.0.0.10')
header T_RCVD_IN_FIVETEN_TCPA	rblreseval:check_rbl_results_for('fiveten', '127.0.0.11')
header T_RCVD_IN_FIVETEN_FREE	rblreseval:check_rbl_results_for('fiveten', '127.0.0.12')
# should probably get notfirsthop etc. to work at any stage
# (how about an optional third argument?)
header __FIVE10		rblreseval:check_rbl('five10-notfirsthop', 'blackholes.five-ten-sg.com.')
header T_RCVD_IN_FIVETEN_DIALUP_NFH	rblreseval:check_rbl_results_for('five10-notfirsthop', '127.0.0.3')

# some additional osirusoft tests, needs more work
# all osirusoft tests maybe a bad idea, osirusoft web site seems defunct
header T_RCVD_IN_OSRELAY	rbleval:check_rbl('osrelay', 'inputs.relays.osirusoft.com.')
tflags T_RCVD_IN_OSRELAY net
header T_RCVD_IN_OSSRC	rbleval:check_rbl('ossrc', 'spamsources.relays.osirusoft.com.')
tflags T_RCVD_IN_OSSRC net
header T_RCVD_IN_OSSOCKS	rbleval:check_rbl('ossocks', 'socks.relays.osirusoft.com.')
tflags T_RCVD_IN_OSSOCKS net

# SORBS
# transfers: both axfr and ixfr available
# url: http://www.dnsbl.sorbs.net/
# pay-to-use: no
# delist: $50 fee for T_RCVD_IN_SORBS_SPAM, others are retested on request (free)
header T_RCVD_IN_SORBS	rbleval:check_rbl('sorbs', 'dnsbl.sorbs.net.')
tflags T_RCVD_IN_SORBS net
header T_RCVD_IN_SORBS_HTTP	rblreseval:check_rbl_results_for('sorbs', '127.0.0.2')
tflags T_RCVD_IN_SORBS_HTTP net
header T_RCVD_IN_SORBS_MISC	rblreseval:check_rbl_results_for('sorbs', '127.0.0.3')
tflags T_RCVD_IN_SORBS_MISC net
header T_RCVD_IN_SORBS_SMTP	rblreseval:check_rbl_results_for('sorbs', '127.0.0.4')
tflags T_RCVD_IN_SORBS_SMTP net
header T_RCVD_IN_SORBS_SOCKS	rblreseval:check_rbl_results_for('sorbs', '127.0.0.5')
tflags T_RCVD_IN_SORBS_SOCKS net
header T_RCVD_IN_SORBS_SPAM	rblreseval:check_rbl_results_for('sorbs', '127.0.0.6')
tflags T_RCVD_IN_SORBS_SPAM net
header T_RCVD_IN_SORBS_WEB	rblreseval:check_rbl_results_for('sorbs', '127.0.0.7')
tflags T_RCVD_IN_SORBS_WEB net

# some Reynolds RBLs, may be a bad idea since they're in Australia
# perhaps find a local mirror or maybe figure out what the source data is?
header T_RCVD_IN_REYNOLDSOSRS	rbleval:check_rbl('reynoldsosrs', 'osrs.bl.reynolds.net.au.')
tflags T_RCVD_IN_REYNOLDSOSRS net
header T_RCVD_IN_REYNOLDSOSPS	rbleval:check_rbl('reynoldsosps', 'osps.bl.reynolds.net.au.')
tflags T_RCVD_IN_REYNOLDSOSPS net
header T_RCVD_IN_REYNOLDSOHPS	rbleval:check_rbl('reynoldsohps', 'ohps.bl.reynolds.net.au.')
tflags T_RCVD_IN_REYNOLDSOHPS net
header T_RCVD_IN_REYNOLDSWPB	rbleval:check_rbl('reynoldswpb', 'wpb.bl.reynolds.net.au.')
tflags T_RCVD_IN_REYNOLDSWPB net

# OK, a whole batch of faked-HELO detection rules.  These work by checking
# for hosts HELOing in a certain domain, but without rDNS matching that.
# these are the most frequently-impersonated headers in my recent corpora...
header T_FAKE_HELO_YAHOO	eval:check_for_rdns_helo_mismatch("yahoo\.com","yahoo\.com")
header T_FAKE_HELO_HOTMAIL	eval:check_for_rdns_helo_mismatch("hotmail(?:\.msn|)\.com","hotmail\.com")
header T_FAKE_HELO_AOL		eval:check_for_rdns_helo_mismatch("aol\.com","aol\.com")
header T_FAKE_HELO_MSN		eval:check_for_rdns_helo_mismatch("msn\.com","msn\.com")
header T_FAKE_HELO_EXCITE	eval:check_for_rdns_helo_mismatch("excite\S*","excite\.com")
header T_FAKE_HELO_LYCOS	eval:check_for_rdns_helo_mismatch("lycos\S*","lycos\.com")
header T_FAKE_HELO_MAIL_COM	eval:check_for_rdns_helo_mismatch("mail\.com","mail\.com")
header T_FAKE_HELO_EUDORAMAIL	eval:check_for_rdns_helo_mismatch("eudoramail\.com","eudoramail\.com")
header T_FAKE_HELO_EMAIL_COM	eval:check_for_rdns_helo_mismatch("email\.com","email\.com")
header T_FAKE_HELO_NETSCAPE	eval:check_for_rdns_helo_mismatch("netscape\.net","netscape\.net")
header T_FAKE_HELO_FLASHMAIL	eval:check_for_rdns_helo_mismatch("flashmail\.com","flashmail\.com")

# urgh.  This could be a case of "forget about it".  Does earthlink really
# relay for all these networks?
header T_FAKE_HELO_EARTHLINK	eval:check_for_rdns_helo_mismatch("(?:earthlink\.net|teleport\.com|dialsprint\.net|charterpipeline\.net|mindsprint\.com|level3\.net)","earthlink\.net")

header T_FAKE_HELO_JUNO		eval:check_for_rdns_helo_mismatch("(?:untd|juno)\.com","juno\.com")
header T_FAKE_HELO_UNTD		eval:check_for_rdns_helo_mismatch("(?:untd|juno)\.com","untd\.com")
header T_FAKE_HELO_YAHOO_CO_UK	eval:check_for_rdns_helo_mismatch("yahoo\.co\.uk","yahoo\.co\.uk")
header T_FAKE_HELO_USA_NET	eval:check_for_rdns_helo_mismatch("usa\.net","usa\.net")
header T_FAKE_HELO_FREEUK	eval:check_for_rdns_helo_mismatch("freeuk\.com","freeuk\.com")
header T_FAKE_HELO_CARAMAIL	eval:check_for_rdns_helo_mismatch("caramail\.com","caramail\.com")
header T_FAKE_HELO_NETSCAPE_COM	eval:check_for_rdns_helo_mismatch("(?:netscape|netcenter|aol)\.(?:com|net)","netscape\.com")
header T_FAKE_HELO_MAIL_RU	eval:check_for_rdns_helo_mismatch("mail\.ru","mail\.ru")
header T_FAKE_HELO_NETZERO	eval:check_for_rdns_helo_mismatch("netzero\.net","netzero\.net")
header T_FAKE_HELO_USA_COM	eval:check_for_rdns_helo_mismatch("usa\.com","usa\.com")
header T_FAKE_HELO_IBM_COM	eval:check_for_rdns_helo_mismatch("ibm\.com","ibm\.com")
header T_FAKE_HELO_EUROPE	eval:check_for_rdns_helo_mismatch("europe\.com","europe\.com")
header T_FAKE_HELO_MAILCITY	eval:check_for_rdns_helo_mismatch("(?:mailcity|lycos)\.com","mailcity\.com")
header T_FAKE_HELO_BIGFOOT	eval:check_for_rdns_helo_mismatch("bigfoot\.com","bigfoot\.com")
header T_FAKE_HELO_ATTBI	eval:check_for_rdns_helo_mismatch("attbi\.com","attbi\.com")
header T_FAKE_HELO_YAHOO_CA	eval:check_for_rdns_helo_mismatch("yahoo\.ca","yahoo\.ca")
header T_FAKE_HELO_HOTPOP	eval:check_for_rdns_helo_mismatch("hotpop\.com","hotpop\.com")
header T_FAKE_HELO_SHAW_CA	eval:check_for_rdns_helo_mismatch("shaw(?:\.ca|cable\.net)","shaw\.ca")
header T_FAKE_HELO_AMAZON	eval:check_for_rdns_helo_mismatch("amazon\.com","amazon\.com")

# 2003-04-12
# juno.com anti-forgery rule based on valid juno.com account names
# reference: http://www.juno.com/legal/spam.html
# quinlan: not a lot of hits for me, but maybe it will work better for others
header __JUNO_FROM		From:addr =~ /\@juno\.com\b/i
# my initial reading of their valid account name rules
header __JUNO_FROM_VALID	From:addr =~ /^[a-z](?:[a-z0-9_-]|\.(?!\.)){0,62}[a-z0-9]\@juno\.com\b/i
meta T_FORGED_JUNO_FROM		(__JUNO_FROM && !__JUNO_FROM_VALID)
# more restrictive interpretation of their valid account name rules,
# don't allow any of the permitted non-alphanumeric characters to be
# repeated, this should probably be verified
header __JUNO_FROM_VALID2	From:addr =~ /^[a-z](?:[a-z0-9]|[-._](?![-._])){0,62}[a-z0-9]\@juno\.com\b/i
meta T_FORGED_JUNO_FROM2	(__JUNO_FROM && !__JUNO_FROM_VALID2)

# 2003-04-11
# bug 1769, possible replacement rules
# replacement for OBFUSCATING_COMMENT (we already have two of these rules,
# consolidate and rename?)
rawbody __T_OBFUSCATING_COMMENT	/[a-z]<![^>]*>[a-z]/i
meta T_OBFUSCATING_COMMENT	__T_OBFUSCATING_COMMENT && MIME_HTML_ONLY
describe T_OBFUSCATING_COMMENT	HTML comments which obfuscate text (2)
header T_GAPPY_SUBJECT		Subject =~ /\b(?:[a-z][\W]{1,3}){4,}/i
body T_AS_SEEN_ON		/seen [oi]n\b\s*(?:TV|ABC|NBC|CBS|CNN|Oprah|USA Today|48 Hours|(The )?New York Times|\w+\s+TV|:)/i
body T_SEE_FOR_YOURSELF		/See (?:for|it|it for) yourself\b/i
