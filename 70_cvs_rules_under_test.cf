# SpamAssassin rules file: CVS rules under test, $Revision: 1.606 $
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the Artistic License or the GNU General
# Public License as published by the Free Software Foundation; either
# version 1 of the License, or (at your option) any later version.
#
# See the file "License" in the top level of the SpamAssassin source
# distribution for more details.
#
###########################################################################

# NOTE: uses __ANY_OUTLOOK_MUA.  This catches Send-Safe and a few others
header __OL_STYLE_FROM		From =~ /\".*\" <.+>/
header __VIA_FROM_MANGLER	Received =~ /iPlanet/
meta T_FORGED_MUA_OUTLOOK_FROM	(__ANY_OUTLOOK_MUA && !__OL_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_OUTLOOK_FROM Forged mail pretending to be from Outlook (From)

# NOTE: uses __ANY_QUALCOMM_MUA, __VIA_FROM_MANGLER from above
header __EUD_STYLE_FROM		From =~ /^(?:[^\"][^']+[^\"]|\".*\'.*\") <[^>]+>$/
meta T_FORGED_MUA_EUDORA_FROM	(__ANY_QUALCOMM_MUA && !__EUD_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_EUDORA_FROM Forged mail pretending to be from Eudora (by From)

# mixed list, still need to check for cost, policies, etc.
header T_RCVD_IN_DNSRBLSPAM	rbleval:check_rbl('dnsrblspam', 'spam.dnsrbl.net.')
header T_RCVD_IN_INTERSIL	rbleval:check_rbl('intersil', 'blackholes.intersil.net.')
header T_RCVD_IN_SPAMSOURCES_FABEL	rbleval:check_rbl('fabel', 'spamsources.fabel.dk.')
header T_RCVD_IN_VOX_SCHPIDER_COM	rbleval:check_rbl('schpider', 'vox.schpider.com.')
tflags T_RCVD_IN_DNSRBLSPAM net
tflags T_RCVD_IN_INTERSIL net
tflags T_RCVD_IN_SPAMSOURCES_FABEL net
tflags T_RCVD_IN_VOX_SCHPIDER_COM net

# easynet.nl (formerly wirehub.net)
header T_RCVD_IN_EASYNET_DYNABLOCK	rbleval:check_rbl('dynablock-notfirsthop', 'dynablock.easynet.nl.')
tflags T_RCVD_IN_EASYNET_DYNABLOCK net
header T_RCVD_IN_EASYNET_BLACKHOLES	rbleval:check_rbl('easynet', 'blackholes.easynet.nl.')
tflags T_RCVD_IN_EASYNET_BLACKHOLES net

# OPM sub-tests
# transfers: axfr/ixfr for trusted sites
# url: http://opm.blitzed.org/
# pay-to-use: no
# delist: automatic expiry, no fee, retested on request (free)
header T_RCVD_IN_OPM_WINGATE		rbleval:check_rbl_sub('opm', '1')
tflags T_RCVD_IN_OPM_WINGATE net
header T_RCVD_IN_OPM_SOCKS		rbleval:check_rbl_sub('opm', '2')
tflags T_RCVD_IN_OPM_SOCKS net
header T_RCVD_IN_OPM_HTTP_CONNECT	rbleval:check_rbl_sub('opm', '4')
tflags T_RCVD_IN_OPM_HTTP_CONNECT net
header T_RCVD_IN_OPM_ROUTER		rbleval:check_rbl_sub('opm', '8')
tflags T_RCVD_IN_OPM_ROUTER net
header T_RCVD_IN_OPM_HTTP_POST		rbleval:check_rbl_sub('opm', '16')
tflags T_RCVD_IN_OPM_HTTP_POST net

# fiveten - many blacklists, the bulk one performs well
# transfers: yes, most of the slave servers allow zone transfers
# url: http://blackholes.five-ten-sg.com/
# pay-to-use: no
# delist: email address contact provided
header T_RCVD_IN_FIVETEN	rbleval:check_rbl('fiveten', 'blackholes.five-ten-sg.com.')
tflags T_RCVD_IN_FIVETEN net
# bulk mailers that don't require confirmed opt-in from their customers,
# or that have have allowed known spammers to become clients.
header T_RCVD_IN_FIVETEN_BULK	rbleval:check_rbl_sub('fiveten', '127.0.0.4')
tflags T_RCVD_IN_FIVETEN_BULK net
# retest all of the rest (since check_rbl_sub wasn't used before)
header T_RCVD_IN_FIVETEN_SPAM	rbleval:check_rbl_sub('fiveten', '127.0.0.2')
tflags T_RCVD_IN_FIVETEN_SPAM net
header T_RCVD_IN_FIVETEN_DIALUP	rbleval:check_rbl('fiveten-notfirsthop', 'blackholes.five-ten-sg.com.', '127.0.0.3')
tflags T_RCVD_IN_FIVETEN_DIALUP net
header T_RCVD_IN_FIVETEN_MULTISTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.5')
tflags T_RCVD_IN_FIVETEN_MULTISTAGE net
header T_RCVD_IN_FIVETEN_SINGLESTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.6')
tflags T_RCVD_IN_FIVETEN_SINGLESTAGE net
header T_RCVD_IN_FIVETEN_SPAMSUPPORT	rbleval:check_rbl_sub('fiveten', '127.0.0.7')
tflags T_RCVD_IN_FIVETEN_SPAMSUPPORT net
header T_RCVD_IN_FIVETEN_WEBFORM	rbleval:check_rbl_sub('fiveten', '127.0.0.8')
tflags T_RCVD_IN_FIVETEN_WEBFORM net
header T_RCVD_IN_FIVETEN_MISC	rbleval:check_rbl_sub('fiveten', '127.0.0.9')
tflags T_RCVD_IN_FIVETEN_MISC net
header T_RCVD_IN_FIVETEN_KLEZ	rbleval:check_rbl_sub('fiveten', '127.0.0.10')
tflags T_RCVD_IN_FIVETEN_KLEZ net
header T_RCVD_IN_FIVETEN_TCPA	rbleval:check_rbl_sub('fiveten', '127.0.0.11')
tflags T_RCVD_IN_FIVETEN_TCPA net
header T_RCVD_IN_FIVETEN_FREE	rbleval:check_rbl_sub('fiveten', '127.0.0.12')
tflags T_RCVD_IN_FIVETEN_FREE net

# some dial-up lists that seem decent, worth testing some more
header T_RCVD_IN_DUN_DNSRBL rbleval:check_rbl('dun-notfirsthop', 'dun.dnsrbl.net.')
tflags T_RCVD_IN_DUN_DNSRBL net
# another one
header T_RCVD_IN_DUL_AUPADS rbleval:check_rbl('duinv-notfirsthop', 'duinv.aupads.org.')
tflags T_RCVD_IN_DUL_AUPADS net

# bug 1733: SenderBase
# sa.senderbase.org for SpamAssassin queries
# test.senderbase.org for everything else (until SenderBase is in production)
header __SENDERBASE rbleval:check_rbl_txt('senderbase', 'sa.senderbase.org.')
tflags __SENDERBASE net

# SenderBase test rule, should have same results as RCVD_IN_BONDEDSENDER
header T_RCVD_IN_BONDEDSENDER rbleval:check_rbl_sub('senderbase', 'defined(S45) && S45 eq "Y"')
tflags T_RCVD_IN_BONDEDSENDER net

# OK, a whole batch of faked-HELO detection rules.  These work by checking
# for hosts HELOing in a certain domain, but without rDNS matching that.
# these are the most frequently-impersonated headers in my recent corpora...
#
# NOTE: these cannot simply be inverted for a "nice" rule; to do this would
# require checking only the last untrusted line, rather than all of them.
#
header T_FAKE_HELO_NETSCAPE_COM	eval:check_for_rdns_helo_mismatch("(?:netscape|netcenter|aol)\.(?:com|net)","netscape\.com")

# Justin says Yahoo stopped using this hostname entirely (which makes me
# wonder if spammers will still use it and whether it will work on our
# older corpus mail)
uri T_YAHOO_REDIRECTOR		/^https?:\/\/rd\.yahoo\.com/i
describe T_YAHOO_REDIRECTOR	Uses commonly-spammed redirector URL

# quinlan on 2003-06-12: one of these should be promotable
uri T_BIZ_LINKS_1	/(?:^https?\:\/\/|^mailto\:).{0,20}\.bi?z/i
uri T_BIZ_LINKS_2	/(?:^https?\:\/\/|^mailto\:).{0,20}\.bi?z\b/i
uri T_BIZ_LINKS_3	/(?:^https?\:\/\/|^mailto\:).{0,20}\.bi?z(?:\/|$)/i

# spin on USERPASS (don't require username)
uri T_USERPASS			m{https?://[^/\s]*?(?::[^/\s]+?)?\@}

# @ appears in URI
uri T_URI_LINK_AT_SIGN	/^https?\:\/\/.*?\/.*\@/

# try to improve T_HTTP_EXCESSIVE_ESCAPES, test each good-looking escape
# and see which ones could boost results of existing rule and by how much
# S/O     count   hex     string
# 100.00  2529    25      %
uri __ESCAPE_25		/^https?:\/\/\S*%25/i
meta T_HTTP_EXCESSIVE_ESCAPE_25	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_25)
# 99.55   1319    2f      /
uri __ESCAPE_2F		/^https?:\/\/\S*%2F/i
meta T_HTTP_EXCESSIVE_ESCAPE_2F	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_2F)
# 100.00  954     2e      .
uri __ESCAPE_2E		/^https?:\/\/\S*%2E/i
meta T_HTTP_EXCESSIVE_ESCAPE_2E	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_2E)
# 99.86   716     5f      _
uri __ESCAPE_5F		/^https?:\/\/\S*%5F/i
meta T_HTTP_EXCESSIVE_ESCAPE_5F	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_5F)
# 99.28   416     3a      :
uri __ESCAPE_3A		/^https?:\/\/\S*%3A/i
meta T_HTTP_EXCESSIVE_ESCAPE_3A	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_3A)
# 98.97   387     3d      =
uri __ESCAPE_3D		/^https?:\/\/\S*%3D/i
meta T_HTTP_EXCESSIVE_ESCAPE_3D	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_3D)
# 99.31   288     26      &
uri __ESCAPE_26		/^https?:\/\/\S*%26/i
meta T_HTTP_EXCESSIVE_ESCAPE_26	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_26)
# 95.02   241     3f      ?
uri __ESCAPE_3F		/^https?:\/\/\S*%3F/i
meta T_HTTP_EXCESSIVE_ESCAPE_3F	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_3F)
# 54.66   161     40      @
uri __ESCAPE_40		/^https?:\/\/\S*%40/i
meta T_HTTP_EXCESSIVE_ESCAPE_40	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_40)
# 96.15   52      7e      ~
uri __ESCAPE_7E		/^https?:\/\/\S*%7E/i
meta T_HTTP_EXCESSIVE_ESCAPE_7E	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_7E)
# 100.00  49      7c      |
uri __ESCAPE_7C		/^https?:\/\/\S*%7C/i
meta T_HTTP_EXCESSIVE_ESCAPE_7C	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_7C)
# 100.00  20      2d      -
uri __ESCAPE_2D		/^https?:\/\/\S*%2D/i
meta T_HTTP_EXCESSIVE_ESCAPE_2D	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_2D)
# 100.00  12      0a	NO-BREAK SPACE
uri __ESCAPE_0A		/^https?:\/\/\S*%0A/i
meta T_HTTP_EXCESSIVE_ESCAPE_0A	(!HTTP_EXCESSIVE_ESCAPES && __ESCAPE_0A)

######

# 2, 3, 4, and 6 actually look semi-ok, but these really need to be
# split into multiple rules.  I actually don't like these rules since
# once we start looking for them, the spammers will just change domains,
# but ...
# tvd - 06/01
uri T_BANNED_LINKS4_04	m@(?:^https?://|^mailto:).{0,20}bannedcd@i
uri T_BANNED_LINKS4_09	m@(?:^https?://|^mailto:).{0,20}freeht@i
uri T_BANNED_LINKS4_11	m@(?:^https?://|^mailto:).{0,20}domainsforeveryone@i
uri T_BANNED_LINKS5_10	m@(?:^https?://|^mailto:).{0,20}faqchat@i
uri T_SUSPICIOUS_LINKS_10	m@(?:^https?://|^mailto:).{0,25}4you@i

# try to do something interesting with this rule
uri T_SUSPICIOUS_LINKS_09	m@(?:^https?://|^mailto:).{0,25}offer[sz]@i
# new rule
uri T_OFFERS_URL		m/offer([sz]|-\S+)?\.(?:com|bi?z)/i

######################################################################

# tvd - US_DOLLARS and MILLION_USD overlap completely, remove the MILLION_USD part
body T_NA_DOLLARS		/\b(?:\d{1,3})?Million\b.{0,40}\b(?:Canadian Dollar?s?|US\$|U\.? ?S\.? Dollar)/i

# Hotmail's DAV interface uses this. heavily exploited right now, looks like.
# as far as I can tell, it requires an msn.com or hotmail.com X-Originating-Email,
# but allows anything for From -- so use that as a spamsign
header __HAS_MSN_RCVD_DAV	Received =~ / by \S+\.(?:hotmail|msn)\.com with (?:HTTP|DAV)\;/
header __HAS_MSN_ORIG_EMAIL	X-Originating-Email =~ /(?:hotmail|msn)\.com\b/
header __HAS_MSN_FROM		From =~ /(?:hotmail|msn)\.com\b/
meta T_FAKED_HOTMAIL_DAV	(__HAS_MSN_RCVD_DAV && __HAS_MSN_ORIG_EMAIL && !__HAS_MSN_FROM)
describe T_FAKED_HOTMAIL_DAV	'X-Originating-Email' header does not match 'From'

header T_HAS_X_ORIG_HOST	X-Originating-Host =~ /^\[/
describe T_HAS_X_ORIG_HOST	Has an 'X-Originating-Host' header

# http://bugzilla.spamassassin.org/show_bug.cgi?id=1839
# if this does better than FORGED_RCVD_TRAIL, we'll just stick with
# this version and remove the mismatch_from code from the new one
header T_FORGED_RCVD_TRAIL	eval:check_for_forged_received_trail_old_style()

