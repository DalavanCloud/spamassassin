# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
###########################################################################

# should be fixed now
# updated per bug 1217
# %%% INVALID_MSGID
# Dec 17 2002 jm: added subtest since part of my corpus has no msgid
# Dec 17 2002 jm: btw, one FP is for
# <41340.2001:770:18:1:250:4ff:feea:4364.1028136205.squirrel@webmail.heanet.ie>,
# ie an IPv6 address in the msgid.  Not sure if that's interesting or not ;)

# Dec 24 2002 jm: ok, I think we should drop these... not really getting
# around the FPs

header __VALID_MSGID MESSAGEID =~ /^<(?:[a-zA-Z0-9.,!\#\$%&'*\+\/=?\^_{}|~-]+|\".+\")\@(?:[a-zA-Z0-9_.-]+|\[\d{1,3}(?:\.\d{1,3}){3}\])>(?:\s*\(.*\))?\s*$/m [if-unset: <NO@MSGID>]
header __HAS_MSGID		MESSAGEID =~ /\S/
meta T_INVALID_MSGID		__HAS_MSGID && !__VALID_MSGID
describe T_INVALID_MSGID	Message-Id is not valid, according to RFC 2822
#
# quinlan: If this has a better S/O for others (all of my FPs are from the
# same person), it should be an eval so this can be done properly: strip
# comments on each Message-Id header, then use regular expression.
# Dec 18 2002 jm: S/Os aren't much better for others, but I think we should
# do it that way anyway.
#
header __MSGID_COMMENT		MESSAGEID =~ /\(.*\)/m
meta T_INVALID_MSGID2		__HAS_MSGID && !(__VALID_MSGID || __MSGID_COMMENT)


# these rules may need to factor in ok_languages or ok_locales
# Dec 18 2002 jm: but how? ;)  They are ready to be promoted otherwise
#freqs:  0.084   0.2047   0.0095    0.956   0.84    0.01  T_BODY_UNPRINTABLE
body T_BODY_UNPRINTABLE		/[\x00-\x07\x0b\x0c\x0e-\x1f\x7f]{3,}/
describe T_BODY_UNPRINTABLE	Body includes 3 consecutive unprintable characters
#freqs:  3.660   9.4529   0.0442    0.995   0.96    0.01  T_BODY_8BITS
body T_BODY_8BITS		/[\x80-\xff]{8,}/
describe T_BODY_8BITS		Body includes 8 consecutive 8-bit characters

########################################################################
# bug 1106: forged MUAs
# only needed a \b around the shortest X-Mailer regular expressions

# Mozilla
# Dec 10 2002 jm: dan, you have fps for this, could you check 'em?
header __MOZILLA_MUA		X-Mailer =~ /\bMozilla\b/
header __MOZILLA_MSGID		MESSAGEID =~ /^<[A-F\d]{8}\.[A-F\d]{4,8}\@\S+>$/
meta T_FORGED_MUA_MOZILLA	(__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID)
describe T_FORGED_MUA_MOZILLA	Forged mail pretending to be from Mozilla
score T_FORGED_MUA_MOZILLA	1.0

# Hmm... maybe possible to use a variant on the check_outlook_timestamp_token
# test for the time component of the MOZILLA rules. - Allen
# Dec 24 2002 jm: probably worth a try.

header __MOZILLA_MSGID2         MESSAGEID =~ /^<[A-F\d]{8}\.[A-F\d]{4,8}\@\S+>$/m
meta T_FORGED_MUA_MOZILLA2      (__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID2)
describe T_FORGED_MUA_MOZILLA2  Forged mail pretending to be from Mozilla (2)
score T_FORGED_MUA_MOZILLA2     1.0

header __MOZILLA_MSGID3         MESSAGEID =~ /^<[A-F\d]{8}\.[A-F1-9][A-F\d]{0,7}\@\S+>$/m
meta T_FORGED_MUA_MOZILLA3      (__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID3)
describe T_FORGED_MUA_MOZILLA3  Forged mail pretending to be from Mozilla (3)
score T_FORGED_MUA_MOZILLA3     1.0

########################################################################

# Dec 18 2002 jm:
# pretty good, will promote it tomorrow once Allen's had a look at
# excluding his FPs
# 12/23 - tvd - not bad for everyone except me where it's really a ham sign. :|
#  mail from twig (webmail) seem to be most of the fps, let's try a third ?
# daf          0.000   0.0000   0.0000    0.500   0.11    1.00  T_IDENT_NOBODY
# easmith      0.024   0.0363   0.0210    0.634   0.23    1.00  T_IDENT_NOBODY
# jm           0.136   0.4598   0.0000    1.000   0.96    1.00  T_IDENT_NOBODY
# quinlan      0.270   0.6923   0.0000    1.000   0.93    1.00  T_IDENT_NOBODY
# rODbegbie    0.000   0.0000   0.0000    0.500   0.12    1.00  T_IDENT_NOBODY
# theo         0.091   0.0071   0.1442    0.047   0.00    1.00  T_IDENT_NOBODY
# easmith      0.008   0.0363   0.0000    1.000   0.92    0.01  T_IDENT_NOBODY2
# quinlan      0.270   0.6923   0.0000    1.000   0.93    0.01  T_IDENT_NOBODY2
# rODbegbie    0.000   0.0000   0.0000    0.500   0.12    0.01  T_IDENT_NOBODY2
# theo         0.088   0.0071   0.1397    0.048   0.00    0.01  T_IDENT_NOBODY2
header __IDENT_NOBODY		Received =~ /ident[:=]nobody\b/i
header __REGSITE_COM		Received =~ /\.registeredsite\.com\s/
meta T_IDENT_NOBODY		(__IDENT_NOBODY && !__REGSITE_COM)
describe T_IDENT_NOBODY		Message was sent by nobody
score T_IDENT_NOBODY		1.0
# Allen's version
header __X_BEENTHERE		exists:X-BeenThere
meta T_IDENT_NOBODY2		(__IDENT_NOBODY && !__REGSITE_COM && !((FORGOTTEN_PASSWORD + SUBJECT_IS_LIST + __X_BEENTHERE + KNOWN_MAILING_LIST) > 1))
# Theo's version
header __IDENT_NOBODY_LOCALHOST Received =~ /\bident[:=]nobody\@localhost\b/i
meta T_IDENT_NOBODY3		(__IDENT_NOBODY && !__IDENT_NOBODY_LOCALHOST && !__REGSITE_COM && !((FORGOTTEN_PASSWORD + SUBJECT_IS_LIST + __X_BEENTHERE + KNOWN_MAILING_LIST) > 1))

##############################################################################

# Nov 12 2002 jm: not keen on this.  many ISPs do not provide rDNS these
# days as policy. stupid policy, but there we are. and SpamAssassin policy
# is not to punish users with stupid ISPs...
#
# Dec 20 2002 jm: should make fantastic meta-fodder though. ;)
#
#freqs: 11.817  22.1680   5.3554    0.805   0.53    0.01  T_SENDER_NO_REVERSE
header   T_SENDER_NO_REVERSE    eval:check_for_sender_no_reverse()
describe T_SENDER_NO_REVERSE    No reverse lookup for sender's IP

# Here are some tests for weird double quoting in the body (I tried 37
# variations, these are the best 10, in rough order best RANK to worst
# RANK). - quinlan
# P.S. I feel really icky after writing these.
body T_BODY_QUOTES_01	/(["'])\1\S{0,15}(["'])\1/
body T_BODY_QUOTES_02	/(["']{2})\S{0,15}\1/
body T_BODY_QUOTES_03	/(["'\222\223\224\262\263\271])\1\S{0,15}(["'\222\223\224\262\263\271])\1/
body T_BODY_QUOTES_04	/(["'\222\223\224\262\263\271]{2})\S{0,15}\1/
body T_BODY_QUOTES_05	/['\222\223\224\262\263\271]{2}\S{0,15}['\222\223\224\262\263\271]{2}/
body T_BODY_QUOTES_06	/["'\222\223\224\262\263\271]{2}.{0,15}["\222\223\224\262\263\271]{2}/
body T_BODY_QUOTES_07	/(["'\222\223\224\262\263\271]{2}).{0,15}\1/
body T_BODY_QUOTES_08	/(["'])\1.{0,15}(["'])\1/
body T_BODY_QUOTES_09	/(["']{2}).{0,15}\1/
body T_BODY_QUOTES_10	/(["'\222\223\224\262\263\271])\1.{0,15}(["'\222\223\224\262\263\271])\1/

#bug 1010
body T_CHECK_EMAIL_ISFREE	eval:check_email_isfree()
describe T_CHECK_EMAIL_ISFREE Body contains an e-mail address listed by Email::IsFree

# numeric mailto
# Dec 20 2002 jm: my FPs *do not* contain this pattern! does.. not.. compute...
# ok, it's the implicit addition of "mailto:" for mail-addr lookalikes, which
# also includes user@host CVSroot specs etc.  Let's try using a rawbody pattern.
# 12/22 - tvd - most people don't have any hits, only jm (.33%) and quinlan (.02%)
# I say drop it - jm
rawbody T_NUMERIC_MAILTO_ADDR	/\bmailto:[^\s\@]{1,20}\@\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/is

# bug 1014
# from Allen
# 12/20 - Not great, but looks ok, what say ye?  - tvd
# sounds like it's worth something.  maybe combined with from_webmail
# type meta subrule...
# daf		0.000   0.0000   0.0000    0.500   0.11    0.01  T_FROM_HAS_UNDERLINE_NUMS
# easmith	0.107   0.4216   0.0210    0.953   0.80    0.01  T_FROM_HAS_UNDERLINE_NUMS
# jm		0.460   1.2612   0.1220    0.912   0.73    0.01  T_FROM_HAS_UNDERLINE_NUMS
# quinlan	0.484   1.2217   0.0130    0.989   0.90    0.01  T_FROM_HAS_UNDERLINE_NUMS
# rODbegbie	0.471   1.4918   0.0600    0.961   0.86    0.01  T_FROM_HAS_UNDERLINE_NUMS
# theo		0.540   1.2008   0.1308    0.902   0.68    0.01  T_FROM_HAS_UNDERLINE_NUMS
header __FROM_HAS_UNDERLINE_NUMS	From =~ /_\S?(?:[a-z]+\w*?\d+|\d+\w*?[a-z]+)\w*\@/i
meta T_FROM_HAS_UNDERLINE_NUMS		(!T_REPLY_TO_HAS_UNDERLINE_NUMS && __FROM_HAS_UNDERLINE_NUMS)
describe T_FROM_HAS_UNDERLINE_NUMS	From: contains an underline and numbers/letters

# Specific whitelisting for GradFinder.  They use the sender's own
# From addr, so whitelist_from_rcvd won't cut it
# bug 1241
# 12/23 - 0 hits for anyone - tvd
header __GRADF_MSGID	Message-ID =~ /\@gradfinder.com>$/
header __GRADF_RCVD	Received =~ /from \S+ \(\S+.friendfinder.com \[216\.34\./
meta T_VIA_GRADFINDER	(__GRADF_RCVD && __GRADF_MSGID)
tflags T_VIA_GRADFINDER	nice

# bug 1171
# Listproc - Allen (example: nonspam:<199811090515.AAA28259@chem.harvard.edu>)
# 12/22 - hits a lot for allen (4.3%), a tiny amount for theo (0.05%), and that's it. - tvd
header T_LISTPROC1		X-Listprocessor-version =~ /^\s*(?:\d\.)+\w*\s+--\s+List[Pp]roc(?:essor)?\b/
score T_LISTPROC1		-0.01
tflags T_LISTPROC1		nice

# 12/22 - hits some for allen (0.42%), a tiny amount for theo (0.01%), and that's it. - tvd
header __FROM_LISTPROC		From =~ /\blistproc\@/i
header __REPLY_LISTPROC		Reply-To =~ /\blistproc\@/i
header __SENDER_LISTPROC	Sender =~ /\blistproc\@/i
meta T_LISTPROC2		T_LISTPROC1 && __FROM_LISTPROC && (__REPLY_LISTPROC || __SENDER_LISTPROC)
score T_LISTPROC2		-0.01
tflags T_LISTPROC2		nice

# bug 1010
# 12/22 - 2.59% hits for quinlan, 0 for others - tvd
uri T_SUPER_BARGAINS_URL	/\bsuper-bargains\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_FANTASTIC_BARGAIN_URL	/\bfantastic-bargain\.com/
# 12/22 - 4.83% for Allen, 0 for others - tvd
uri T_KAVKAZCENTER_URL		/\bkavkazcenter\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_FINESTOFFERS_URL		/\bfinestoffers\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_AEOPUBLISHING_URL		/\baeopublishing\.com/
# 12/22 - 0.47% for quinlan, 0 for others - tvd
uri T_SKY08_URL			/\bsky08\.com/
# 12/22 - 2.07% for allen, 0.11% for rod, 0.06% for theo - tvd
uri T_E_MAILPROMO_URL		/\be-mailpromo\.net/
# 12/22 - 0.06% for quinlan, 0 for others - tvd
uri T_MARINEDIGITAL_URL		/\bmarinedigital\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_ITSREMARKABLE_URL		/\bitsremarkable\.com/
#
# 12/22 - 2.59% for quinlan, 0 for others - tvd
uri T_SUPER_BARGAINS_MAILTO	/mailto:\S+[.@]super-bargains\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_FANTASTIC_BARGAIN_MAILTO	/mailto:\S+[.@]fantastic-bargain\.com/
# 12/23 - 4.83% for allen, 0 for others - tvd
uri T_KAVKAZCENTER_MAILTO	/mailto:\S+[.@]kavkazcenter\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_FINESTOFFERS_MAILTO	/mailto:\S+[.@]finestoffers\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_AEOPUBLISHING_MAILTO	/mailto:\S+[.@]aeopublishing\.com/
# 12/22 - 0.47% for quinlan, 0 for others - tvd
uri T_SKY08_MAILTO		/mailto:\S+[.@]sky08\.com/
# 12/22 - 2.07% for allen, 0.10% for rod, 0.05% for theo - tvd
uri T_E_MAILPROMO_MAILTO	/mailto:\S+[.@]e-mailpromo\.net/
# 12/22 - 0.06% for quinlan, 0 for others - tvd
uri T_MARINEDIGITAL_MAILTO	/mailto:\S+[.@]marinedigital\.com/
# 12/22 - 0 hits for anyone - tvd
uri T_ITSREMARKABLE_MAILTO	/mailto:\S+[.@]itsremarkable\.com/

########################################################################

# bug 1308
# somewhat less-expensive version
# 12/24 - works well for allen and justin, horrible for me (S/O 0.7) - tvd
header T_SUSPICIOUS_RECIPS	ToCc =~ /(@[-a-z0-9_.]{2,}).{0,64}(?:\1.{0,64}){8,}/is

# fast replacement for SUSPICIOUS_RECIPS and VERY_SUSP_RECIPS
# please don't hate me, I'm exploring the space now:
# - L is length of user or host required for similarity
# - C is count of addresses required
header T_SUSPECT_RECIPIENTS_L1C4_0	eval:check_recipients('0.0','0.2','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_1	eval:check_recipients('0.2','0.4','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_2	eval:check_recipients('0.4','0.6','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_3	eval:check_recipients('0.6','0.8','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_4	eval:check_recipients('0.8','1.0','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_5	eval:check_recipients('1.0','1.2','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_6	eval:check_recipients('1.2','1.4','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_7	eval:check_recipients('1.4','1.6','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_8	eval:check_recipients('1.6','1.8','1','4')
header T_SUSPECT_RECIPIENTS_L1C4_9	eval:check_recipients('1.8','undef','1','4')

header T_SUSPECT_RECIPIENTS_L1C5_0	eval:check_recipients('0.0','0.2','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_1	eval:check_recipients('0.2','0.4','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_2	eval:check_recipients('0.4','0.6','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_3	eval:check_recipients('0.6','0.8','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_4	eval:check_recipients('0.8','1.0','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_5	eval:check_recipients('1.0','1.2','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_6	eval:check_recipients('1.2','1.4','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_7	eval:check_recipients('1.4','1.6','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_8	eval:check_recipients('1.6','1.8','1','5')
header T_SUSPECT_RECIPIENTS_L1C5_9	eval:check_recipients('1.8','undef','1','5')

header T_SUSPECT_RECIPIENTS_L1C6_0	eval:check_recipients('0.0','0.2','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_1	eval:check_recipients('0.2','0.4','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_2	eval:check_recipients('0.4','0.6','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_3	eval:check_recipients('0.6','0.8','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_4	eval:check_recipients('0.8','1.0','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_5	eval:check_recipients('1.0','1.2','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_6	eval:check_recipients('1.2','1.4','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_7	eval:check_recipients('1.4','1.6','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_8	eval:check_recipients('1.6','1.8','1','6')
header T_SUSPECT_RECIPIENTS_L1C6_9	eval:check_recipients('1.8','undef','1','6')

header T_SUSPECT_RECIPIENTS_L2C4_0	eval:check_recipients('0.0','0.2','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_1	eval:check_recipients('0.2','0.4','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_2	eval:check_recipients('0.4','0.6','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_3	eval:check_recipients('0.6','0.8','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_4	eval:check_recipients('0.8','1.0','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_5	eval:check_recipients('1.0','1.2','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_6	eval:check_recipients('1.2','1.4','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_7	eval:check_recipients('1.4','1.6','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_8	eval:check_recipients('1.6','1.8','2','4')
header T_SUSPECT_RECIPIENTS_L2C4_9	eval:check_recipients('1.8','undef','2','4')

header T_SUSPECT_RECIPIENTS_L2C5_0	eval:check_recipients('0.0','0.2','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_1	eval:check_recipients('0.2','0.4','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_2	eval:check_recipients('0.4','0.6','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_3	eval:check_recipients('0.6','0.8','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_4	eval:check_recipients('0.8','1.0','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_5	eval:check_recipients('1.0','1.2','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_6	eval:check_recipients('1.2','1.4','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_7	eval:check_recipients('1.4','1.6','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_8	eval:check_recipients('1.6','1.8','2','5')
header T_SUSPECT_RECIPIENTS_L2C5_9	eval:check_recipients('1.8','undef','2','5')

header T_SUSPECT_RECIPIENTS_L2C6_0	eval:check_recipients('0.0','0.2','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_1	eval:check_recipients('0.2','0.4','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_2	eval:check_recipients('0.4','0.6','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_3	eval:check_recipients('0.6','0.8','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_4	eval:check_recipients('0.8','1.0','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_5	eval:check_recipients('1.0','1.2','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_6	eval:check_recipients('1.2','1.4','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_7	eval:check_recipients('1.4','1.6','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_8	eval:check_recipients('1.6','1.8','2','6')
header T_SUSPECT_RECIPIENTS_L2C6_9	eval:check_recipients('1.8','undef','2','6')

header T_SUSPECT_RECIPIENTS_L3C4_0	eval:check_recipients('0.0','0.2','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_1	eval:check_recipients('0.2','0.4','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_2	eval:check_recipients('0.4','0.6','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_3	eval:check_recipients('0.6','0.8','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_4	eval:check_recipients('0.8','1.0','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_5	eval:check_recipients('1.0','1.2','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_6	eval:check_recipients('1.2','1.4','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_7	eval:check_recipients('1.4','1.6','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_8	eval:check_recipients('1.6','1.8','3','4')
header T_SUSPECT_RECIPIENTS_L3C4_9	eval:check_recipients('1.8','undef','3','4')

header T_SUSPECT_RECIPIENTS_L3C5_0	eval:check_recipients('0.0','0.2','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_1	eval:check_recipients('0.2','0.4','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_2	eval:check_recipients('0.4','0.6','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_3	eval:check_recipients('0.6','0.8','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_4	eval:check_recipients('0.8','1.0','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_5	eval:check_recipients('1.0','1.2','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_6	eval:check_recipients('1.2','1.4','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_7	eval:check_recipients('1.4','1.6','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_8	eval:check_recipients('1.6','1.8','3','5')
header T_SUSPECT_RECIPIENTS_L3C5_9	eval:check_recipients('1.8','undef','3','5')

header T_SUSPECT_RECIPIENTS_L3C6_0	eval:check_recipients('0.0','0.2','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_1	eval:check_recipients('0.2','0.4','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_2	eval:check_recipients('0.4','0.6','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_3	eval:check_recipients('0.6','0.8','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_4	eval:check_recipients('0.8','1.0','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_5	eval:check_recipients('1.0','1.2','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_6	eval:check_recipients('1.2','1.4','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_7	eval:check_recipients('1.4','1.6','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_8	eval:check_recipients('1.6','1.8','3','6')
header T_SUSPECT_RECIPIENTS_L3C6_9	eval:check_recipients('1.8','undef','3','6')

########################################################################

# a few random rules
header T_RATWARE_MASS_SENDER		X-Mailer =~ /Advanced Mass Sender/i
header T_RATWARE_DIRECT_EMAIL		X-Mailer =~ /Direct Email/i
header T_RATWARE_MAILWORKZ		X-Mailer =~ /\bMailWorkZ\b/i
header T_X_BULKMAIL			exists:X-Bulkmail

# possible additions to NIGERIA rules
body T_SCAM_419_1		/MOHAMMED(?:\.|=2e)?\s?ABACHA/i
body T_SCAM_419_2		/(?:government|bank) of nigeria/i
body T_SCAM_419_3		/nigerian? (?:national|government)/i

# Dec 24 2002 jm: random check
uri T_BARGAIN_URL		/bargains?\.(?:com|biz)/
uri T_PROMO_URL			/promo(?:|tion)s?\.(?:com|biz)/

# bug 765, 12/23 -tvd
body	ENTER_TO_LOSE		/\benter to win\b/i
describe ENTER_TO_LOSE		Has 'enter to win' but you lose privacy.

# bug 881, 12/23 -tvd
# possible replacements for MARKETING_PARTNERS
body T_MARKETING_PARTNERS  /(?:marketing|network) partner|partner site/i
describe T_MARKETING_PARTNERS     Claims you registered with some kind of partner
body T_MARKETING_PARTNERS_2  /(?:marketing|network) partner|partner (?:web)?site/i
describe T_MARKETING_PARTNERS_2    Claims you registered with some kind of partner

# to try fixing the overlap between the two rules (bug 786)
# DEAR_SOMEBODY has a bad S/O, I'm tempted to remove it, but want to
# see if this helps any first.
# 12/23-tvd
body __DEAR_SOMEBODY              /Dear [A-Z][a-z]+/
meta T_DEAR_SOMEBODY              __DEAR_SOMEBODY && !DEAR_SOMETHING

# WEIRD_PORT hits http://www.cnn.com:USArticle1840@www.liquidshirts.com/
# which actually doesn't have a weird port in it.
uri      T_WEIRD_PORT     m{https?://[^/\s]+?:(?:[^8][^0]|\d|\d\d\d+)(?:/|\s|$)}

# T_USERPASS looks for a username and (optional) password in an url
# per bug 1273
# 12/23-tvd
uri      T_USERPASS     m{https?://[^/\s]+?(?::.+?)?\@}
