# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
###########################################################################

# should be fixed now
# updated per bug 1217
# %%% INVALID_MSGID
# Dec 17 2002 jm: added subtest since part of my corpus has no msgid
# Dec 17 2002 jm: btw, one FP is for
# <41340.2001:770:18:1:250:4ff:feea:4364.1028136205.squirrel@webmail.heanet.ie>,
# ie an IPv6 address in the msgid.  Not sure if that's interesting or not ;)

# Dec 24 2002 jm: ok, I think we should drop these... not really getting
# around the FPs

header __VALID_MSGID MESSAGEID =~ /^<(?:[a-zA-Z0-9.,!\#\$%&'*\+\/=?\^_{}|~-]+|\".+\")\@(?:[a-zA-Z0-9_.-]+|\[\d{1,3}(?:\.\d{1,3}){3}\])>(?:\s*\(.*\))?\s*$/m [if-unset: <NO@MSGID>]
header __HAS_MSGID		MESSAGEID =~ /\S/
meta T_INVALID_MSGID		__HAS_MSGID && !__VALID_MSGID
describe T_INVALID_MSGID	Message-Id is not valid, according to RFC 2822
#
# quinlan: If this has a better S/O for others (all of my FPs are from the
# same person), it should be an eval so this can be done properly: strip
# comments on each Message-Id header, then use regular expression.
# Dec 18 2002 jm: S/Os aren't much better for others, but I think we should
# do it that way anyway.
#
header __MSGID_COMMENT		MESSAGEID =~ /\(.*\)/m
meta T_INVALID_MSGID2		__HAS_MSGID && !(__VALID_MSGID || __MSGID_COMMENT)

# 12/28 - tvd - The INVALID_MSGID FPs for me are all of these forms:
# <01BC978F.2BBAA120@user@wpi.edu>
# <19990807175443731.AAD379@mail.motherboardx.com@[209.172.141.151]>
# <20021210_@TLZ99369095_@TLZ>
# <20010914114843.SM01072@>
# <110E55CD141679-01@E*Trade_Bank_Mail_Administrator>
# <libSDtMail.9709191456.9353.mcross@rebound/rebound>
# <pid10027.1999.April.29.12:15.830789.@egroups.com>
# In looking at the RFC, the first 3 are invalid (multiple '@' chars).
# The 4th one is invalid because there's nothing after the '@'.
# 5 and 6 are valid. (aka: actual fps)
# 7 is invalid because there is a colon (:) in the id part.
# the two valid fps are because we need the same character set after the @ as we had before it.  'msg-id' is defined
# as dot-atom-text '@' dot-atom-text (not including the folded whitespace or obsolete versions).

header __VALID_MSGID2 MESSAGEID =~ /^<(?:[a-zA-Z0-9.,!\#\$%&'*\+\/=?\^_{}|~-]+|\".+\")\@(?:[a-zA-Z0-9.,!\#\$%&'*\+\/=?\^_{}|~-]+|\[\d{1,3}(?:\.\d{1,3}){3}\])>(?:\s*\(.*\))?\s*$/m [if-unset: <NO@MSGID>]
meta T_INVALID_MSGID3		__HAS_MSGID && !__VALID_MSGID2
meta T_INVALID_MSGID4		__HAS_MSGID && !(__VALID_MSGID2 || __MSGID_COMMENT)

# 12/28 - quinlan - my attempt at interpreting RFC 2822 in such a way
# that we might get a good hit rate.  This is not as picky as the above
# rules, but may have much fewer FPs and still catch all of the really
# bad offenders.  I wish RFC 2822 allowed a smaller set of characters
# here.  The idea here is to not worry about the exact set of special
# characters that are allowed, but to focus on the really bad ones.
header __SANE_MSGID_1	MESSAGEID =~ /^<\S+\@\S+>\s*$/m
header __SANE_MSGID_2	MESSAGEID =~ /^<[^ \t\n\r\x0b\x80-\xff]+\@[^ \t\n\r\x0b\x80-\xff]+>\s*$/m
header __SANE_MSGID_3	MESSAGEID =~ /^<[^<> \t\n\r\x0b\x80-\xff]+\@[^<> \t\n\r\x0b\x80-\xff]+>\s*$/m
header __SANE_MSGID_4	MESSAGEID =~ /^<(?:\S+|\".+\")\@(?:\S+|\[\d{1,3}(?:\.\d{1,3}){3}\])>\s*$/m [if-unset: <NO@MSGID>]
header __SANE_MSGID_5	MESSAGEID =~ /^<(?:\S+|\".+\")+\@(?:\S+|\[\d{1,3}(?:\.\d{1,3}){3}\])>\s*$/m [if-unset: <NO@MSGID>]
#
header __SPECIAL_MSGID		MESSAGEID =~ /\(.*\)|\".*\"/m
#
meta T_INVALID_MSGID5		__HAS_MSGID && !(__SANE_MSGID_1 || __MSGID_COMMENT)
meta T_INVALID_MSGID6		__HAS_MSGID && !(__SANE_MSGID_1 || __SPECIAL_MSGID)
meta T_INVALID_MSGID7		__HAS_MSGID && !(__SANE_MSGID_2 || __MSGID_COMMENT)
meta T_INVALID_MSGID8		__HAS_MSGID && !(__SANE_MSGID_2 || __SPECIAL_MSGID)
meta T_INVALID_MSGID9		__HAS_MSGID && !(__SANE_MSGID_3 || __MSGID_COMMENT)
meta T_INVALID_MSGID10		__HAS_MSGID && !(__SANE_MSGID_3 || __SPECIAL_MSGID)
meta T_INVALID_MSGID11		__HAS_MSGID && !(__SANE_MSGID_4 || __MSGID_COMMENT)
meta T_INVALID_MSGID12		__HAS_MSGID && !(__SANE_MSGID_4 || __SPECIAL_MSGID)
meta T_INVALID_MSGID13		__HAS_MSGID && !(__SANE_MSGID_5 || __MSGID_COMMENT)
meta T_INVALID_MSGID14		__HAS_MSGID && !(__SANE_MSGID_5 || __SPECIAL_MSGID)

# these rules may need to factor in ok_languages or ok_locales
# Dec 18 2002 jm: but how? ;)  They are ready to be promoted otherwise
#freqs:  0.084   0.2047   0.0095    0.956   0.84    0.01  T_BODY_UNPRINTABLE
body T_BODY_UNPRINTABLE		/[\x00-\x07\x0b\x0c\x0e-\x1f\x7f]{3,}/
describe T_BODY_UNPRINTABLE	Body includes 3 consecutive unprintable characters

########################################################################
# bug 1106: forged MUAs
# only needed a \b around the shortest X-Mailer regular expressions

# Mozilla
# Dec 10 2002 jm: dan, you have fps for this, could you check 'em?
#
# 12/26 quinlan: my FPs are fixed now, all three versions of the rule
# have zero FPs for me now, only easmith benefits a very small amount
# from versions 2 and 3.
#
header __MOZILLA_MUA		X-Mailer =~ /\bMozilla\b/
header __MOZILLA_MSGID		MESSAGEID =~ /^<[A-F\d]{8}\.[A-F\d]{4,8}\@\S+>$/
meta T_FORGED_MUA_MOZILLA	(__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID)
describe T_FORGED_MUA_MOZILLA	Forged mail pretending to be from Mozilla
score T_FORGED_MUA_MOZILLA	1.0

# Hmm... maybe possible to use a variant on the check_outlook_timestamp_token
# test for the time component of the MOZILLA rules. - Allen
# Dec 24 2002 jm: probably worth a try.
# 12/26 quinlan: see above
header __MOZILLA_MSGID2         MESSAGEID =~ /^<[A-F\d]{8}\.[A-F\d]{4,8}\@\S+>$/m
meta T_FORGED_MUA_MOZILLA2      (__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID2)
describe T_FORGED_MUA_MOZILLA2  Forged mail pretending to be from Mozilla (2)
score T_FORGED_MUA_MOZILLA2     1.0

# 12/26 quinlan: see above
header __MOZILLA_MSGID3         MESSAGEID =~ /^<[A-F\d]{8}\.[A-F1-9][A-F\d]{0,7}\@\S+>$/m
meta T_FORGED_MUA_MOZILLA3      (__MOZILLA_MUA && !__UNUSABLE_MSGID && !__MOZILLA_MSGID3)
describe T_FORGED_MUA_MOZILLA3  Forged mail pretending to be from Mozilla (3)
score T_FORGED_MUA_MOZILLA3     1.0

########################################################################

# Nov 12 2002 jm: not keen on this.  many ISPs do not provide rDNS these
# days as policy. stupid policy, but there we are. and SpamAssassin policy
# is not to punish users with stupid ISPs...
#
# Dec 20 2002 jm: should make fantastic meta-fodder though. ;)
#
#freqs: 11.817  22.1680   5.3554    0.805   0.53    0.01  T_SENDER_NO_REVERSE
header   T_SENDER_NO_REVERSE    eval:check_for_sender_no_reverse()
describe T_SENDER_NO_REVERSE    No reverse lookup for sender's IP

#bug 1010
body T_CHECK_EMAIL_ISFREE	eval:check_email_isfree()
describe T_CHECK_EMAIL_ISFREE Body contains an e-mail address listed by Email::IsFree

########################################################################
# bug 1192

header __HAS_OUTLOOK_IN_MAILER2	X-Mailer =~ /Microsoft (CDO|Outlook)\b/
meta T_MISSING_OUTLOOK_NAME	((__HAS_MIMEOLE || __HAS_MSMAIL_PRI) && __HAS_X_MAILER && !__HAS_OUTLOOK_IN_MAILER2)

########################################################################

rawbody T_MIME_DEFICIENT_QP	eval:check_for_mime('mime_qp_illegal')
describe T_MIME_DEFICIENT_QP	Deficient quoted-printable encoding in body

########################################################################

# bug 1316
# 12/28 - tvd - The goal is to catch when spammers use multiple user agents
# we had a similar rule before for preemption, but now there's actually a report of this in the wild,
# so I wanted to put the rule in and see what happens.
# This will change USER_AGENT as well
# Basically exists:User-Agent && !FAKE_USER_AGENT
meta T_FAKE_USER_AGENT ( USER_AGENT_PINE + USER_AGENT_MUTT + USER_AGENT_MOZILLA_UA + USER_AGENT_MOZILLA_XM + USER_AGENT_MACOE + USER_AGENT_ENTOURAGE + USER_AGENT_KMAIL + USER_AGENT_IMP + USER_AGENT_TONLINE + USER_AGENT_APPLEMAIL + USER_AGENT_GNUS_UA + USER_AGENT_GNUS_XM + USER_AGENT_VM + USER_AGENT_MSN + USER_AGENT_FORTE + USER_AGENT_XIMIAN ) > 1

# bug 1316
# 12/28 - tvd - someone mentioned that there's a standard to the mutt
# message-id.  Sure enough, unless mutt is compiled to send messages anonymously:
# From 0.93.2 - 1.2.5.1, it was essentially:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.%c%d@%s>",
#            tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour,
#            tm->tm_min, tm->tm_sec, MsgIdPfx, getpid (), fqdn);
#  MsgIdPfx = (MsgIdPfx == 'Z') ? 'A' : MsgIdPfx + 1;
# The code from mutt 1.4 is adds a 'G' for some reason:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.G%c%d@%s>",
header __VALID_MUTT_MSGID	Message-Id =~ /^<[1-9]\d{3}[01]\d[0-3]\d[0-2]\d(?:[0-5]\d){2}\.G?[A-Z]\d+\@[a-zA-Z0-9._-]+>$/
header __USER_AGENT_MUTT	User-Agent =~ m@^Mutt/\d(?:\.\d+){1,4}@
meta T_USER_AGENT_MUTT		__USER_AGENT_MUTT && __VALID_MUTT_MSGID
meta T_FORGED_MUA_MUTT		__USER_AGENT_MUTT && !__VALID_MUTT_MSGID
