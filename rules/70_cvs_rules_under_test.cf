# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the Artistic License or the GNU General
# Public License as published by the Free Software Foundation; either
# version 1 of the License, or (at your option) any later version.
#
# See the file "License" in the top level of the SpamAssassin source
# distribution for more details.
#
###########################################################################

header T_DATE_SPAMWARE_Y2K		Date =~ /^[A-Z][a-z]{2}, \d\d [A-Z][a-z]{2} [0-6]\d \d\d:\d\d:\d\d [A-Z]{3}$/
describe T_DATE_SPAMWARE_Y2K		Date header uses unusual Y2K formatting

# quinlan: I worked at a company that used CorporateTime which very annoyingly
# always used an ISO-8859-1 encoded header even when the Subject: did not have
# a non-ASCII character.  I think other false positives are likely due to
# similarly broken software.
# jm: I notice that all my FPs are gw'd thru IMS; let's try that.
header __SUBJ_BASE64			Subject:raw =~ /=\?[^\?]+\?B\?/
header __SUBJ_QP			Subject:raw =~ /=\?[^\?]+\?Q\?/
header __SUBJ_HAS_NON_ASCII		Subject =~ /[\x00-\x06\x0e-\x1f\x80-\xff]/
header __RCVD_IMS			Received =~ /Internet\s+Mail\s+Service/
meta T_UNNECESSARY_SUBJ_B64_ENCODING	(__SUBJ_BASE64 && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
meta T_UNNECESSARY_SUBJ_QP_ENCODING	(__SUBJ_QP && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
describe T_UNNECESSARY_SUBJ_B64_ENCODING Subject encoded to hide from filters (B64)
describe T_UNNECESSARY_SUBJ_QP_ENCODING Subject encoded to hide from filters (QP)

# A new spamware creates invalid Date stamps, using printf ("%d:%d:%d").
# Catch it here (assuming one of the above doesn't catch it anyway).
# NOTE: __XM_BAD_DATE_MUAS is used below
header __DATE_TIME_INVALID	Date =~ /\s(?!\d\d:\d\d:\d\d)\d{1,2}:\d{1,2}:\d{1,2}\s/
header __XM_BAD_DATE_MUAS	X-Mailer =~ /(?:FoxMail|EMUmail|TFS Secure Messaging|sendEmail|EarthLink MailBox \d\.\d)/i
meta T_INVALID_DATE_HMS		(__DATE_TIME_INVALID && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_HMS	Date header does not use valid HH:MM:SS formatting

# possible replacement for INVALID_DATE.
# NOTE: uses __XM_BAD_DATE_MUAS from above
# rfc822:                       date-time =          [ day-of-week "," ]         (day / obs-day)                 month                           (year / obs-year)   hour ":" minute [ ":" second ]       (zone / obs-zone)          [ comment ]
header __INVALID_DATE		Date !~ /^\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), )?[0-3 ]?[0-9] (?:Jan|Feb|Ma[ry]|Apr|Ju[nl]|Aug|Sep|Oct|Nov|Dec) (?:19|20)?[0-9]{2} [0-2][0-9](?:\:[0-5][0-9]){1,2} (?:[+-][0-9]{4}|UT|[A-Z]{2,3}T)(?:\s+\(.*\))?\s*$/ [if-unset: Mon, 24 Feb 2003 09:30 +0100 (mss)]
header __XM_FOXMAIL		X-Mailer =~ /FoxMail/
meta T_INVALID_DATE_2		(__INVALID_DATE && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_2	Invalid Date: header (not RFC 2822)

# Wierd.  Can only assume this is caused by PEBKAC on the sending side...
meta T_HTML_WITHOUT_HTML_1	(MIME_HTML_ONLY && !HTML_MESSAGE)
describe T_HTML_WITHOUT_HTML_1	Claims to be HTML, but there is no HTML text
# uses __MIME_HTML test from below and eval in EvalTests.pm (at least for now)
meta T_HTML_WITHOUT_HTML_2	(__MIME_HTML && !HTML_MESSAGE)
describe T_HTML_WITHOUT_HTML_2	Claims to be HTML, but there is no HTML text

# 2003-02-23: quinlan
# bug 1376: HTML without <!DOCTYPE> from mailers that always use <!DOCTYPE>
#
# Note: some variations of this rule actually perform better, but they all
# overlap 96-100% with MIME_HTML_ONLY whereas this variation adds real value
# and has a high hit rate.
body __HTML_TAG_EXISTS_DOCTYPE	eval:html_tag_exists('!doctype')
meta T_MIME_HTML_NO_DOCTYPE	(__MIME_HTML && !__HTML_TAG_EXISTS_DOCTYPE)

# 2003-02-25: quinlan
# Whee... more HTML tests!
# Note: these use __MIME_HTML, we might need to exempt MIME attachments from
# that rule
# Apr 22 2003 jm: removed __TAG_EXISTS_DIV from OUTLOOK, as 'MS Exchange
# Server version 6.0.4630.0' does not insert that, causing FPs
header __ANY_OUTLOOK_MUA	X-Mailer =~ /^Microsoft Outlook\b/
header __ANY_QUALCOMM_MUA	X-Mailer =~ /^QUALCOMM\b/
meta T_HTML_FAKED_OUTLOOK	(__ANY_OUTLOOK_MUA && __MIME_HTML && !(__TAG_EXISTS_BODY && __TAG_EXISTS_HEAD && __TAG_EXISTS_HTML && __TAG_EXISTS_META))
# my FPs for this should hopefully be fixed now
meta T_HTML_FAKED_QUALCOMM	(__ANY_QUALCOMM_MUA && __MIME_HTML && !__TAG_EXISTS_HTML)

# MIME Content-Transfer-Encoding control rules
rawbody T_MIME_BASE64			eval:check_for_mime('t_mime_base64_count')
rawbody T_MIME_QP			eval:check_for_mime('t_mime_qp_count')

# 2003-03-06: quinlan
rawbody T_MIME_BASE64_BLANKS		eval:check_for_mime('t_mime_base64_blanks')
rawbody T_MIME_BASE64_ILLEGAL		eval:check_for_mime('t_mime_base64_illegal')
rawbody T_MIME_BASE64_WITHOUT_NAME	eval:check_for_mime('t_mime_base64_without_name')
rawbody T_MIME_QP_INLINE_NO_CHARSET	eval:check_for_mime('t_mime_qp_inline_no_charset')

# bug 1380
meta T_FAKED_THEBAT		(__THEBAT_MUA && __MIME_HTML_ONLY)

# quinlan: 2003-03-15
# these all appear in the same low-scoring spammer for me, but they
# might differ for others so I'm trying some different URLs, check
# overlap in others' results before committing anything
#
# quinlan: 2003-03-28: does ANYONE other than me have any hits for these?
#
# Apr  1 2003 jm: constantcontact is a spamtool, also used in legit mailouts
# by a Java company :(
#
# 2003-05-05 quinlan: reduced to shorter list of high S/O rules that hit
# more than just me, not sure if any are worth it
header T_CONSTANTCONTACT		ALL =~ /\bconstantcontact\.com\b/i
header T_ROVING_COM			ALL =~ /\broving\.com\b/i
uri T_RS6_NET_URL			/\brs6\.net\b/i

# bug 1394, possible replacement for ORDER_NOW
body T_ORDER_NOW                  /\border (?:now|soon|fast|quickly|while|today)\b/i
# Apr  1 2003 jm: not so good... more hits, but lower accuracy
#  1.268   3.8907   0.0761    0.981   0.92    0.00  ORDER_NOW
#  1.549   4.7343   0.1009    0.979   0.91    0.01  T_ORDER_NOW
# May  8 2003 tvd: I get the opposite actually on the total results:
#  1.148   3.2493   0.0987    0.971   0.88    0.01  T_ORDER_NOW
#  0.882   2.4935   0.0766    0.970   0.88    0.00  ORDER_NOW


uri      T_HTTP_EXCESSIVE_ENTITIES m{^https?://\S*\&\#(?:0?3[0-9]|0?[46][1-9a-f]|0?[57][\da])}i
describe T_HTTP_EXCESSIVE_ENTITIES Completely unnecessary %-escapes inside a URL

# RFC2822 violations
#header T_HEADER_COUNT_BAD_DATE		eval:check_header_count_range('Date','2','999')
#header T_HEADER_COUNT_BAD_FROM		eval:check_header_count_range('From','2','999')
#header T_HEADER_COUNT_BAD_SENDER	eval:check_header_count_range('Sender','2','999')
#header T_HEADER_COUNT_BAD_REPLYTO	eval:check_header_count_range('Reply-To','2','999')
#header T_HEADER_COUNT_BAD_MESSAGEID	eval:check_header_count_range('Message-Id','2','999')
#header T_HEADER_COUNT_BAD_INREPLYTO	eval:check_header_count_range('In-Reply-To','2','999')
#header T_HEADER_COUNT_BAD_REFERENCES	eval:check_header_count_range('References','2','999')
#header T_HEADER_COUNT_BAD_SUBJECT	eval:check_header_count_range('Subject','2','999')
# multiple To/Cc/Bcc headers are obsolete in RFC 2822, but they are still
# frequently used and RFC 2822 says they should still be supported.  Cc:
# generates many false positives.
#header T_HEADER_COUNT_BAD_TO		eval:check_header_count_range('To','2','999')
#header T_HEADER_COUNT_BAD_CC		eval:check_header_count_range('Cc','2','999')
#header T_HEADER_COUNT_BAD_BCC		eval:check_header_count_range('Bcc','2','999')
# There doesn't seem to be a RFC restriction, but these should only show up
# once in ham
header T_HEADER_COUNT_BAD_CTYPE		eval:check_header_count_range('Content-Type','2','999')
#header T_HEADER_COUNT_BAD_CTE		eval:check_header_count_range('Content-Transfer-Encoding','2','999')

body T_BLANK_LINE_RATIO_04_70_80	eval:check_blank_line_ratio('70','80','4')
body T_BLANK_LINE_RATIO_04_80_90	eval:check_blank_line_ratio('80','90','4')
body T_BLANK_LINE_RATIO_04_90_92	eval:check_blank_line_ratio('90','92','4')
body T_BLANK_LINE_RATIO_04_92_94	eval:check_blank_line_ratio('92','94','4')
body T_BLANK_LINE_RATIO_04_94_96	eval:check_blank_line_ratio('94','96','4')
body T_BLANK_LINE_RATIO_04_96_98	eval:check_blank_line_ratio('96','98','4')
body T_BLANK_LINE_RATIO_04_98_100	eval:check_blank_line_ratio('98','100','4')
body T_BLANK_LINE_RATIO_04_70_100	eval:check_blank_line_ratio('70','100','4')

###########################################################################

# tvd - 2003.02.26, trying to strengthen the anti-ratware rules

meta T_FORGED_USER_AGENT	( __USER_AGENT_PINE + __T_USER_AGENT_MUTT + __T_USER_AGENT_MOZILLA_UA + __T_USER_AGENT_MOZILLA_XM + __T_USER_AGENT_MACOE + __T_USER_AGENT_ENTOURAGE + __T_USER_AGENT_KMAIL + __T_USER_AGENT_IMP + __USER_AGENT_TONLINE + __USER_AGENT_APPLEMAIL + __USER_AGENT_GNUS_UA + __USER_AGENT_GNUS_XM + __USER_AGENT_VM + __T_USER_AGENT_MSN + __T_USER_AGENT_FORTE + __USER_AGENT_XIMIAN > 1 )

meta T_USER_AGENT                        ( __USER_AGENT && !T_FORGED_USER_AGENT && !__USER_AGENT_PINE && !__T_USER_AGENT_MUTT && !__T_USER_AGENT_MOZILLA_UA && !__T_USER_AGENT_MOZILLA_XM && !__T_USER_AGENT_MACOE && !__T_USER_AGENT_ENTOURAGE && !__T_USER_AGENT_KMAIL && !__T_USER_AGENT_IMP && !__USER_AGENT_TONLINE && !__USER_AGENT_APPLEMAIL && !__USER_AGENT_GNUS_UA && !__USER_AGENT_GNUS_XM && !__USER_AGENT_VM && !__T_USER_AGENT_MSN && !__T_USER_AGENT_FORTE && !__USER_AGENT_XIMIAN )

header __MSGID_PINE	Message-Id =~ /^<Pine\.[A-Z]{3}\.\d\.[0-9A-Z]+\./
meta __USER_AGENT_PINE	__MSGID_PINE && !MIME_HTML_ONLY
meta T_USER_AGENT_PINE		__USER_AGENT_PINE && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_PINE	__MSGID_PINE && !__USER_AGENT_PINE

# From 0.93.2 - 1.2.5.1, message-id is:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.%c%d@%s>",
#            tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour,
#            tm->tm_min, tm->tm_sec, MsgIdPfx, getpid (), fqdn);
#  MsgIdPfx = (MsgIdPfx == 'Z') ? 'A' : MsgIdPfx + 1;
# The code from mutt 1.4 is adds a 'G' for some reason:
#  snprintf (buf, sizeof (buf), "<%d%02d%02d%02d%02d%02d.G%c%d@%s>",
meta __T_USER_AGENT_MUTT	__USER_AGENT_MUTT && __VALID_MUTT_MSGID && !MIME_HTML_ONLY
meta T_USER_AGENT_MUTT		__T_USER_AGENT_MUTT && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_MUTT		__USER_AGENT_MUTT && !__UNUSABLE_MSGID && !__T_USER_AGENT_MUTT

header __USER_AGENT_MOZILLA_UA	User-Agent =~ /^Mozilla\/5\.\d+ \(.*\) Gecko\/\d{8}(?: |$)/
header __MSGID_MOZILLA_UA	Message-Id =~ /^<[0-9A-F]{8}\.\d+\@\S+>$/
meta __T_USER_AGENT_MOZILLA_UA	__USER_AGENT_MOZILLA_UA && __MSGID_MOZILLA_UA
meta T_USER_AGENT_MOZILLA_UA	__T_USER_AGENT_MOZILLA_UA && !T_FORGED_USER_AGENT

header __USER_AGENT_MOZILLA_XM	X-Mailer   =~ /^Mozilla 4\.\d{2} \[[a-z]{2}\]/
header __MSGID_MOZILLA_XM	Message-Id =~ /^<[0-9A-F]{8}\.[0-9A-F]{8}\@\S+>$/
meta __T_USER_AGENT_MOZILLA_XM	__USER_AGENT_MOZILLA_XM && __MSGID_MOZILLA_XM
meta T_USER_AGENT_MOZILLA_XM	__T_USER_AGENT_MOZILLA_XM && !T_FORGED_USER_AGENT

header __USER_AGENT_MACOE	User-Agent =~ /^Microsoft[ -]Outlook[ -]Express[ -]Macintosh[ -]Edition/
meta __T_USER_AGENT_MACOE	__USER_AGENT_MACOE && __MSGID_ENTOURAGE
meta T_USER_AGENT_MACOE		__T_USER_AGENT_MACOE && !T_FORGED_USER_AGENT

header __USER_AGENT_ENTOURAGE	User-Agent =~ /^Microsoft-Entourage\/\d{1,2}(?:\.\d){1,2}\.\d{4}$/
header __MSGID_ENTOURAGE	Message-ID =~ /^<[0-9A-F]{8}\.[0-9A-F]+\%\S+\@\S+>$/
meta __T_USER_AGENT_ENTOURAGE	__USER_AGENT_ENTOURAGE && __MSGID_ENTOURAGE && !MIME_HTML_ONLY
meta T_USER_AGENT_ENTOURAGE	__T_USER_AGENT_ENTOURAGE && !T_FORGED_USER_AGENT

header __USER_AGENT_KMAIL	User-Agent =~ /^KMail\/1\.\d\.\d+$/
header __MSGID_KMAIL		Message-Id =~ /^<[12]\d{3}[01]\d[0-3]\d[0-2]\d[0-5]\d\.\d+\.\S+@\S+>$/
meta __T_USER_AGENT_KMAIL	__USER_AGENT_KMAIL && __MSGID_KMAIL
meta T_USER_AGENT_KMAIL		__T_USER_AGENT_KMAIL && !T_FORGED_USER_AGENT

header __USER_AGENT_IMP		User-Agent =~ /^Internet Messaging Program \(IMP\) [34]\.\d/
header __MSGID_IMP		Message-Id =~ /^<\d{9,10}\.[0-9a-f]{13}\@\S+>$/
meta __T_USER_AGENT_IMP		__USER_AGENT_IMP && __MSGID_IMP
meta T_USER_AGENT_IMP		__T_USER_AGENT_IMP && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_IMP		__USER_AGENT_IMP && !__UNUSABLE_MSGID && !__T_USER_AGENT_IMP

header __USER_AGENT_TONLINE	X-Mailer   =~ /^T-Online (?:e|Web)Mail \d\.\d+$/
meta T_USER_AGENT_TONLINE	__USER_AGENT_TONLINE && !T_FORGED_USER_AGENT

header __USER_AGENT_GNUS_UA	User-Agent =~ /^Gnus\/\d\.\d+ /
meta T_USER_AGENT_GNUS_UA	__USER_AGENT_GNUS_UA && !T_FORGED_USER_AGENT

header __USER_AGENT_GNUS_XM	X-Mailer   =~ /^Gnus v\d(?:\.\d+){1,2}\/X?Emacs \d+\.\d+/
meta T_USER_AGENT_GNUS_XM	__USER_AGENT_GNUS_XM && !T_FORGED_USER_AGENT

header __USER_AGENT_VM		X-Mailer =~ /^\s*VM\s+\d+\.\d+\s+under\s+.{0,30}?[Ee]macs\b/
meta T_USER_AGENT_VM		__USER_AGENT_VM && !T_FORGED_USER_AGENT

# frequently forged, needs some correlation meta checks with other headers.
meta __T_USER_AGENT_MSN		(__USER_AGENT_MSN && __HAS_XOAT && __HAS_XOIP)
meta T_USER_AGENT_MSN		__T_USER_AGENT_MSN && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_MSN		__USER_AGENT_MSN && !T_USER_AGENT_MSN

header __USER_AGENT_FORTE	X-Mailer =~ /^Forte Agent \d\.\d+\/\d+\.\d+$/
header __MSGID_FORTE		Message-Id =~ /^<[0-9a-f]{8}\.\d+\@\S+>$/
meta __T_USER_AGENT_FORTE	__USER_AGENT_FORTE && __MSGID_FORTE
meta T_USER_AGENT_FORTE		__T_USER_AGENT_FORTE && !T_FORGED_USER_AGENT

meta __USER_AGENT_XIMIAN	(__XIMIAN_MSGID && __XIMIAN_MUA)
meta T_USER_AGENT_XIMIAN	__USER_AGENT_XIMIAN && !T_FORGED_USER_AGENT
meta T_FORGED_MUA_XIMIAN	__XIMIAN_MUA && !__UNUSABLE_MSGID && !__USER_AGENT_XIMIAN

# per bug 1373
body __HTML_COMMENT_RATIO_70_80		eval:html_range('total_comment_ratio','0.70','0.80')
body __HTML_COMMENT_RATIO_80_90		eval:html_range('total_comment_ratio','0.80','0.90')
body __HTML_COMMENT_RATIO_90_100	eval:html_range('total_comment_ratio','0.90','0.100')
body __HTML_COMMENT_RATIO_70_100	eval:html_range('total_comment_ratio','0.70','0.100')
meta T_HTML_COMMENT_RATIO_70_80_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_70_80 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_80_90_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_80_90 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_90_100_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_90_100 && MIME_HTML_ONLY
meta T_HTML_COMMENT_RATIO_70_100_MIME_HTML_ONLY		__HTML_COMMENT_RATIO_70_100 && MIME_HTML_ONLY

header T_RATWARE_RCVD_BONUS_SPC	Received =~ /\) by  [a-zA-Z0-9]/
describe T_RATWARE_RCVD_BONUS_SPC Received headers forged (extra spaces)

# quinlan: How much better are these than MIME_HTML_ONLY?  I'm concerned
# it's a bit too easy to create high S/O rules with MIME_HTML_ONLY
meta T_MIME_HTML_NO_HTML_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_HTML
meta T_MIME_HTML_NO_BODY_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_BODY
# but we'll try this anyway
meta T_MIME_HTML_NO_MAJOR_TAG	MIME_HTML_ONLY && !__TAG_EXISTS_HTML && !__TAG_EXISTS_BODY

# 2003-02-23: quinlan
# Message-Id: format tests
# hotmail
header T_MSGID_ADDED_BY_HOTMAIL_1	Message-Id =~ /<MC\d{1,2}-F{1,2}\w{21,22}\@\S*hotmail\.com>/
header T_MSGID_ADDED_BY_HOTMAIL_2	Message-Id =~ /<[A-Z]{2}\d{1,2}-F{1,2}\w{21,22}\@\S*hotmail\.com>/
# 13 hexadecimal digits instead of 12
header T_MSGID_OUTLOOK_HEX	Message-Id =~ /<[a-f0-9]{13}\$[a-f0-9]{8}\$[a-f0-9]{8}\@/
# this one high correlation with ratware "EMWAC SMTPRS"
header T_MSGID_B_DIGITS		Message-Id =~ /<B\d{10}\@/
# looks like spam
header T_MSGID_THREESIXSIX	Message-Id =~ /<\d{3}\.\d{6}\.\d{6}\@\S+>/

# NOTE: uses __ANY_OUTLOOK_MUA.  This catches Send-Safe and a few others
header __OL_STYLE_FROM		From =~ /\".*\" <.+>/
header __VIA_FROM_MANGLER	Received =~ /iPlanet/
meta T_FORGED_MUA_OUTLOOK_FROM	(__ANY_OUTLOOK_MUA && !__OL_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_OUTLOOK_FROM Forged mail pretending to be from Outlook (by From)

# NOTE: uses __ANY_IMS_MUA from above, __CTYPE_HAS_BOUNDARY from 20_ratware.cf
header __IMS_BOUNDARY		Content-Type =~ /\n\s+boundary=\"----_=_NextPart_[\dA-F]+_[\dA-F]+.[\dA-F]+\"/s
meta T_FORGED_IMS_CTYPE		(__ANY_IMS_MUA && __CTYPE_HAS_BOUNDARY && !__IMS_BOUNDARY)
describe T_FORGED_IMS_CTYPE	Forged mail pretending to be from IMS (boundary)

# NOTE: uses __ANY_QUALCOMM_MUA, __VIA_FROM_MANGLER from above
header __EUD_STYLE_FROM		From =~ /^(?:[^\"][^']+[^\"]|\".*\'.*\") <[^>]+>$/
meta T_FORGED_MUA_EUDORA_FROM	(__ANY_QUALCOMM_MUA && !__EUD_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_EUDORA_FROM Forged mail pretending to be from Eudora (by From)

# Thanks to Brian J. Peterson for this
# Catches spams sent by illiterate spammer ("secks", "whoarez" etc.)
header T_RATWARE_MIZSPEELING	eval:check_for_mizspeeling_ratware()
describe T_RATWARE_MIZSPEELING	Sent using spammer tool (mizspeeling)

# quinlan: entire corpus, then last 2000 spam and 2000 ham:
# 18.125  36.2000   0.0500    0.999   0.95    0.01  T_RCVD_IN_MONKEYS_UPL
#  7.766  19.0844   0.0678    0.996   0.94    0.01  T_RCVD_IN_MONKEYS_UPL
header T_RCVD_IN_MONKEYS_UPL	rbleval:check_rbl_txt('relay', 'proxies.relays.monkeys.com.')
describe T_RCVD_IN_MONKEYS_UPL	Received via a relay in proxies.relays.monkeys.com.
tflags T_RCVD_IN_MONKEYS_UPL net

# quinlan: entire corpus, then last 2000 spam and 2000 ham:
#  0.686   1.5620   0.0904    0.945   0.79    0.01  T_RCVD_IN_DYNABLOCK
#  0.775   1.5000   0.0500    0.968   0.82    0.01  T_RCVD_IN_DYNABLOCK
header T_RCVD_IN_DYNABLOCK	rbleval:check_rbl('dynablock-notfirsthop', 'dynablock.wirehub.net.')
tflags T_RCVD_IN_DYNABLOCK	net

# mixed list, still need to check for cost, policies, etc.
header T_RCVD_IN_DEADBEEF	rbleval:check_rbl('deadbeef', 'bl.deadbeef.com.')
header T_RCVD_IN_DNSBLINFO	rbleval:check_rbl('dnsblinfo', 'spamsources.dnsbl.info.')
header T_RCVD_IN_DNSRBLSPAM	rbleval:check_rbl('dnsrblspam', 'spam.dnsrbl.net.')
header T_RCVD_IN_GIPPER	rbleval:check_rbl('gipper', 'proxy.bl.gweep.ca.')
header T_RCVD_IN_INTERSIL	rbleval:check_rbl('intersil', 'blackholes.intersil.net.')
header T_RCVD_IN_RELAYS_KUNDENSERVER	rbleval:check_rbl('kundenserver', 'relays.bl.kundenserver.de.')
header T_RCVD_IN_SPAMSOURCES_FABEL	rbleval:check_rbl('fabel', 'spamsources.fabel.dk.')
header T_RCVD_IN_VOX_SCHPIDER_COM	rbleval:check_rbl('schpider', 'vox.schpider.com.')
header T_RCVD_IN_WSFF		rbleval:check_rbl('wsff', 'will-spam-for-food.eu.org.')
tflags T_RCVD_IN_DEADBEEF net
tflags T_RCVD_IN_DNSBLINFO net
tflags T_RCVD_IN_DNSRBLSPAM net
tflags T_RCVD_IN_GIPPER net
tflags T_RCVD_IN_INTERSIL net
tflags T_RCVD_IN_RELAYS_KUNDENSERVER net
tflags T_RCVD_IN_SPAMSOURCES_FABEL net
tflags T_RCVD_IN_VOX_SCHPIDER_COM net
tflags T_RCVD_IN_WSFF net

# wirehub
header T_RCVD_IN_WIREHUB_BH	rbleval:check_rbl('wirehub', 'blackholes.wirehub.net.')
tflags T_RCVD_IN_WIREHUB_BH net
header T_RCVD_IN_WIREHUB_PROXIES	rbleval:check_rbl('pbwn', 'proxies.blackholes.wirehub.net.')
tflags T_RCVD_IN_WIREHUB_PROXIES net

# OPM sub-tests
# transfers: axfr/ixfr for trusted sites
# url: http://opm.blitzed.org/
# pay-to-use: no
# delist: automatic expiry, no fee, retested on request (free)
header T_RCVD_IN_OPM_WINGATE		rbleval:check_rbl_sub('opm', '1')
tflags T_RCVD_IN_OPM_WINGATE net
header T_RCVD_IN_OPM_SOCKS		rbleval:check_rbl_sub('opm', '2')
tflags T_RCVD_IN_OPM_SOCKS net
header T_RCVD_IN_OPM_HTTP_CONNECT	rbleval:check_rbl_sub('opm', '4')
tflags T_RCVD_IN_OPM_HTTP_CONNECT net
header T_RCVD_IN_OPM_ROUTER		rbleval:check_rbl_sub('opm', '8')
tflags T_RCVD_IN_OPM_ROUTER net
header T_RCVD_IN_OPM_HTTP_POST		rbleval:check_rbl_sub('opm', '16')
tflags T_RCVD_IN_OPM_HTTP_POST net

# fiveten - many blacklists, but only the bulk one performs well
# transfers: not specified, unknown
# url: http://blackholes.five-ten-sg.com/
# pay-to-use: no
# delist: email address contact provided
header __FIVETEN	rbleval:check_rbl('fiveten', 'blackholes.five-ten-sg.com.')
tflags __FIVETEN net
# bulk mailers that don't require confirmed opt-in from their customers,
# or that have have allowed known spammers to become clients.
header T_RCVD_IN_FIVETEN_BULK	rbleval:check_rbl_sub('fiveten', '127.0.0.4')
tflags T_RCVD_IN_FIVETEN_BULK net
# retest all of the rest (since check_rbl_sub wasn't used before)
header T_RCVD_IN_FIVETEN_SPAM	rbleval:check_rbl_sub('fiveten', '127.0.0.2')
tflags T_RCVD_IN_FIVETEN_SPAM net
header T_RCVD_IN_FIVETEN_DIALUP	rbleval:check_rbl('fiveten-notfirsthop', 'blackholes.five-ten-sg.com.', '127.0.0.3')
tflags T_RCVD_IN_FIVETEN_DIALUP net
header T_RCVD_IN_FIVETEN_MULTISTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.5')
tflags T_RCVD_IN_FIVETEN_MULTISTAGE net
header T_RCVD_IN_FIVETEN_SINGLESTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.6')
tflags T_RCVD_IN_FIVETEN_SINGLESTAGE net
header T_RCVD_IN_FIVETEN_SPAMSUPPORT	rbleval:check_rbl_sub('fiveten', '127.0.0.7')
tflags T_RCVD_IN_FIVETEN_SPAMSUPPORT net
header T_RCVD_IN_FIVETEN_WEBFORM	rbleval:check_rbl_sub('fiveten', '127.0.0.8')
tflags T_RCVD_IN_FIVETEN_WEBFORM net
header T_RCVD_IN_FIVETEN_MISC	rbleval:check_rbl_sub('fiveten', '127.0.0.9')
tflags T_RCVD_IN_FIVETEN_MISC net
header T_RCVD_IN_FIVETEN_KLEZ	rbleval:check_rbl_sub('fiveten', '127.0.0.10')
tflags T_RCVD_IN_FIVETEN_KLEZ net
header T_RCVD_IN_FIVETEN_TCPA	rbleval:check_rbl_sub('fiveten', '127.0.0.11')
tflags T_RCVD_IN_FIVETEN_TCPA net
header T_RCVD_IN_FIVETEN_FREE	rbleval:check_rbl_sub('fiveten', '127.0.0.12')
tflags T_RCVD_IN_FIVETEN_FREE net

# some additional osirusoft tests, needs more work
# all osirusoft tests maybe a bad idea, osirusoft web site seems defunct
header T_X_OSIRU_OPT_IN		rbleval:check_rbl_sub('osirusoft', '127.0.0.7')
header T_X_OSIRU_OPEN_PROXY	rbleval:check_rbl_sub('osirusoft', '127.0.0.9')
tflags T_X_OSIRU_OPT_IN net
tflags T_X_OSIRU_OPEN_PROXY net
# repeats?
header T_RCVD_IN_OSRELAY	rbleval:check_rbl('osrelay', 'inputs.relays.osirusoft.com.')
tflags T_RCVD_IN_OSRELAY net
header T_RCVD_IN_OSSRC	rbleval:check_rbl('ossrc', 'spamsources.relays.osirusoft.com.')
tflags T_RCVD_IN_OSSRC net
header T_RCVD_IN_OSSOCKS	rbleval:check_rbl('ossocks', 'socks.relays.osirusoft.com.')
tflags T_RCVD_IN_OSSOCKS net

# SORBS
# transfers: both axfr and ixfr available
# url: http://www.dnsbl.sorbs.net/
# pay-to-use: no
# delist: $50 fee for T_RCVD_IN_SORBS_SPAM, others are retested on request (free)
header T_RCVD_IN_SORBS	rbleval:check_rbl('sorbs', 'dnsbl.sorbs.net.')
tflags T_RCVD_IN_SORBS net
header T_RCVD_IN_SORBS_HTTP	rbleval:check_rbl_sub('sorbs', '127.0.0.2')
tflags T_RCVD_IN_SORBS_HTTP net
header T_RCVD_IN_SORBS_MISC	rbleval:check_rbl_sub('sorbs', '127.0.0.3')
tflags T_RCVD_IN_SORBS_MISC net
header T_RCVD_IN_SORBS_SMTP	rbleval:check_rbl_sub('sorbs', '127.0.0.4')
tflags T_RCVD_IN_SORBS_SMTP net
header T_RCVD_IN_SORBS_SOCKS	rbleval:check_rbl_sub('sorbs', '127.0.0.5')
tflags T_RCVD_IN_SORBS_SOCKS net
header T_RCVD_IN_SORBS_SPAM	rbleval:check_rbl_sub('sorbs', '127.0.0.6')
tflags T_RCVD_IN_SORBS_SPAM net
header T_RCVD_IN_SORBS_WEB	rbleval:check_rbl_sub('sorbs', '127.0.0.7')
tflags T_RCVD_IN_SORBS_WEB net

# bug 1017: domain-based blacklists, experimental
# dsn.rfc-ignorant.org
header T_FROM_IN_RFCI_DSN	rbleval:check_rbl_from('rfci-dsn', 'dsn.rfc-ignorant.org.')
tflags T_FROM_IN_RFCI_DSN net
# bl.deadbeef.com
header T_FROM_IN_DEADBEEF	rbleval:check_rbl_from('deadbeef', 'bl.deadbeef.com.')
tflags T_FROM_IN_DEADBEEF net
# bandwidth-pigs
header T_FROM_IN_PIGS		rbleval:check_rbl_from('pigs', 'bandwidth-pigs.monkeys.com.')
tflags T_FROM_IN_PIGS net

# OK, a whole batch of faked-HELO detection rules.  These work by checking
# for hosts HELOing in a certain domain, but without rDNS matching that.
# these are the most frequently-impersonated headers in my recent corpora...
#
# NOTE: these cannot simply be inverted for a "nice" rule; to do this would
# require checking only the last untrusted line, rather than all of them.
#
header T_FAKE_HELO_YAHOO	eval:check_for_rdns_helo_mismatch("yahoo\.com","yahoo\.com")
header T_FAKE_HELO_NETSCAPE	eval:check_for_rdns_helo_mismatch("netscape\.net","netscape\.net")
header T_FAKE_HELO_YAHOO_CO_UK	eval:check_for_rdns_helo_mismatch("yahoo\.co\.uk","yahoo\.co\.uk")
header T_FAKE_HELO_NETSCAPE_COM	eval:check_for_rdns_helo_mismatch("(?:netscape|netcenter|aol)\.(?:com|net)","netscape\.com")

# 2003-05-03, bugs 1769, 1844: single replacement rule for OBFUSCATING_COMMENT*
rawbody __OBFUSCATING_COMMENT_A	/\w<![^>]*>\w/
rawbody __OBFUSCATING_COMMENT_B	/[^\s>]<![^>]*>[^\s<]/
meta T_OBFUSCATING_COMMENT	((__OBFUSCATING_COMMENT_A && HTML_MESSAGE) || (__OBFUSCATING_COMMENT_B && HTML_MIME_ONLY))

# more for bug 1769
header T_GAPPY_SUBJECT_01	Subject =~ /\b(?:[a-z][\W]{1,3}){4,}/i
header T_GAPPY_SUBJECT_02	Subject =~ /\b(?:[a-z][\W]{1,3}){5,}/i
header T_GAPPY_SUBJECT_03	Subject =~ /\b(?:[a-z][\W]{1,4}){4,}/i
header T_GAPPY_SUBJECT_04	Subject =~ /\b(?:[a-z][\W]{1,4}){5,}/i

uri T_YAHOO_REDIRECTOR		/^http:\/\/rd\.yahoo\.com/i
describe T_YAHOO_REDIRECTOR	Uses commonly-spammed redirector URL

# http://marc.theaimsgroup.com/?l=spamassassin-talk&m=105203882531351&w=2
header T_RATWARE_X_SCANNER	X-Scanner =~ /^: /

header __RATWARE_EXISCAN	X-Scanner =~ /exiscan/
header __RATWARE_ANTIABUSE	X-AntiAbuse =~ /Originator.Caller UID.GID - \[\d \d\] \/ \[\d \d\]/
meta T_RATWARE_EXISCAN_FORGERY	(__RATWARE_EXISCAN && __RATWARE_ANTIABUSE && __HAS_MSMAIL_PRI)

# also, References headers have a format
header T_RATWARE_BAD_REFS	References =~ /^[^<]\S+\$\S+\@\S+[^>]$/

# Gecko ver is 8 digits: "Gecko/20011019"
header T_RATWARE_BAD_GECKO	User-Agent =~ /Gecko\/(?:\d{1,7}|\d{9,})(?:\s|$)/

# hmm, interesting.   Ensure the MUA is using consistent priorities.
# http://www3.cds.ne.jp/~marimo/oka/research/em/data0002.html
header __X_PRI_HI		X-Priority =~ /^[12]/
header __X_PRI_MD		X-Priority =~ /^3/
header __X_PRI_LO		X-Priority =~ /^[456789]/
header __X_MSPRI_HI		X-Msmail-Priority =~ /^High/
header __X_MSPRI_MD		X-Msmail-Priority =~ /^Normal/
header __X_MSPRI_LO		X-Msmail-Priority =~ /^Low/
meta T_X_PRI_MISMATCH_HI	(__X_PRI_HI && __HAS_MSMAIL_PRI && !__X_MSPRI_HI)
meta T_X_PRI_MISMATCH_MD	(__X_PRI_MD && __HAS_MSMAIL_PRI && !__X_MSPRI_MD)
meta T_X_PRI_MISMATCH_LO	(__X_PRI_LO && __HAS_MSMAIL_PRI && !__X_MSPRI_LO)

