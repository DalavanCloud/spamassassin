# SpamAssassin rules file: CVS rules under test, $Revision: 1.519 $
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of either the Artistic License or the GNU General
# Public License as published by the Free Software Foundation; either
# version 1 of the License, or (at your option) any later version.
#
# See the file "License" in the top level of the SpamAssassin source
# distribution for more details.
#
###########################################################################

# quinlan: I worked at a company that used CorporateTime which very annoyingly
# always used an ISO-8859-1 encoded header even when the Subject: did not have
# a non-ASCII character.  I think other false positives are likely due to
# similarly broken software.
# jm: I notice that all my FPs are gw'd thru IMS; let's try that.
header __SUBJ_BASE64			Subject:raw =~ /=\?[^\?]+\?B\?/
header __SUBJ_QP			Subject:raw =~ /=\?[^\?]+\?Q\?/
header __SUBJ_HAS_NON_ASCII		Subject =~ /[\x00-\x06\x0e-\x1f\x80-\xff]/
header __RCVD_IMS			Received =~ /Internet\s+Mail\s+Service/
meta T_UNNECESSARY_SUBJ_B64_ENCODING	(__SUBJ_BASE64 && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
meta T_UNNECESSARY_SUBJ_QP_ENCODING	(__SUBJ_QP && !__SUBJ_HAS_NON_ASCII && !__RCVD_IMS)
describe T_UNNECESSARY_SUBJ_B64_ENCODING Subject encoded to hide from filters (B64)
describe T_UNNECESSARY_SUBJ_QP_ENCODING Subject encoded to hide from filters (QP)

# A new spamware creates invalid Date stamps, using printf ("%d:%d:%d").
# Catch it here (assuming one of the above doesn't catch it anyway).
# NOTE: __XM_BAD_DATE_MUAS is used below
header __DATE_TIME_INVALID	Date =~ /\s(?!\d\d:\d\d:\d\d)\d{1,2}:\d{1,2}:\d{1,2}\s/
header __XM_BAD_DATE_MUAS	X-Mailer =~ /(?:FoxMail|EMUmail|TFS Secure Messaging|sendEmail|EarthLink MailBox \d\.\d)/i
meta T_INVALID_DATE_HMS		(__DATE_TIME_INVALID && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_HMS	Date header does not use valid HH:MM:SS formatting

# possible replacement for INVALID_DATE.
# NOTE: uses __XM_BAD_DATE_MUAS from above
# rfc822:                       date-time =          [ day-of-week "," ]         (day / obs-day)                 month                           (year / obs-year)   hour ":" minute [ ":" second ]       (zone / obs-zone)          [ comment ]
header __INVALID_DATE		Date !~ /^\s*(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), )?[0-3 ]?[0-9] (?:Jan|Feb|Ma[ry]|Apr|Ju[nl]|Aug|Sep|Oct|Nov|Dec) (?:19|20)?[0-9]{2} [0-2][0-9](?:\:[0-5][0-9]){1,2} (?:[+-][0-9]{4}|UT|[A-Z]{2,3}T)(?:\s+\(.*\))?\s*$/ [if-unset: Mon, 24 Feb 2003 09:30 +0100 (mss)]
header __XM_FOXMAIL		X-Mailer =~ /FoxMail/
meta T_INVALID_DATE_2		(__INVALID_DATE && !__XM_BAD_DATE_MUAS)
describe T_INVALID_DATE_2	Invalid Date: header (not RFC 2822)

# Wierd.  Can only assume this is caused by PEBKAC on the sending side...
meta T_HTML_WITHOUT_HTML_1	(__MIME_HTML && !__TAG_EXISTS_HTML)
meta T_HTML_WITHOUT_HTML_2	(__MIME_HTML && !(__TAG_EXISTS_HTML && HTML_MESSAGE))
meta T_HTML_WITHOUT_HTML_3	(__MIME_HTML && !(__TAG_EXISTS_HTML || HTML_MESSAGE))
describe T_HTML_WITHOUT_HTML	Claims to be HTML, but there is no HTML text

# 2003-05-15
# possible replacements for current HTML_IMAGE_WEB_BUGS test
body T_HTML_IMAGE_WEB_BUGS_0	eval:html_test('t_image_web_bugs_0')
body T_HTML_IMAGE_WEB_BUGS_1	eval:html_test('t_image_web_bugs_1')
body T_HTML_IMAGE_WEB_BUGS_2	eval:html_test('t_image_web_bugs_2')
body T_HTML_IMAGE_WEB_BUGS_3	eval:html_test('t_image_web_bugs_3')
body T_HTML_IMAGE_WEB_BUGS_4	eval:html_test('t_image_web_bugs_4')

# possible replacements for current HTML_WEB_BUGS test
body T_HTML_WEB_BUGS_0		eval:html_test('t_web_bugs_0')
body T_HTML_WEB_BUGS_1		eval:html_test('t_web_bugs_1')
body T_HTML_WEB_BUGS_2		eval:html_test('t_web_bugs_2')
body T_HTML_WEB_BUGS_3		eval:html_test('t_web_bugs_3')
body T_HTML_WEB_BUGS_4		eval:html_test('t_web_bugs_4')

# 2003-02-25: quinlan
# Whee... more HTML tests!
# Note: these use __MIME_HTML, we might need to exempt MIME attachments from
# that rule
# Apr 22 2003 jm: removed __TAG_EXISTS_DIV from OUTLOOK, as 'MS Exchange
# Server version 6.0.4630.0' does not insert that, causing FPs
# my FPs for this should hopefully be fixed now
# ... place with brother rule in 20_ratware.cf
header __ANY_QUALCOMM_MUA	X-Mailer =~ /^QUALCOMM\b/
meta T_FORGED_QUALCOMM_TAGS	(__ANY_QUALCOMM_MUA && __MIME_HTML && !__TAG_EXISTS_HTML)

# quinlan: 2003-03-15
# these all appear in the same low-scoring spammer for me, but they
# might differ for others so I'm trying some different URLs, check
# overlap in others' results before committing anything
#
# quinlan: 2003-03-28: does ANYONE other than me have any hits for these?
#
# Apr  1 2003 jm: constantcontact is a spamtool, also used in legit mailouts
# by a Java company :(
#
# 2003-05-05 quinlan: reduced to shorter list of high S/O rules that hit
# more than just me, not sure if any are worth it
header T_CONSTANTCONTACT		ALL =~ /\bconstantcontact\.com\b/i
header T_ROVING_COM			ALL =~ /\broving\.com\b/i
uri T_RS6_NET_URL			/\brs6\.net\b/i

uri      T_HTTP_EXCESSIVE_ENTITIES m{^https?://\S*\&\#(?:0?3[0-9]|0?[46][1-9a-f]|0?[57][\da])}i
describe T_HTTP_EXCESSIVE_ENTITIES Completely unnecessary %-escapes inside a URL

###########################################################################

header T_RATWARE_RCVD_BONUS_SPC	Received =~ /\) by  [a-zA-Z0-9]/
describe T_RATWARE_RCVD_BONUS_SPC Received headers forged (extra spaces)

# 2003-02-23: quinlan
# Message-Id: format tests
# hotmail (this rule makes me nervous, I wonder if any of us gets
# enough hotmail ham to get a good score for it)
header T_MSGID_ADDED_BY_HOTMAIL	Message-Id =~ /<MC\d{1,2}-F{1,2}\w{21,22}\@\S*hotmail\.com>/
# 13 hexadecimal digits instead of 12
header T_MSGID_OUTLOOK_HEX	Message-Id =~ /<[a-f0-9]{13}\$[a-f0-9]{8}\$[a-f0-9]{8}\@/
# this one high correlation with ratware "EMWAC SMTPRS"
header T_MSGID_B_DIGITS		Message-Id =~ /<B\d{10}\@/
# pretty good spamware sign, looks like it uses random numbers with no padding
#   Message-Id: <\d{1,3}\.\d{1,6}\.\d{1,6}@\S+>h
#   usually also has INVALID_DATE and NO_REAL_NAME
# this rule excludes about 0.02% of matches since some low random
# numbers in the second or third part will be missed.
header T_MSGID_THREESIXSIX_03	Message-Id =~ /<\d{1,3}\.\d{3,6}\.\d{3,6}\@\S+>/

# NOTE: uses __ANY_OUTLOOK_MUA.  This catches Send-Safe and a few others
header __OL_STYLE_FROM		From =~ /\".*\" <.+>/
header __VIA_FROM_MANGLER	Received =~ /iPlanet/
meta T_FORGED_MUA_OUTLOOK_FROM	(__ANY_OUTLOOK_MUA && !__OL_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_OUTLOOK_FROM Forged mail pretending to be from Outlook (by From)

# NOTE: uses __ANY_IMS_MUA from above, __CTYPE_HAS_BOUNDARY from 20_ratware.cf
header __IMS_BOUNDARY		Content-Type =~ /\n\s+boundary=\"----_=_NextPart_[\dA-F]+_[\dA-F]+.[\dA-F]+\"/s
meta T_FORGED_IMS_CTYPE		(__ANY_IMS_MUA && __CTYPE_HAS_BOUNDARY && !__IMS_BOUNDARY)
describe T_FORGED_IMS_CTYPE	Forged mail pretending to be from IMS (boundary)

# NOTE: uses __ANY_QUALCOMM_MUA, __VIA_FROM_MANGLER from above
header __EUD_STYLE_FROM		From =~ /^(?:[^\"][^']+[^\"]|\".*\'.*\") <[^>]+>$/
meta T_FORGED_MUA_EUDORA_FROM	(__ANY_QUALCOMM_MUA && !__EUD_STYLE_FROM && !__VIA_FROM_MANGLER)
describe T_FORGED_MUA_EUDORA_FROM Forged mail pretending to be from Eudora (by From)

# mixed list, still need to check for cost, policies, etc.
header T_RCVD_IN_DNSBLINFO	rbleval:check_rbl('dnsblinfo', 'spamsources.dnsbl.info.')
header T_RCVD_IN_DNSRBLSPAM	rbleval:check_rbl('dnsrblspam', 'spam.dnsrbl.net.')
header T_RCVD_IN_GIPPER	rbleval:check_rbl('gipper', 'proxy.bl.gweep.ca.')
header T_RCVD_IN_INTERSIL	rbleval:check_rbl('intersil', 'blackholes.intersil.net.')
header T_RCVD_IN_RELAYS_KUNDENSERVER	rbleval:check_rbl('kundenserver', 'relays.bl.kundenserver.de.')
header T_RCVD_IN_SPAMSOURCES_FABEL	rbleval:check_rbl('fabel', 'spamsources.fabel.dk.')
header T_RCVD_IN_VOX_SCHPIDER_COM	rbleval:check_rbl('schpider', 'vox.schpider.com.')
header T_RCVD_IN_WSFF		rbleval:check_rbl('wsff', 'will-spam-for-food.eu.org.')
tflags T_RCVD_IN_DNSBLINFO net
tflags T_RCVD_IN_DNSRBLSPAM net
tflags T_RCVD_IN_GIPPER net
tflags T_RCVD_IN_INTERSIL net
tflags T_RCVD_IN_RELAYS_KUNDENSERVER net
tflags T_RCVD_IN_SPAMSOURCES_FABEL net
tflags T_RCVD_IN_VOX_SCHPIDER_COM net
tflags T_RCVD_IN_WSFF net

# easynet.nl (formerly wirehub.net)
header T_RCVD_IN_EASYNET_DYNABLOCK	rbleval:check_rbl('dynablock-notfirsthop', 'dynablock.easynet.nl.')
tflags T_RCVD_IN_EASYNET_DYNABLOCK net
header T_RCVD_IN_EASYNET_BLACKHOLES	rbleval:check_rbl('easynet', 'blackholes.easynet.nl.')
tflags T_RCVD_IN_EASYNET_BLACKHOLES net
header T_RCVD_IN_EASYNET_PROXIES	rbleval:check_rbl('pben', 'proxies.blackholes.easynet.nl.')
tflags T_RCVD_IN_EASYNET_PROXIES net

# NJABL sub-tests
header T_RCVD_IN_NJABL_SPAM_SRC	rbleval:check_rbl_sub('njabl', '127.0.0.4')
describe T_RCVD_IN_NJABL_SPAM_SRC	DNSBL: sender is confirmed spam source
tflags T_RCVD_IN_NJABL_SPAM_SRC	net
header T_RCVD_IN_NJABL_MULTI_STAGE	rbleval:check_rbl_sub('njabl', '127.0.0.5')
describe T_RCVD_IN_NJABL_MULTI_STAGE	DNSBL: sent through multi-stage open relay
tflags T_RCVD_IN_NJABL_MULTI_STAGE	net 
header T_RCVD_IN_NJABL_CGI	rbleval:check_rbl_sub('njabl', '127.0.0.8')
describe T_RCVD_IN_NJABL_CGI	DNSBL: sender is an open formmail
tflags T_RCVD_IN_NJABL_CGI	net
header T_RCVD_IN_NJABL_PROXY	rbleval:check_rbl_sub('njabl', '127.0.0.9')
describe T_RCVD_IN_NJABL_PROXY	DNSBL: sender is an open proxy
tflags T_RCVD_IN_NJABL_PROXY	net

# OPM sub-tests
# transfers: axfr/ixfr for trusted sites
# url: http://opm.blitzed.org/
# pay-to-use: no
# delist: automatic expiry, no fee, retested on request (free)
header T_RCVD_IN_OPM_WINGATE		rbleval:check_rbl_sub('opm', '1')
tflags T_RCVD_IN_OPM_WINGATE net
header T_RCVD_IN_OPM_SOCKS		rbleval:check_rbl_sub('opm', '2')
tflags T_RCVD_IN_OPM_SOCKS net
header T_RCVD_IN_OPM_HTTP_CONNECT	rbleval:check_rbl_sub('opm', '4')
tflags T_RCVD_IN_OPM_HTTP_CONNECT net
header T_RCVD_IN_OPM_ROUTER		rbleval:check_rbl_sub('opm', '8')
tflags T_RCVD_IN_OPM_ROUTER net
header T_RCVD_IN_OPM_HTTP_POST		rbleval:check_rbl_sub('opm', '16')
tflags T_RCVD_IN_OPM_HTTP_POST net

# fiveten - many blacklists, the bulk one performs well
# transfers: yes, most of the slave servers allow zone transfers
# url: http://blackholes.five-ten-sg.com/
# pay-to-use: no
# delist: email address contact provided
header T_RCVD_IN_FIVETEN	rbleval:check_rbl('fiveten', 'blackholes.five-ten-sg.com.')
tflags T_RCVD_IN_FIVETEN net
# bulk mailers that don't require confirmed opt-in from their customers,
# or that have have allowed known spammers to become clients.
header T_RCVD_IN_FIVETEN_BULK	rbleval:check_rbl_sub('fiveten', '127.0.0.4')
tflags T_RCVD_IN_FIVETEN_BULK net
# retest all of the rest (since check_rbl_sub wasn't used before)
header T_RCVD_IN_FIVETEN_SPAM	rbleval:check_rbl_sub('fiveten', '127.0.0.2')
tflags T_RCVD_IN_FIVETEN_SPAM net
header T_RCVD_IN_FIVETEN_DIALUP	rbleval:check_rbl('fiveten-notfirsthop', 'blackholes.five-ten-sg.com.', '127.0.0.3')
tflags T_RCVD_IN_FIVETEN_DIALUP net
header T_RCVD_IN_FIVETEN_MULTISTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.5')
tflags T_RCVD_IN_FIVETEN_MULTISTAGE net
header T_RCVD_IN_FIVETEN_SINGLESTAGE	rbleval:check_rbl_sub('fiveten', '127.0.0.6')
tflags T_RCVD_IN_FIVETEN_SINGLESTAGE net
header T_RCVD_IN_FIVETEN_SPAMSUPPORT	rbleval:check_rbl_sub('fiveten', '127.0.0.7')
tflags T_RCVD_IN_FIVETEN_SPAMSUPPORT net
header T_RCVD_IN_FIVETEN_WEBFORM	rbleval:check_rbl_sub('fiveten', '127.0.0.8')
tflags T_RCVD_IN_FIVETEN_WEBFORM net
header T_RCVD_IN_FIVETEN_MISC	rbleval:check_rbl_sub('fiveten', '127.0.0.9')
tflags T_RCVD_IN_FIVETEN_MISC net
header T_RCVD_IN_FIVETEN_KLEZ	rbleval:check_rbl_sub('fiveten', '127.0.0.10')
tflags T_RCVD_IN_FIVETEN_KLEZ net
header T_RCVD_IN_FIVETEN_TCPA	rbleval:check_rbl_sub('fiveten', '127.0.0.11')
tflags T_RCVD_IN_FIVETEN_TCPA net
header T_RCVD_IN_FIVETEN_FREE	rbleval:check_rbl_sub('fiveten', '127.0.0.12')
tflags T_RCVD_IN_FIVETEN_FREE net

# some additional osirusoft tests, needs more work
# all osirusoft tests maybe a bad idea, osirusoft web site seems defunct
header T_RCVD_IN_OSIRU_OPT_IN		rbleval:check_rbl_sub('osirusoft', '127.0.0.7')
header T_RCVD_IN_OSIRU_OPEN_PROXY	rbleval:check_rbl_sub('osirusoft', '127.0.0.9')
tflags T_RCVD_IN_OSIRU_OPT_IN net
tflags T_RCVD_IN_OSIRU_OPEN_PROXY net
# repeats?
header T_RCVD_IN_OSSRC	rbleval:check_rbl('ossrc', 'spamsources.relays.osirusoft.com.')
tflags T_RCVD_IN_OSSRC net

# SORBS
# transfers: both axfr and ixfr available
# url: http://www.dnsbl.sorbs.net/
# pay-to-use: no
# delist: $50 fee for T_RCVD_IN_SORBS_SPAM, others are retested on request (free)
header T_RCVD_IN_SORBS	rbleval:check_rbl('sorbs', 'dnsbl.sorbs.net.')
tflags T_RCVD_IN_SORBS net
header T_RCVD_IN_SORBS_HTTP	rbleval:check_rbl_sub('sorbs', '127.0.0.2')
tflags T_RCVD_IN_SORBS_HTTP net
header T_RCVD_IN_SORBS_MISC	rbleval:check_rbl_sub('sorbs', '127.0.0.3')
tflags T_RCVD_IN_SORBS_MISC net
header T_RCVD_IN_SORBS_SMTP	rbleval:check_rbl_sub('sorbs', '127.0.0.4')
tflags T_RCVD_IN_SORBS_SMTP net
header T_RCVD_IN_SORBS_SOCKS	rbleval:check_rbl_sub('sorbs', '127.0.0.5')
tflags T_RCVD_IN_SORBS_SOCKS net
header T_RCVD_IN_SORBS_SPAM	rbleval:check_rbl_sub('sorbs', '127.0.0.6')
tflags T_RCVD_IN_SORBS_SPAM net
header T_RCVD_IN_SORBS_WEB	rbleval:check_rbl_sub('sorbs', '127.0.0.7')
tflags T_RCVD_IN_SORBS_WEB net
header T_RCVD_IN_SORBS_BLOCK	rbleval:check_rbl_sub('sorbs', '127.0.0.8')
tflags T_RCVD_IN_SORBS_BLOCK net
header T_RCVD_IN_SORBS_ZOMBIE	rbleval:check_rbl_sub('sorbs', '127.0.0.9')
tflags T_RCVD_IN_SORBS_ZOMBIE net

# some dial-up lists that seem decent, worth testing some more
header T_RCVD_IN_DUL_BOFH rbleval:check_rbl('pdl-notfirsthop', 'pdl.bofh.it.')
header T_RCVD_IN_DUN_DNSRBL rbleval:check_rbl('dun-notfirsthop', 'dun.dnsrbl.net.')
header T_RCVD_IN_DUL_AUPADS rbleval:check_rbl('duinv-notfirsthop', 'duinv.aupads.org.')
tflags T_RCVD_IN_DUL_BOFH net
tflags T_RCVD_IN_DUN_DNSRBL net
tflags T_RCVD_IN_DUL_AUPADS net

# bug 1017: domain-based blacklists, experimental
# dsn.rfc-ignorant.org
header T_DNS_FROM_RFCI_DSN	rbleval:check_rbl_from_host('rfci-dsn', 'dsn.rfc-ignorant.org.')
tflags T_DNS_FROM_RFCI_DSN net

# DO NOT USE - DELETE BEFORE RELEASE: this is a test rule to verify that
# we are testing at least one IP address per spam
header T_RCVD_IN_ALL	rbleval:check_rbl('xxx', 'blocked.secnap.net.')
tflags T_RCVD_IN_ALL net
score T_RCVD_IN_ALL 0.001

# bug 1733: SenderBase
# sa.senderbase.org for SpamAssassin queries
# test.senderbase.org for everything else (until SenderBase is in production)
header __SENDERBASE rbleval:check_rbl_txt('senderbase', 'sa.senderbase.org.')
tflags __SENDERBASE net

# SenderBase test rule, should have same results as RCVD_IN_BONDEDSENDER
header T_RCVD_IN_BONDEDSENDER rbleval:check_rbl_sub('senderbase', 'defined(S45) && S45 eq "Y"')
tflags T_RCVD_IN_BONDEDSENDER net

# OK, a whole batch of faked-HELO detection rules.  These work by checking
# for hosts HELOing in a certain domain, but without rDNS matching that.
# these are the most frequently-impersonated headers in my recent corpora...
#
# NOTE: these cannot simply be inverted for a "nice" rule; to do this would
# require checking only the last untrusted line, rather than all of them.
#
header T_FAKE_HELO_YAHOO	eval:check_for_rdns_helo_mismatch("yahoo\.com","yahoo\.com")
header T_FAKE_HELO_NETSCAPE_COM	eval:check_for_rdns_helo_mismatch("(?:netscape|netcenter|aol)\.(?:com|net)","netscape\.com")

# http://marc.theaimsgroup.com/?l=spamassassin-talk&m=105203882531351&w=2
header T_RATWARE_X_SCANNER	X-Scanner =~ /^: /

header __RATWARE_EXISCAN	X-Scanner =~ /exiscan/
header __RATWARE_ANTIABUSE	X-AntiAbuse =~ /Originator.Caller UID.GID - \[\d \d\] \/ \[\d \d\]/
meta T_RATWARE_EXISCAN_FORGERY	(__RATWARE_EXISCAN && __RATWARE_ANTIABUSE && __HAS_MSMAIL_PRI)

# also, References headers have a format
header T_RATWARE_BAD_REFS	References =~ /^[^<]\S+\$\S+\@\S+[^>]$/

# hmm, interesting.   Ensure the MUA is using consistent priorities.
# http://www3.cds.ne.jp/~marimo/oka/research/em/data0002.html
header __X_PRI_HI		X-Priority =~ /^[12]/
header __X_PRI_MD		X-Priority =~ /^3/
header __X_PRI_LO		X-Priority =~ /^[456789]/
header __X_MSPRI_HI		X-Msmail-Priority =~ /^High/
header __X_MSPRI_MD		X-Msmail-Priority =~ /^Normal/
header __X_MSPRI_LO		X-Msmail-Priority =~ /^Low/
meta T_X_PRI_MISMATCH_HI	(__X_PRI_HI && __HAS_MSMAIL_PRI && !__X_MSPRI_HI)
meta T_X_PRI_MISMATCH_MD	(__X_PRI_MD && __HAS_MSMAIL_PRI && !__X_MSPRI_MD)
meta T_X_PRI_MISMATCH_LO	(__X_PRI_LO && __HAS_MSMAIL_PRI && !__X_MSPRI_LO)

# bug 1801
uri T_IP_LINK_PLUS	/^https?\:\/\/(?:\S*\@)?\d+\.\d+\.\d+\.\d+.{0,20}(?:cgi|click|ads|id\=)/i
describe T_IP_LINK_PLUS		Dotted-decimal IP address followed by GCI, clickthru, etc.

# works on old email okay
uri T_YAHOO_REDIR		/^https?\:\/\/rd\.yahoo\.com\/(?:[0-9]{4,}|partner\b|dir\b)/i
describe T_YAHOO_REDIR		Yahoo Redirect

# Justin says Yahoo stopped using this hostname entirely (which makes me
# wonder if spammers will still use it and whether it will work on our
# older corpus mail)
uri T_YAHOO_REDIRECTOR		/^https?:\/\/rd\.yahoo\.com/i
describe T_YAHOO_REDIRECTOR	Uses commonly-spammed redirector URL

uri T_BIZ_LINKS			/(?:^https?\:\/\/|^mailto\:).{0,20}\.bi?z/i
describe T_BIZ_LINKS		Links to .biz .bz

uri T_MORTGAGE_LINKS		/(?:^https?\:\/\/|^mailto\:).{0,20}(?:low|about)mortgage/i
describe T_MORTGAGE_LINKS		Links to discount mortgage spammers

uri T_STRANGE_CHAR_LINKS		/^https?\:\/\/.{0,20}(?:[%@]|=2E)/i
describe T_STRANGE_CHAR_LINKS	Links with strange characters

uri T_SEX_BANNED_LINKS	/(?:^https?\:\/\/|^mailto\:).{0,15}(?:hugefist|enlargepills|yourpenis|freakyfarm|latex-teens|animalobsession|bukkakehouse)/i
describe T_SEX_BANNED_LINKS	Links to Sex Sites

uri T_SEX_PHRASE_LINKS	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:bimbos|farmsex|porn.*mail|girls4u|cumslut)/i
describe T_SEX_PHRASE_LINKS	Links with Sex Phrases

uri T_SUSPICIOUS_LINKS	/(?:^https?\:\/\/|^mailto\:).{0,25}(?:poker\.net|get-deal|bargain[zs\-]|clicks|spree|members\=|lotto|offer[sz]|4you)/i
describe T_SUSPICIOUS_LINKS	Links containing suspicious phrases

uri T_BANNED_LINKS1	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:needanewjob|valodata|jutan|bridgewater|youngblue|rocketfibre|shopnow|affistats|priceisright|compare-lender)/i
describe T_BANNED_LINKS1		Links to Banned Companies 1

uri T_BANNED_LINKS2	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:ientry|mybill|dyfyi|farmsex|affinitycommerce|unsecured-credit|e-centives|fyi01|clicktrack|emailads|zizi|vistaprint)/i
describe T_BANNED_LINKS2		Links to Banned Companies 2

uri T_BANNED_LINKS3	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:radarline|optilc|biosweep|dealnetwork|myobmail|yourvling|xeemo|incestuals|mnjmtech|escript|m0rtage)/i
describe T_BANNED_LINKS3		Links to Banned Companies 3

uri T_BANNED_LINKS4	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:ltracker|premiumsmail|rxmedical|bannedcd|raveonmail|postdirect|5moni|gammae|freeht|ns-hosting|domainsforeveryone)/i
describe T_BANNED_LINKS4		Links to Banned Companies 4

uri T_BANNED_LINKS5	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:freedigitalppv|fastbustzone|dailycomnet|zoanmail|ew01|executive-level|cyberforce|adserver|flipside.com|faqchat)/i
describe T_BANNED_LINKS5		Links to Banned Companies 5

uri T_BANNED_LINKS6	/(?:^https?\:\/\/|^mailto\:).{0,20}(?:dforyi|totemmail|addsaturation)/i
describe T_BANNED_LINKS6		Links to Banned Companies 6

rawbody T_HREF_3D			/(?:href|src)=3D\"/i
describe T_HREF_3D		Uses href=3D Trick

# bug 1876
rawbody		T_PUSHHERELINK		/<a[^>]*>[^<]*((push|go)\s(here|this) |cease.{1,10}mail)[^<]*<\/a>/i
describe	T_PUSHHERELINK		Link asks you to "push here" or "go here" or "cease mail" or the like

uri 		T_DOLLARMACHINE 		/dollar.?machine/i
uri 		T_HITBOX 			/hitbox\.com/i

# bug 1900
body		T_BETTERMEMORY		/Better Memory/i
describe	T_BETTERMEMORY		Describes "better memory"

# idea from Robert Menschel <RMSA@Menschel.net>
header T_FROM_MIXED_ALPHANUM_01	From:addr =~ /[a-z]+\d+[a-z]+\d+[a-z]+\@/i
header T_FROM_MIXED_ALPHANUM_02	From:addr =~ /\d+[a-z]+\d+[a-z]+\d+\@/i
header T_FROM_MIXED_ALPHANUM_03	From:addr =~ /^[a-z]+\d+[a-z]+\d+[a-z]+\@/i
header T_FROM_MIXED_ALPHANUM_04	From:addr =~ /\d+\D+\d+\D+\d+\@/i
header T_FROM_MIXED_ALPHANUM_05	From:addr =~ /^[a-z]+\d+[a-z]+\d+[a-z]+.*\@/i
header T_FROM_MIXED_ALPHANUM_06	From:addr =~ /[a-z]+\d+[a-z]+\d+[a-z]+\w*\@/i
header T_FROM_MIXED_ALPHANUM_07	From:addr =~ /\d+[a-z]+\d+[a-z]+\d+\w*\@/i
header T_FROM_MIXED_ALPHANUM_08	From:addr =~ /^[a-z]+\d+[a-z]+\d+[a-z]+\w*\@/i
header T_FROM_MIXED_ALPHANUM_09	From:addr =~ /\d+\D+\d+\D+\d+\w*\@/i
header T_FROM_MIXED_ALPHANUM_10	From:addr =~ /[a-z]+\d+[a-z]+\d+[a-z]+\S*\@/i
header T_FROM_MIXED_ALPHANUM_11	From:addr =~ /\d+[a-z]+\d+[a-z]+\d+\S*\@/i
header T_FROM_MIXED_ALPHANUM_12	From:addr =~ /\d+\D+\d+\D+\d+\S*\@/i
header T_FROM_MIXED_ALPHANUM_13	From:addr =~ /^[a-z]+\d+[a-z]+\d+[a-z]+S*\@/i
header T_FROM_MIXED_ALPHANUM_14	From:addr =~ /^[a-z]+\d+[a-z]+\d+[a-z]+\S*\@/i

# uri case changes
uri T_URI_CASE_CHANGE	/(?:[a-z][A-Z]+){3}/

# hex escape in a directory name
uri T_HTTP_ESCAPED_DIRECTORY	/^https?\:\/\/.*?\/.*%[0-9a-f]{2}.*\//i

# bug 1734: replacement rules
header T_FROM_OFFERS_1		From:addr =~ /^From:.*\@\S*offer(?!sen)/i
header T_FROM_OFFERS_2		From:addr =~ /^From:.*\@\S*offer(?!sen\b)/i
header T_FROM_OFFERS_3		From:addr =~ /^From:.*\@\S*offer(?!s[eo]n)/i
header T_FROM_OFFERS_4		From:addr =~ /^From:.*\@\S*offer(?!s[eo]n\b)/i
header T_FROM_OFFERS_5		From:addr =~ /^From:.*\@\S*offers?(?:\b|[^a-z])/i

# bug 1914:
# tvd - t_see_for_yourself gets the same hit rate, t_try_for_yourself
# isn't great, and t_see_for_yourself2 ends up with a worse s/o overall.
# but let's see how it works for everyone before deciding.
body     T_SEE_FOR_YOURSELF       /\bsee (?:for|it|it for) yourself\b/i
body     T_SEE_FOR_YOURSELF2      /\b(?:see|try) (?:for|it|it for) yourself\b/i
body     T_TRY_FOR_YOURSELF       /\btry (?:for|it|it for) yourself\b/i

# bug 1758:
header T_FROM_NO_USER		From =~ /(?:^\@|<\@| \@[^\)<]*$|<>)/ [if-unset: unset@unset.unset]
header T_TO_NO_USER		To =~ /(?:^\@|<\@| \@[^\)<]*$|<>)/ [if-unset: unset@unset.unset]

# bug 1874:
# replaces WE_HONOR_ALL and REMOVE_RESPECT
# for me this matches all the same messages as the 2 it replaces
body T_WE_HONOR_ALL		/\b(?:honou?r|respect)(?: all)? remov(?:e|al) requests?\b/i

header T_TO_MALFORMED             To !~ /(?:(?:\"[^\"]+\"|\S+)\@\S+\.\S+|\"?[Uu]ndisclosed[- .]recipients\"?:|<\S+(?:\!\S+){1,}>|^\s*$)/ [if-unset: unset@unset.unset]
header T_TO_MALFORMED2             To !~ /(?:(?:\"[^\"]+\"|\S+)\@\S+\.\S+|^\s*.+:\s*;|^\s*\"[^\"]+\":\s*;|^\s*\([^\)]*\)\s*$|<\S+(?:\!\S+){1,}>|^\s*$)/ [if-unset: unset@unset.unset]
