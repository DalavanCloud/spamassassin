# SpamAssassin rules file: CVS rules under test
#
# This file is a placeholder for rules "under probation", ie. checked into
# CVS for testing. It should not be distributed; if the rules have good
# stats after a mass-check or two, then fold them into the distributed
# rules files.
#
# I suggest adding a prefix to rules in this file, "T_" -- this
# helps identify probationary rules in test output.
#
###########################################################################

# should be fixed now
# updated per bug 1217
# %%% INVALID_MSGID
header __VALID_MSGID MESSAGEID =~ /^<(?:[a-zA-Z0-9.,!\#\$%&'*\+\/=?\^_{}|~-]+|\".+\")\@(?:[a-zA-Z0-9_.-]+|\[\d{1,3}(?:\.\d{1,3}){3}\])>(?:\s*\(.*\))?\s*$/m [if-unset: <NO@MSGID>]
meta T_INVALID_MSGID		!__VALID_MSGID
describe T_INVALID_MSGID	Message-Id is not valid, according to RFC 2822
#
# quinlan: If this has a better S/O for others (all of my FPs are from the
# same person), it should be an eval so this can be done properly: strip
# comments on each Message-Id header, then use regular expression.
#
header __MSGID_COMMENT		MESSAGEID =~ /\(.*\)/m
meta T_INVALID_MSGID2		!(__VALID_MSGID || __MSGID_COMMENT)

# results for quinlan
# 0.160   0.2453   0.1136    0.683   0.31    0.50  T_FROM_TOPICA
# 0.220   0.4753   0.0153    0.969   0.87    0.50  T_FROM_TOPICA:jm
# 0.135   0.3462   0.0000    1.000   0.93    0.50  T_FROM_TOPICA:quinlan
# 0.145   0.0136   0.2005    0.063   0.00    0.50  T_FROM_TOPICA:rODbegbie
# Dec  6 2002 jm: my vote: drop it.  Topica claim to be "white hat" nowadays
# anyway, apparently.
# Dec 15 2002 quinlan: they aren't very "white hat" in these parts, but
# yes, the overall stats are not so good
header T_FROM_TOPICA		From:addr =~ /\@(?:\w+\.)?email-publisher\.com$/
describe T_FROM_TOPICA		From an address at email-publisher.com
score T_FROM_TOPICA		0.5

# results for quinlan
#  0.245    0.727    0.013    0.98    0.57    0.50  T_FROM_ALL_NUMS
header __FROM_JUST_NUMBER	From:addr =~ /^\d+\@/
header __FROM_PHONE		From:addr =~ /^\d{3}(?:[-.]?\d{3}[-.]?\d{4}|\d{7})\@/
meta T_FROM_ALL_NUMS		(__FROM_JUST_NUMBER && !__FROM_PHONE)
describe T_FROM_ALL_NUMS	From an address that is all numbers (non-phone)
score T_FROM_ALL_NUMS		0.5

# Needs testing
body T_QUOTE_TWICE_1		/^> >\s/
describe T_QUOTE_TWICE_1	Contains twice quoted reply
tflags T_QUOTE_TWICE_1		nice
score T_QUOTE_TWICE_1		-1.0

# this rule may need to factor in ok_languages or ok_locales
body T_BODY_UNPRINTABLE		/[\x00-\x08\x0b\x0c\x0e-\x1f\x7f]{3,}/
describe T_BODY_UNPRINTABLE	Body includes 3 consecutive unprintable characters

# this rule may need to factor in ok_languages or ok_locales
body T_BODY_8BITS		/[\x80-\xff]{8,}/
describe T_BODY_8BITS		Body includes 8 consecutive 8-bit characters

# some body tests
body T_BROADCAST_EMAIL		/broadcast e.?mail/i
body T_OUR_AFFILIATE_PARTNERS	/our affiliate partners/i
body T_OUR_BROADCAST_EMAIL	/our broadcast e.?mail/i
body T_OUR_COMPENSATION		/our (?:full )?compensation/i
body T_OUR_OVERWHELMING_GROWTH	/our overwhelming growth/i
body T_OUR_POLICY_ON_SELLING	/our policy on selling/i
body T_OUR_PRIVACY_POLICY	/our privacy policy can be found/i
body T_OUR_READERS		/our readers (?:to|with)/i
body T_OUR_STRICT_ANTI		/our strict anti/i
body T_OUR_PUBLICATIONS		/our website (?:and|or) publications/i
# more body tests
body T_CELL_PHONE_BOOST		/(?:boost|antenna|reception).{0,32}(?:cell|mobile|phone|cord.?less)|(?:cell|mobile|phone|cord.?less).{0,32}(?:boost|antenna|reception)/i
body T_OFFERS_ETC		/(?:(?:wish|want|unsub|reward|receive|recurring|remove|permission|partner|further|future|e.?mail|continue|click).{0,64}){2}.{0,8}(?:specials?|offers?|coupons?|discounts?)\b/i

# replacement
# do not add "new" since there's non-spam about "new cell phone numbers"
# separated into two rules since one seems to have a lot of
# sourceforge list advertisement false positives
# %%% FREE_CELL_PHONE
body T_FREE_CELL_PHONE		/\b(?-i:F)ree\b.{0,24}(?:cell(?:ular)?|mobile).{0,4}phones?/i

# dear user
body T_DEAR_USER		/dear(?: \w+)? user/i

# new porn rules
body T_PORN_15			/(?:college|eating|licking|spears|tight|wet|shaved|voyeur|young|teen(?:age)?).{0,16}pussy/i
body T_PORN_16			/(?:nasty|teen|dir(?:ty|iest)?|little).{0,16}\bsluts?/i

# 419 spam, group/merge with other Nigeria rules
body T_MILLION_USD		/Million\b.{0,40}\b(?:United States? Dollars?|USD)/i

########################################################################

header __CD			exists:Content-Disposition
header __CT			exists:Content-Type
header __CTE			exists:Content-Transfer-Encoding
header __MIME_VERSION		exists:MIME-Version
header __CT_TEXT_PLAIN		Content-Type =~ /^text\/plain\b/
meta T_MIME_HEADER_CTYPE_ONLY	(!__CD && !__CTE && __CT && !__MIME_VERSION && !__CT_TEXT_PLAIN)

########################################################################
# bug 1106: forged MUAs
# only needed a \b around the shortest X-Mailer regular expressions

# Dec  9 2002 jm: bloody Lyris eats message-ids, hurts the Eudora test
# Dec 10 2002 jm: also some ezmlm, I think :(
header __GW_THRU_REWRITER	List-Unsubscribe =~ /<mailto:(?:leave-\S+|\S+-unsubscribe)\@\S+>$/

# AOL
header __AOL_MUA		X-Mailer =~ /\bAOL\b/
header __AOL_MSGID		MESSAGEID =~ /^<[0-9a-f]{1,3}\.[0-9a-f]{6,8}\.[0-9a-f]{8}\@aol.com>$/m
meta T_FORGED_MUA_AOL		(__AOL_MUA && !__GW_THRU_REWRITER && !__AOL_MSGID)
describe T_FORGED_MUA_AOL	Forged mail pretending to be from AOL
score T_FORGED_MUA_AOL		1.0

# Mozilla
# Dec 10 2002 jm: dan, you have fps for this, could you check 'em?
header __MOZILLA_MUA		X-Mailer =~ /\bMozilla\b/
header __MOZILLA_MSGID		MESSAGEID =~ /^<[A-F\d]{8}\.[A-F\d]{4,8}\@\S+>$/
meta T_FORGED_MUA_MOZILLA	(__MOZILLA_MUA && !__GW_THRU_REWRITER && !__MOZILLA_MSGID)
describe T_FORGED_MUA_MOZILLA	Forged mail pretending to be from Mozilla
score T_FORGED_MUA_MOZILLA	1.0

# Internet Mail Service
# Dec 10 2002 jm: dan, ditto here
header __IMS_MUA		X-Mailer =~ /Internet Mail Service/
header __IMS_MSGID		MESSAGEID =~ /^<[A-F\d]{36,40}\@\S+>$/m
meta T_FORGED_MUA_IMS		(__IMS_MUA && !__GW_THRU_REWRITER && !__IMS_MSGID)
describe T_FORGED_MUA_IMS	Forged mail pretending to be from IMS
score T_FORGED_MUA_IMS		1.0

# Outlook
# Note: this uses __IMS_MSGID from above
# Dec 10 2002 jm: ready to go, once IMS fps are fixed and we can move
# the dependency
header __OUTLOOK_MUA		X-Mailer =~ /\bOutlook\b(?! IMO| Express Mac)/
header __OUTLOOK_MSGID_1	MESSAGEID =~ /^<[0-9a-f]{12}\$[0-9a-f]{8}\$[0-9a-f]{8}\@\S+>$/m
header __OUTLOOK_MSGID_2	MESSAGEID =~ /^<(?:OE[0-9A-Za-z]{25}|DAV[0-9A-Za-z]{24})\@hotmail\.com>$/m
meta T_FORGED_MUA_OUTLOOK	(__OUTLOOK_MUA && !__GW_THRU_REWRITER && !(__OUTLOOK_MSGID_1 || __OUTLOOK_MSGID_2 || __IMS_MSGID))
describe T_FORGED_MUA_OUTLOOK	Forged mail pretending to be from Outlook
score T_FORGED_MUA_OUTLOOK	1.0

# Outlook IMO (Internet Mail Only)
header __OIMO_MUA		X-Mailer =~ /Outlook IMO/
header __OIMO_MSGID		MESSAGEID =~ /^<[A-P]{26}A[AB]\.[-_\w.]+\@\S+>$/m
meta T_FORGED_MUA_OIMO		(__OIMO_MUA && !__OIMO_MSGID && !__GW_THRU_REWRITER)
describe T_FORGED_MUA_OIMO	Forged mail pretending to be from Outlook IMO
score T_FORGED_MUA_OIMO		1.0

# QUALCOMM Eudora
header __EUDORA_MUA		X-Mailer =~ /\b(?:QUALCOMM|Eudora)\b/
header __MAC_EUDORA_MUA		X-Mailer =~ /Eudora for Macintosh/
header __EUDORA_MSGID		MESSAGEID =~ /^<(?:\d\d?\.){4,5}\d{14}\.[a-f0-9]{8}\@\S+>$/m
meta T_FORGED_MUA_EUDORA	(__EUDORA_MUA && !__EUDORA_MSGID && !__GW_THRU_REWRITER && !__MAC_EUDORA_MUA)
describe T_FORGED_MUA_EUDORA	Forged mail pretending to be from Eudora
score T_FORGED_MUA_EUDORA	1.0

########################################################################

# this is the only To/Cc/From "no lower" version of this idea with a
# somewhat reasonable S/O ratio
header T_FROM_NO_LOWER		From !~ /[a-z]/

###########################################################################

body T_BANG_BOSS		/\bboss!/i
body T_BANG_CARTOONS		/\bcartoons!/i
body T_BANG_CYBERANALYSTS	/\bcyberanalysts!/i
body T_BANG_EXERCISE		/\bexercis(?:e|er|es)!/i
body T_BANG_GUARANTEE		/\bguaranteed?\!/i
body T_BANG_MONEY		/\bmoney!/i
body T_BANG_MORE		/\b(?-i:M)ore!/i
body T_BANG_OPRAH		/\boprah!/i
body T_BANG_QUOTE		/\b(?-i:Q)uotes?\!/i

###########################################################################
# bug 1053: IMG tag based rules
# bug 1163: image only test from mgm

# the three concepts that seem to work the best:
#
# T_HTML_IMAGE_AREA  - lots of image area (absolute)
# T_HTML_IMAGE_ONLY  - not much text with images (absolute)
# T_HTML_IMAGE_RATIO - more image area than text (ratio)

# this is good for 400000 and above, compare with T_IMAGE_ONLY* later
# note that: 640x480 = 307200 and 800x600 = 480000
body T_HTML_IMAGE_AREA_3	eval:html_range('image_area','300000','400000')
body T_HTML_IMAGE_AREA_4	eval:html_range('image_area','400000','500000')
body T_HTML_IMAGE_AREA_5	eval:html_range('image_area','500000','600000')
body T_HTML_IMAGE_AREA_6	eval:html_range('image_area','600000','700000')
body T_HTML_IMAGE_AREA_7	eval:html_range('image_area','700000','800000')
body T_HTML_IMAGE_AREA_8	eval:html_range('image_area','800000','900000')
body T_HTML_IMAGE_AREA_9	eval:html_range('image_area','1000000')

# test 300000 to 400000 with better precision
body T_HTML_IMAGE_AREA_3A	eval:html_range('image_area','300000','325000')
body T_HTML_IMAGE_AREA_3B	eval:html_range('image_area','325000','350000')
body T_HTML_IMAGE_AREA_3C	eval:html_range('image_area','350000','375000')
body T_HTML_IMAGE_AREA_3D	eval:html_range('image_area','375000','400000')

# I am still testing the range, the final version will have
# significantly fewer instances.
body T_HTML_IMAGE_ONLY_01	eval:html_image_only('0000','0100')
body T_HTML_IMAGE_ONLY_02	eval:html_image_only('0100','0200')
body T_HTML_IMAGE_ONLY_03	eval:html_image_only('0200','0300')
body T_HTML_IMAGE_ONLY_04	eval:html_image_only('0300','0400')
body T_HTML_IMAGE_ONLY_05	eval:html_image_only('0400','0500')
body T_HTML_IMAGE_ONLY_06	eval:html_image_only('0500','0600')
body T_HTML_IMAGE_ONLY_07	eval:html_image_only('0600','0700')
body T_HTML_IMAGE_ONLY_08	eval:html_image_only('0700','0800')
body T_HTML_IMAGE_ONLY_09	eval:html_image_only('0800','0900')
body T_HTML_IMAGE_ONLY_10	eval:html_image_only('0900','1000')
body T_HTML_IMAGE_ONLY_11	eval:html_image_only('1000','1100')
body T_HTML_IMAGE_ONLY_12	eval:html_image_only('1100','1200')
body T_HTML_IMAGE_ONLY_13	eval:html_image_only('1200','1300')
body T_HTML_IMAGE_ONLY_14	eval:html_image_only('1300','1400')
body T_HTML_IMAGE_ONLY_15	eval:html_image_only('1400','1500')

# This looks pretty good now.
body T_HTML_IMAGE_RATIO_02     eval:html_image_ratio('0.000','0.002')
body T_HTML_IMAGE_RATIO_04     eval:html_image_ratio('0.002','0.004')
body T_HTML_IMAGE_RATIO_06     eval:html_image_ratio('0.004','0.006')
body T_HTML_IMAGE_RATIO_08     eval:html_image_ratio('0.006','0.008')
body T_HTML_IMAGE_RATIO_10     eval:html_image_ratio('0.008','0.010')
body T_HTML_IMAGE_RATIO_12     eval:html_image_ratio('0.010','0.012')
body T_HTML_IMAGE_RATIO_14     eval:html_image_ratio('0.012','0.014')
body T_HTML_IMAGE_RATIO_16     eval:html_image_ratio('0.014','0.016')
body T_HTML_IMAGE_RATIO_18     eval:html_image_ratio('0.016','0.018')
body T_HTML_IMAGE_RATIO_20     eval:html_image_ratio('0.018','0.020')

####################################################################

# quinlan: I think we could promote 3 and above.  A numeric function
# test might work well too.  Also worth some further experimentation:
# maybe also try adding colors and other attributes into the count.
#
# Note that these are HTML_MESSAGE numbers, so S/O values above 0.80
# are pretty good.
#
#OVERALL%   SPAM% NONSPAM%     S/O    RANK   SCORE  NAME
#  24928    19300     5628    0.774   0.00    0.00  (all messages)
#100.000  77.4230  22.5770    0.774   0.00    0.00  (all messages as %)
# 37.626  34.0364  49.9645    0.405   0.11    0.01  T_HTML_SHOUTING1
# 24.287  26.3337  17.2530    0.604   0.25    0.01  T_HTML_SHOUTING2
#  8.205  10.1117   1.6525    0.860   0.62    0.01  T_HTML_SHOUTING3
#  3.035   3.8151   0.3554    0.915   0.73    0.01  T_HTML_SHOUTING4
#  1.350   1.6129   0.4442    0.784   0.46    0.01  T_HTML_SHOUTING5
#  0.392   0.4911   0.0533    0.902   0.70    0.01  T_HTML_SHOUTING6
#  0.224   0.2843   0.0178    0.941   0.79    0.01  T_HTML_SHOUTING7
#  0.140   0.1809   0.0000    1.000   0.95    0.01  T_HTML_SHOUTING8
#  0.356   0.4446   0.0533    0.893   0.68    0.01  T_HTML_SHOUTING9
#
body T_HTML_SHOUTING1            eval:html_range('max_shouting','0','1')
body T_HTML_SHOUTING2            eval:html_range('max_shouting','1','2')
body T_HTML_SHOUTING3            eval:html_range('max_shouting','2','3')
body T_HTML_SHOUTING4            eval:html_range('max_shouting','3','4')
body T_HTML_SHOUTING5            eval:html_range('max_shouting','4','5')
body T_HTML_SHOUTING6            eval:html_range('max_shouting','5','6')
body T_HTML_SHOUTING7            eval:html_range('max_shouting','6','7')
body T_HTML_SHOUTING8            eval:html_range('max_shouting','7','8')
body T_HTML_SHOUTING9            eval:html_range('max_shouting','8')

##################################################################

# actually, this looks really good!  Dec  6 2002 jm: except for rod's
# corpus ;)
header T_FROM_OFFERS            From:addr =~ /offers\S*\@/i
describe T_FROM_OFFERS          From address is "offers at something"
header T_FROM_OFFERS_2          From:addr =~ /^offers/i
header T_FROM_OFFERS_3          From:addr =~ /\@\S*offers/i

# quinlan: these may overlap some existing CLICK rules, check before adding
body     T_HTML_LINK_CLICK_HERE eval:html_eval('anchor_text', '=~ /click\s+here/i')
body     T_HTML_LINK_CLICK_CAPS eval:html_eval('anchor_text', '=~ /CLICK/')

# Nov 12 2002 jm: still not sure about this one. ALL.current reports
# 0.108   0.4001   0.0062    0.985   0.93    1.00  T_IDENT_NOBODY
# combined for all submitters.  too dangerous considering the amount
# of daemons sending mail reports, running as root
header T_IDENT_NOBODY		Received =~ /ident[:=]nobody\b/i
describe T_IDENT_NOBODY		Message was sent by nobody
score T_IDENT_NOBODY		1.0

# I spent the better part of a day hacking around with the Message-Id
# stuff.  I found a few new regexps that works fairly well on my corpus
# with no overlap of the current MSGID_* rules. - tvd

# Dec  6 2002 jm: needs more work:
# 0.378   0.9069   0.0852    0.914   0.74    0.01  T_MSGID_S_1
# 0.508   1.1217   0.0153    0.987   0.92    0.01  T_MSGID_S_1:jm
# 0.341   0.8349   0.0260    0.970   0.85    0.01  T_MSGID_S_1:quinlan
# 0.334   0.8014   0.1375    0.854   0.60    0.01  T_MSGID_S_1:rODbegbie
# I suggest breaking out the meta rule and see which ones are FPing

# jm: commented, this hits slist mail traffic, e.g.
# the <mozilla-general@mozilla.org> list.   Note that the moz lists have a
# very high spam load, which may explain why the resulting freqs look good
#header __T_MSGID_11	MESSAGEID =~ /^<?\d\w+\$\w{4,}\@/m
# tvd: these fp a bit, so they're disabled
#header __T_MSGID_37	MESSAGEID =~ /^<?\d{13,}\.SM\d+\@[^>]/m
#header __T_MSGID_16	MESSAGEID =~ /^<?[A-Z]\d{10}\@/m
# percents are fp percent of spam hits ...
# 52% fp for daf
#header T_BAD_MSGID_19	MESSAGEID =~ /^<?\w{7}-\w{6}-\w{2}\.\d{4}(?:-\d{2}){5}\@/m
# these are all message ids from exchange, the front part is a server name...
# 10% for rod
#header T_BAD_MSGID_20	MESSAGEID =~ /^<?EXCH\S+\@/m
# 10% for dan, 7% for rod, <1% for tvd
#header T_BAD_MSGID_24	MESSAGEID =~ /^<?[A-Z0-9_-]*SERV[A-Za-z0-9_-]+[0-9a-f]{8}\@/m
# 40% for rod
#header T_BAD_MSGID_26	MESSAGEID =~ /^<?[A-Z0-9_-]*MAIL[a-zA-Z0-9_-]+0000[0-9a-f]{4}\@/m
#meta T_MSGID_S_1	( T_BAD_MSGID_.+ + ) > 0
# only tvd
#header T_BAD_MSGID_17	MESSAGEID =~ /^<?DGTBAD\S+\@/m

# no fp
header T_SPAM_MSGID_10	MESSAGEID =~ /^<?(?:\d+\$){3}\d+\@/m
# no fp
header T_SPAM_MSGID_8	MESSAGEID =~ /^<?\d{4}\$\w+\@/m
# 10% justin, 16% for rod
header T_SPAM_MSGID_32	MESSAGEID =~ /^<?auto-00000\d+\@/m

# Matt Cline: New ratware and user-agent tests
header T_RATWARE_BIXON       X-Mailer =~ /Bixon ThunderMail/
header T_RATWARE_BULK_MAILER X-Mailer =~ /BulkMailer/
header T_RATWARE_BANG_HASH   X-Mailer =~ /!.*\#.*\*/
header T_RATWARE_HASH_2_V2   X-Mailer =~ /^[A-Za-z0-9\._]{14,}$/
header T_RATWARE_FLOAT       X-Mailer =~ /^\d\.\d\d/
header T_RATWARE_CHARSET_V2  X-Mailer =~ /^normal \W \W\s*charset.*=\"/

# bug 1285
header T_RATWARE_SMTPIT		X-Mailer =~ /SMTPit - FileMaker Pro Email Plugin/

header T_USER_AGENT_XIMIAN   X-Mailer =~ /^Ximian Evolution \d+\.\d+\.\d+(?:\.\d+)?\s$/
score  T_USER_AGENT_XIMIAN   -0.5
tflags T_USER_AGENT_XIMIAN   nice

##############################################################################

# Nov 12 2002 jm: not keen on this.  many ISPs do not provide rDNS these
# days as policy. stupid policy, but there we are. and SpamAssassin policy
# is not to punish users with stupid ISPs...
#
# Dec 07 2002 quinlan: I agree, the ratio is not good enough anyway, here
# are everyone's results from ALL.current:
#
# 13.006  14.0534   5.1948    0.730   0.37   0.01 T_SENDER_NO_REVERSE:daf
#  7.908  29.7468   3.0721    0.906   0.73   0.01 T_SENDER_NO_REVERSE:easmith
# 11.913  17.9848   7.0371    0.719   0.38   0.01 T_SENDER_NO_REVERSE:jm
# 17.448  39.3810   3.4451    0.920   0.78   0.01 T_SENDER_NO_REVERSE:quinlan
#  4.988  10.5000   2.6515    0.798   0.51   0.01 T_SENDER_NO_REVERSE:rODbegbie
# 11.997  23.7109   5.5591    0.810   0.50   0.01 T_SENDER_NO_REVERSE:theo
#
header   T_SENDER_NO_REVERSE    eval:check_for_sender_no_reverse()
describe T_SENDER_NO_REVERSE    No reverse lookup for sender's IP

# Matt Cline, Bug #1220
body T_FOR_FREE                   /\bfor FREE\b/i
body T_COMPLETELY_FREE            /\b(?:100%|completely|totally|absolutely) Free/i
body T_SAVE_UP_TO                 /\bSave up to\b/i
body T_DO_IT_TODAY        /\b(?:join|register|order|apply) .{0,10}Today\b/i
body T_GET_STARTED_NOW            /\bget started Now\b/i
body T_GET_PAID                   /\bget Paid\b/i
body T_FREE_GRANT                 /\b(?:free|government) Grants?\b/i
body T_APPLY_FREE                 /Free Application|free application.{0,32}(?:today|minute|less than)/i
body T_APPLY_ONLINE               /\bapply Online/i
body T_FREE_INSTALL               /Free installation/i
body T_FREE_PREVIEW               /Free preview/i
body T_FREE_ACCESS                /Free access/i
body T_FREE_SAMPLE                /Free sample/i
body T_GET_IT_NOW         /get it Now/i
body T_LOW_PRICE                  /\blow.{0,4} Price/i

######

body     T_LOTS_OF_STUFF         /\b(?:\d{1,3}[,\.])+\d{3}.{0,20}\b(?:pics|pictures|images|photos|movies)/i
describe T_LOTS_OF_STUFF         Thousands or millions of pics/movies/etc

# Good correlation between mutt msgids and nonspam.  Also provides
# a good way to hammer those Mutt-forging spammers looking to
# get the bonus points we added for it in 2.4x
header __MUTT12_MSGID	Message-Id =~ /20[01]\d[01]\d[0123]\d[012]\d[0-5]\d\d\d\.[A-Z]{1,2}\d{2,5}\@/
header __MUTT12_UA	User-Agent =~ /^Mutt\/1\.[234]\.\d+i/
header __MUTT12_XM	X-Mailer =~ /^Mutt\/1\.[234]\.\d+i/

# quinlan: this does not seem so good, recommend removing it
# 0.074  0.0535  0.0819  0.395  0.06  0.01  T_FORGED_MUTT_NO_MSGID
# 0.095  0.0525  0.1023  0.339  0.04  0.01  T_FORGED_MUTT_NO_MSGID:daf
# 0.064  0.0422  0.0707  0.374  0.05  0.01  T_FORGED_MUTT_NO_MSGID:easmith
# 0.151  0.0407  0.2210  0.156  0.00  0.01  T_FORGED_MUTT_NO_MSGID:quinlan
# 0.020  0.0693  0.0000  1.000  0.96  0.01  T_FORGED_MUTT_NO_MSGID:rODbegbie
meta T_FORGED_MUTT_NO_MSGID	((__MUTT12_UA || __MUTT12_XM) && !__MUTT12_MSGID)
meta T_MUTT_WITH_MSGID		((__MUTT12_UA || __MUTT12_XM) && __MUTT12_MSGID)
tflags T_MUTT_WITH_MSGID	nice

# carefully crafted to avoid matching: mx1, x400, p11, s05, hd2, c4
# nonspam seems to have low numbers, spam (which is faked) has high ones
header T_AA9_HOSTNAME_IN_FROM	 From:addr =~ /\@[a-ln-z]{1,2}[5-9]+\.\S+\./i
describe T_AA9_HOSTNAME_IN_FROM  'From' has fake 'letter-letter-number' hostname

# I'd noticed this before, but the spams were all hit by other rules, until
# today.  So let's try it now
header T_TO_NO_SPACE_AFTER_NAME	To =~ /^[^<@]+[a-zA-Z0-9]</
describe T_TO_NO_SPACE_AFTER_NAME  No space after real name in 'To'

# These are possible replacements for/additions to RAZOR2_CHECK - tvd
# cf is how likely the message is spam.  RAZOR2_CHECK returns true if
# cf>=min_cf (as defined by user/config).  I think we should leave that,
# but probably lower the RAZOR2_CHECK score and add in more points based
# on the range.  I dunno, I haven't fully figured out the rule integration
# for this yet.
body T_RAZOR2_RANGE_01_10	eval:check_razor2_range('01','10')
body T_RAZOR2_RANGE_11_20	eval:check_razor2_range('11','20')
body T_RAZOR2_RANGE_21_30	eval:check_razor2_range('21','30')
body T_RAZOR2_RANGE_31_40	eval:check_razor2_range('31','40')
body T_RAZOR2_RANGE_41_50	eval:check_razor2_range('41','50')
body T_RAZOR2_RANGE_51_60	eval:check_razor2_range('51','60')
body T_RAZOR2_RANGE_61_70	eval:check_razor2_range('61','70')
body T_RAZOR2_RANGE_71_80	eval:check_razor2_range('71','80')
body T_RAZOR2_RANGE_81_90	eval:check_razor2_range('81','90')
body T_RAZOR2_RANGE_91_100	eval:check_razor2_range('91','100')
#score T_RAZOR2_RANGE_01_10 0.1
#score T_RAZOR2_RANGE_11_20 0.2
#score T_RAZOR2_RANGE_21_30 0.4
#score T_RAZOR2_RANGE_31_40 0.6
#score T_RAZOR2_RANGE_41_50 1.0
#score T_RAZOR2_RANGE_51_60 1.2
#score T_RAZOR2_RANGE_61_70 1.4
#score T_RAZOR2_RANGE_71_80 1.6
#score T_RAZOR2_RANGE_81_90 1.8
#score T_RAZOR2_RANGE_91_100 2


# bug 1207:
#
# these do not work so well (daf+easmith+quinlan+rODbegbie+theo)
#
#  0.037   0.0720   0.0217    0.768   0.43    0.01  T_DOUBLE_SQUOTES_1
#  0.044   0.0720   0.0326    0.688   0.31    0.01  T_DOUBLE_SQUOTES_3
#  0.055   0.0792   0.0450    0.638   0.25    0.01  T_DOUBLE_SQUOTES_2
#
header T_DOUBLE_SQUOTES_1 Subject =~ /''\w+''/
describe T_DOUBLE_SQUOTES_1 Evading word tests with two single quotes
test T_DOUBLE_SQUOTES_1 ok  ''this'' is ''spam''
test T_DOUBLE_SQUOTES_1 fail 'this is quoted'

header T_DOUBLE_SQUOTES_2 Subject =~ /''/
describe T_DOUBLE_SQUOTES_2 Evading word tests with two single quotes
test T_DOUBLE_SQUOTES_2	ok ''
test T_DOUBLE_SQUOTES_2 fail 'hi'

header T_DOUBLE_SQUOTES_3 Subject =~ /''.{0,15}''/
describe T_DOUBLE_SQUOTES_3 Evading word tests with two single quotes
test T_DOUBLE_SQUOTES_3 ok ''buy now''
test T_DOUBLE_SQUOTES_3 fail 'asdfasdfasdf'

# Here are some tests for weird double quoting in the body (I tried 37
# variations, these are the best 10, in rough order best RANK to worst
# RANK). - quinlan
# P.S. I feel really icky after writing these.
body T_BODY_QUOTES_01	/(["'])\1\S{0,15}(["'])\1/
body T_BODY_QUOTES_02	/(["']{2})\S{0,15}\1/
body T_BODY_QUOTES_03	/(["'\222\223\224\262\263\271])\1\S{0,15}(["'\222\223\224\262\263\271])\1/
body T_BODY_QUOTES_04	/(["'\222\223\224\262\263\271]{2})\S{0,15}\1/
body T_BODY_QUOTES_05	/['\222\223\224\262\263\271]{2}\S{0,15}['\222\223\224\262\263\271]{2}/
body T_BODY_QUOTES_06	/["'\222\223\224\262\263\271]{2}.{0,15}["\222\223\224\262\263\271]{2}/
body T_BODY_QUOTES_07	/(["'\222\223\224\262\263\271]{2}).{0,15}\1/
body T_BODY_QUOTES_08	/(["'])\1.{0,15}(["'])\1/
body T_BODY_QUOTES_09	/(["']{2}).{0,15}\1/
body T_BODY_QUOTES_10	/(["'\222\223\224\262\263\271])\1.{0,15}(["'\222\223\224\262\263\271])\1/

#bug 1010
body T_CHECK_EMAIL_ISFREE	eval:check_email_isfree()
describe T_CHECK_EMAIL_ISFREE Body contains an e-mail address listed by Email::IsFree

#bug 1129
body T_DISGUISE_PORN         /\b(c[*0]cks?|d[1*]cks?|h[0*]rny|b[1*]tch(?:es)|f[*0]ckk?ed|p[*]ssy|p[*]ssies)\b/i
describe T_DISGUISE_PORN     Attempts to disguise porn words

#bug 495: potential replacements for ACT_NOW
body T_ACT_NOW_1	/A(?i:ct) N(?i:ow)/
body T_ACT_NOW_2	/D[Oo].{0.5} H(?i:esitate)/
body T_ACT_NOW_3	/S(?i:tart now)/
body T_ACT_NOW_4	/act now/i
body T_ACT_NOW_5	/do.{0.6}\bhesitate/i
body T_ACT_NOW_6	/start now/i

# bug 509
body T_BEST_DEAL			/best deal/i
describe T_BEST_DEAL		Best Deals
body T_WORRY_FREE			/worry free/i
describe T_WORRY_FREE		No Worries Mate
body T_NO_HASSLE			/no[ -]hassle/i
describe T_NO_HASSLE		No Hassle
body T_EXPERTS_SHOW_HOW		/experts show you how/i
describe T_EXPERTS_SHOW_HOW	Experts show you how
body T_ENHANCE_WEBSITE		/E(?i:nhance any) W(?i:ebsite)/
describe T_ENHANCE_WEBSITE	Enhance any Website
